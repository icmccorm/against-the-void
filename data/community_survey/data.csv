Progress,Duration (in seconds),Finished,DistributionChannel,Q_RecaptchaScore,Q_RelevantIDDuplicate,Q_RelevantIDDuplicateScore,Q_RelevantIDFraudScore,Q_RelevantIDLastStartDate,CQ1,CQ2,CQ3,ELQ1,ELQ2,BQ1,BQ2,BQ3,BQ4,BQ5,BQ6,BQ7,DMQ1,DMQ1_15_TEXT,DMQ2,DMQ2_15_TEXT,DMQ3,DMQ4,DMQ5,DMQ6,UFQ1,UFQ1_13_TEXT,UFQ2,UFQ2_13_TEXT,UFQ3,USCQ1,CUFQ1,CUFQ2,ITQ1,ITQ1_5_TEXT,ITQ2,MDMUQ1,BXQ1,BXQ2,WUQ1,WUQ1_5_TEXT,WUNQ1,WUNQ1_13_TEXT,WUNQ2,WUNQ3,WUNQ3_5_TEXT,WUEQ1,WUEQ1_13_TEXT,WUEQ2,WUEQ2_5_TEXT,WUPQ1,WUPQ1_13_TEXT,WUPQ2,WUPQ2_5_TEXT,WUPQ3,WUPQ4,WUPQ4_18_TEXT,PVSQ1,PVSQ2,LMUQ1,LMUQ2,LMUQ3,LMUQ4,ENQ1,ENQ2,EUAQ1,EUAQ1_4_TEXT,EUAQ2,EUAIQ1,EUAIQ2,ESAQ1,ESAQ2,FFIBQ1,FFIBQ1_18_TEXT,FFIBQ2,FFIBQ3,FFIBQ4,FFIBQ5,FFIBQ6,FFIMMQ1,FFIMMQ1_4_TEXT,FFIMMQ3,FFIMMQ4,FFIMMQ5,FFIMMQ6,FFIMMQ7,FFIBAQ1,FFIBAQ1_9_TEXT,FFIBAQ2,FFIBAQ2_17_TEXT,FFIBAQ3,VQ1,VQ1_6_TEXT,VQ2,VQ2_14_TEXT,VQ4,VQ5,VQ5_25_TEXT,VQ6,VQ7,VQ8,VQ9,VMQ1,VMQ1_6_TEXT,VMQ2,VMQ3,VMQ3_9_TEXT,VMQ4,CCQ1,CCQ1_9_TEXT,CCQ2,CCQ3,CCQ4,CCQ5,DQ1,DQ2,DQ3,DQ3_6_TEXT,DQ4,DQ4_6_TEXT,DQ5,DQ5_10_TEXT,PICQ1,PICQ2,PICQ3,PICNQ1,PIDQ2
100,13749,TRUE,preview,0.899999976,,,,,Yes,Yes,Yes,10,Yes,15,10,10,Daily,Yes,Yes,,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Web browsers,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Web browsers,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Always,12,"Volatiles,Atomics,Const intrinsics",,No,5,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,38,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Manual memory allocation,Calling foreign functions,Cyclic aliasing patterns",,,,7,,,Use safe,Use safe,8,"forbid(unsafe_code),deny(unsafe_code),allow(improper_ctypes),unsafe_block_in_unsafe_fn",9,,Yes,Yes,"Impossible to encapsulate without imposing safety requirements on the user,Other",To expose a building block,25,1,,1,,"Assembly,C,C++,C#,Dart,Java,JavaScript,Python,TypeScript",,I write bindings manually and generate bindings using a tool,Might or might not,,Yes,Written manually,"Box,Rc,Arc",,21,,,5,,"bindgen,cbindgen,wasm-bindgen,CXX,Emscripten,PyO3,Diplomat",,8,,21,"Kani,Prusti",,"AddressSanitizer (ASAN),cargo fuzz,LeakSanitizer (LSAN),libFuzzer,Loom,MemorySanitizer (MSAN),ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind,1",,4,"Creating a zero-size allocation with an allocator that requires nonzero size,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Integer overflow,Unaligned memory access",,15,,cargo-deny,22,"Lack of support for foreign function calls,My unsafe code is in violation of Stacked Borrows",,6,"Stacked Borrows Violation,Tree Borrows Violation",,16,GitHub,,33,,14,11,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor,Rust project member",,,,Yes,Yes,,,Amazon
100,596,TRUE,preview,0.899999976,,,,,Yes,Yes,Yes,3,Yes,11,0,11,Yearly,No,No,,"Operating systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Web browsers,Interpreters & runtime systems,Data structures and language-level primitives",,"Operating systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,No,Yes,Neither easy nor difficult,,,"Intrinsics,Mutable static variables",,No,,,,Architecture-specific or SIMD intrinsics,,Yes,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,Intrinsics,,,,7,,,Use safe,Use safe,7,,10,,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,cargo fuzz,,2,,,17,,,24,,,,,,,Other,[company internal chat],33,,12,9,30-39,PhD,Man,,"Industry,Open-source contributor",,,,No,Yes,,,
100,48,TRUE,anonymous,0.899999976,,0,0,,No,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,631,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,6,Yes,14,14,11,Yearly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Database systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Extremely easy,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,Most of the time,Always,Most of the time,,,,Unsure,,,"I am not aware of a safe alternative at any level of ease-of-use or performance.,Other","Typically, I try to only ever use unsafe for calling into FFI. That has no safe alternative at all.",,,Always,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Always,No,Yes,,,,,,Most of the time,Most of the time,"C,C++,Python",,I generate bindings using a tool,Might or might not,Probably yes,No,,,,Never,No,Yes,Most of the time,Unsure,"bindgen,cbindgen,wasm-bindgen,Emscripten,PyO3",,12,,Somewhat easy,,,,,Never,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Use after free,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Sometimes,,Extremely unlikely,,,,,,,The Rust Programming Language Forums,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,18-29,Master's degree,Prefer not to disclose,,"Industry,Academia,Open-source contributor",,The Rust Programming Language Forums,,Yes,No,No,,Amazon
100,1216,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,8,Yes,12,8,8,Weekly,Yes,Yes,Weekly,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,No,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,Cell,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,Sometimes,Sometimes,,,,Never,No,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates",,"MaybeUninit,UnsafeCell",,Never,Other,I write perfect code from the beginning ,Use unsafe,Use unsafe,Neither easy nor difficult,,Sometimes,Never,Yes,Yes,To provide a more performant equivalent of a safe API,,Always,Always,Most of the time,Most of the time,Sometimes,C,,I write bindings manually and generate bindings using a tool,Definitely yes,Probably not,Yes,Generated by a tool,Box,,Never,No,Yes,Most of the time,Never,bindgen,,13,,,,,"Miri,Valgrind",,Less than once a year,Violation of stacked or tree borrows,,Always,Most of the time,,Extremely unlikely,"Slow performance,Lack of support for foreign function calls",,Most of the time,Stacked Borrows Violation,,Somewhat difficult,,,Extremely negatively,Extremely negatively,Never,Neither agree nor disagree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,776,TRUE,anonymous,0.899999976,,0,60,,Yes,Yes,Yes,5,Yes,14,8,8,Yearly,No,No,Yearly,"Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Neither easy nor difficult,OnceCell,,"mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Most of the time,Most of the time,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates",,Most of the time,,,"mem::transmute,In-place initialization or updates",,,,"mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates",,,,Never,Small-scale optimizations,,Use safe,Unsure,Somewhat easy,deny(unsafe_code),Never,Always,No,Yes,,,,,,Sometimes,Most of the time,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Yearly,,,Most of the time,Sometimes,"cargo-update,cargo-deny",Somewhat likely,Slow performance,,Never,,,,,,Somewhat negatively,Unsure,Most of the time,Strongly disagree,30-39,Master's degree,Non-binary,,"Industry,Academia,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,743,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,5,0,4,Less than once a year,Yes,No,Less than once a year,"Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems,Game development",,"Web applications - Backend,Interpreters & runtime systems,Game development",,Yes,Yes,Yes,Neither easy nor difficult,MaybeUninit,,"Calling foreign functions,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,Other,It was the only option as I was doing FFI,,,,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Never,Always,No,Yes,,,,,,Most of the time,Unsure,C,,I write bindings manually,Might or might not,Might or might not,No,,,,Never,No,Unsure,Unsure,Unsure,,,,,,,,,,Less than once a year,Unwinding across foreign stack frames without using an -unwind ABI,,Sometimes,Never,,Neither likely nor unlikely,,,,,,,The Rust Community Discord,,Somewhat negatively,Unsure,Sometimes,Somewhat agree,18-29,High school diploma/GED,Non-binary,,Open-source contributor,,The Rust Programming Language Community Discord,,Yes,No,No,,Amazon
100,1595,TRUE,anonymous,1,,,,,Yes,Yes,Yes,5,Yes,20,0,0,Less than once a year,No,No,Less than once a year,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives",,"Web applications - Frontend,Image & Data processing,Data structures and language-level primitives",,No,No,Yes,Extremely difficult,,,"Self-referential structs,Dereferencing a raw pointer,Pointer arithmetic,Implementing an unsafe trait,Declaring an unsafe trait",,No,,,,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Self-referential structs,Dereferencing a raw pointer,Pointer arithmetic,Implementing an unsafe trait,Declaring an unsafe trait",,Always,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,forbid(unsafe_code),Sometimes,Always,No,Yes,,,,,,Always,Always,,,,,,,,,,,,,,,,,,,,,,Miri,,Less than once a year,Use after free,,Always,Never,,Extremely likely,Slow performance,,Sometimes,,,,,,Neither positively nor negatively,Somewhat negatively,Unsure,Somewhat agree,40-49,Some college,Man,,Industry,,Reddit (/r/rust),,No,No,No,,
100,640,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,10,1,1,Weekly,Yes,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Web browsers,Game development,Other",Parsers with SIMD opitmization,"Web browsers,Game development",,No,Yes,No,Somewhat difficult,MaybeUninit,,"Intrinsics,Inline assembly,mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait,Other",SIMD intrinsics,No,,Sometimes,Never,"Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Calling unsafe functions written in Rust,Other",Calling unchecked bytes to str conversion,MaybeUninit,,Always,Small-scale optimizations,,Use safe,Use safe,Somewhat easy,deny(unsafe_code),Sometimes,Most of the time,No,Yes,,,,,,Always,Always,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Miri,Valgrind",,Daily,Out-of-bounds access,,Most of the time,Sometimes,"cargo-audit,cargo-geiger",Extremely unlikely,Lack of support for inline assembly,,Sometimes,Unaligned memory access,,,The Rust Programming Language Forums,,Extremely negatively,Neither positively nor negatively,Most of the time,Somewhat agree,30-39,Master's degree,Prefer not to disclose,,Open-source contributor,,Reddit (/r/rust),,No,No,No,,
100,1430,TRUE,anonymous,,,0,0,,Yes,Yes,Yes,4,Yes,39,20,3,Less than once a year,No,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Serialization & deserialization",,Yes,No,No,Somewhat difficult,,,"Manual memory allocation,Calling foreign functions,Calling unsafe functions written in Rust",,No,,Sometimes,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Calling foreign functions",,Always,,,,,,,,,,,,,,Use safe,,Neither easy nor difficult,,Never,Always,No,Yes,,,,,,Never,Always,C,,I write bindings manually,Might or might not,Probably yes,No,,,,Never,No,Unsure,Always,Always,,,,,,,,,,Never,,,Always,Never,,Extremely likely,,,,,,,The Rust Programming Language Forums,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Neither agree nor disagree,60-69,Bachelor's degree,Man,,Industry,,The Rust Programming Language Forums,,No,No,Yes,No,
100,1295,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,12,7,6,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Web applications - Backend,Non-JIT Compilation,Interpreters & runtime systems,Game development",,"Operating systems,Embedded systems,Web applications - Backend,Non-JIT Compilation,Game development",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,Cell,UnsafeCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait,Other",Communicating unchecked preconditions to the compiler for optimization purposes,Yes,Always,Always,Most of the time,Architecture-specific or SIMD intrinsics,,No,Sometimes,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,Intrinsics,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Implementing an unsafe trait,Declaring an unsafe trait,Other",Communicating unsafe preconditions to compiler,Always,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Intrinsics,mem::transmute,Pointer arithmetic",,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Most of the time,Both,,Use unsafe,Use unsafe,Somewhat easy,"deny(unsafe_code),allow(improper_ctypes),allow(improper_ctypes_definitions)",About half the time,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,About half the time,Most of the time,"Assembly,C,C++",,I write bindings manually,Definitely yes,Might or might not,Yes,Both,,,Never,Yes,Yes,Sometimes,Sometimes,,,,,,,,"Miri,Valgrind",,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Unaligned memory access",,About half the time,Sometimes,cargo-audit,Neither likely nor unlikely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Most of the time,"Stacked Borrows Violation,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,"The Rust Community Discord,Other",rust-lang zulip,Unsure,Unsure,Always,Somewhat disagree,18-29,Some college,Man,,"Open-source contributor,Other",3rd party rust implementor,The Rust Programming Language Community Discord,,Yes,Yes,No,,Amazon
100,1204,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,30,5,0,Monthly,Yes,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Database systems,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Rc,Arc,UnsafeCell",,"Manual memory allocation,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Always,About half the time,,,,Sometimes,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Sometimes,,,,,,,Calling unsafe functions written in Rust,,,,About half the time,Both,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Never,About half the time,Most of the time,,,I write bindings manually,Probably yes,Definitely yes,Unsure,,,,Sometimes,Yes,Yes,Unsure,Sometimes,,,,,,,,Miri,,Never,External runtime or hardware interface does not behave according to its written specification.,,Most of the time,Sometimes,,Neither likely nor unlikely,,,Sometimes,"Stacked Borrows Violation,Use-after-free,Unaligned memory access,Using uninitialized memory",,Neither easy nor difficult,The Rust Programming Language Forums,,Neither positively nor negatively,Somewhat positively,Most of the time,Somewhat agree,30-39,Master's degree,Prefer not to disclose,,Academia,,The Rust Programming Language Forums,,No,No,No,,
100,1045,TRUE,anonymous,1,,0,20,,Yes,Yes,Yes,3,Yes,16,15,15,Weekly,Yes,Yes,Monthly,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box,RefCell",,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,Sometimes,Most of the time,,,,Sometimes,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Most of the time,,,,,,,,,"MaybeUninit,UnsafeCell",,Most of the time,Small-scale optimizations,,Use safe,Use safe,Neither easy nor difficult,,Never,Sometimes,No,Yes,,,,,,Most of the time,Most of the time,"C,C++",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Yes,Written manually,Box,,Never,No,Yes,Most of the time,About half the time,"bindgen,wasm-bindgen,PyO3,Other",cpp,12,,Somewhat easy,,,Valgrind,,Less than once a year,"Creating a zero-size allocation with an allocator that requires nonzero size,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI,Memory leak",,Sometimes,Never,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Neither positively nor negatively,About half the time,Strongly agree,30-39,High school diploma/GED,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,2664,TRUE,anonymous,1,,0,20,,Yes,Yes,Yes,6,Yes,26,5,17,Weekly,Yes,Yes,Weekly,"Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives",,"Web applications - Backend,Database systems,Game development",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,UnsafeCell",,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,Always,Most of the time,,,,About half the time,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,Always,,,,,,,"mem::transmute,Dereferencing a raw pointer,In-place initialization or updates",,,,Most of the time,Both,,Use safe,Use unsafe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Most of the time,No,Yes,,,,,,Always,Always,"C,C++",,I generate bindings using a tool,Might or might not,Probably yes,Unsure,,,,Most of the time,No,Yes,Always,Most of the time,"bindgen,cbindgen,CXX",,13,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Daily,"Creating a zero-size allocation with an allocator that requires nonzero size,Incorrectly declared bindings to intrinsics or foreign functions.",,Always,Sometimes,,Somewhat unlikely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Most of the time,"Stacked Borrows Violation,Tree Borrows Violation,Data race,Using uninitialized memory",,Extremely easy,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1949,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,9,5,4,Monthly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,"Operating systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Game development,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,RefCell,Cell,UnsafeCell,OnceCell,LazyCell,Mutex",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,Most of the time,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,Sometimes,No,No,Other,An hardware-related implementation that couldn’t be safely exposed,,,,,,,,,,,,,,,,,Use unsafe,Use unsafe,Somewhat easy,"allow(improper_ctypes),allow(improper_ctypes_definitions),const_raw_ptr_deref",Sometimes,About half the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Most of the time,Always,Sometimes,Most of the time,Always,"Assembly,C,C++,Dart,JavaScript,Python,Swift,Other",Red,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Unsure,,Box,,Sometimes,Yes,No,Most of the time,Most of the time,"bindgen,cbindgen,wasm-bindgen,CXX,PyO3,Other",cpp-rs,13,,Neither easy nor difficult,,,,,Never,"Using uninitialized memory,Out-of-bounds access,Use after free,External runtime or hardware interface does not behave according to its written specification.",,Always,Sometimes,,Neither likely nor unlikely,,,,,,,"The Rust Programming Language Forums,Other",Stackoverflow,Neither positively nor negatively,Somewhat positively,Most of the time,Somewhat agree,18-29,PhD,Man,,"Industry,Academia,Open-source contributor",,"Reddit (/r/rust),""This Week in Rust""",,No,No,No,,
100,1644,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,4,1,1,Yearly,Yes,No,Yearly,"Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems",,"Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems",,Yes,No,Yes,Somewhat easy,"Pin,Box,Rc",,"Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Most of the time,About half the time,,,,,Yes,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,Calling unsafe functions written in Rust",,Unsure,,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,,Never,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,"C,C++,Swift",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,"Box,Rc",,Never,Unsure,Unsure,Most of the time,Unsure,"bindgen,cbindgen,wasm-bindgen,CXX",,13,,Neither easy nor difficult,,,"Miri,Valgrind",,Yearly,"Out-of-bounds access,Null pointer dereference,Memory leak",,Sometimes,Never,"cargo-update,cargo-deny",Somewhat unlikely,,,Never,"Null pointer dereference,Memory leak",,,The Rust Community Discord,,Somewhat positively,Unsure,Unsure,Somewhat agree,18-29,Some college,Man,,Industry,,Reddit (/r/rust),,No,Yes,No,,
100,2531,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,6,Yes,3,1,1,Daily,Yes,Yes,Weekly,"Operating systems,Embedded systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,Always,Always,Sometimes,"Const intrinsics,Architecture-specific or SIMD intrinsics",,No,Sometimes,Yes,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,MaybeUninit,,Always,Both,,Use safe,Use unsafe,Extremely easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",About half the time,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,About half the time,About half the time,C,,I do not write or generate bindings,Probably yes,Might or might not,Yes,Generated by a tool,Box,,Never,No,No,Always,Always,,,,,,,,"AddressSanitizer (ASAN),MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN)",,Monthly,"Creating a zero-size allocation with an allocator that requires nonzero size,Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Always,Sometimes,"cargo-update,cargo-audit,cargo-deny,cargo-geiger",Neither likely nor unlikely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Always,"Stacked Borrows Violation,Tree Borrows Violation,Null pointer dereference,Data race,Memory leak,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,The Rust Community Discord,,Somewhat negatively,Unsure,Sometimes,Strongly agree,30-39,PhD,Man,,Industry,,The Rust Programming Language Community Discord,,No,Yes,Yes,Yes,
100,1385,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,10,5,5,Daily,Yes,Yes,Daily,"Game development,Data structures and language-level primitives",,Game development,,Yes,No,No,Somewhat easy,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,OnceCell,LazyCell,Mutex,Other",,"Manual memory allocation,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Most of the time,Sometimes,,,,Unsure,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell,Other",,"Manual memory allocation,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Other,,About half the time,Large-scale components purpose-built for performance.,,Use safe,,Somewhat easy,,Sometimes,Sometimes,Yes,Yes,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Sometimes,Most of the time,Always,"C,C++,Dart",,I generate bindings using a tool,Might or might not,Probably yes,No,,Other,,Never,Yes,Unsure,Most of the time,Unsure,bindgen,,14,,,Other,,"Miri,Valgrind",,Weekly,Other,,Most of the time,Never,,Neither likely nor unlikely,Lack of support for foreign function calls,,Sometimes,Use-after-free,,,The Rust Community Discord,,Extremely negatively,Somewhat negatively,Most of the time,Neither agree nor disagree,18-29,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,975,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,4,Yes,10,1,6,Monthly,Yes,No,Less than once a year,"Web applications - Backend,Data structures and language-level primitives,Static analysis",,"Web applications - Backend,Static analysis",,No,No,Yes,Neither easy nor difficult,,,"Calling foreign functions,mem::transmute",,No,,Always,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,mem::transmute",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Never,Most of the time,No,No,,,,,,,,"C,C++",,I generate bindings using a tool,Might or might not,Probably yes,No,,,,Never,Unsure,Yes,Unsure,Sometimes,"bindgen,CXX",,13,,,Flux,,Miri,,Never,,,Sometimes,Sometimes,cargo-update,Somewhat unlikely,,,Sometimes,,,,,,Somewhat negatively,Neither positively nor negatively,Sometimes,Somewhat disagree,30-39,Master's degree,Man,,"Academia,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1239,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,6,3,0,Weekly,Yes,No,Monthly,Other,Desktop applications,Other,"Desktop application, libraries",No,Yes,No,Somewhat easy,"Pin,Box,Other",OwnedFd,"Calling foreign functions,Calling unsafe functions written in Rust",,No,,Always,Most of the time,,,,,No,No,Other,FFI,,,,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Never,Always,No,Yes,,,,,,Always,Always,C,,I generate bindings using a tool,Might or might not,Probably yes,No,,,,Never,No,No,Most of the time,Unsure,bindgen,,13,,,,,Valgrind,,Yearly,"Use after free,Memory leak",,Always,Sometimes,cargo-update,Extremely likely,,,,,,,,,Somewhat negatively,Unsure,Always,Neither agree nor disagree,18-29,Some high school,Man,,Open-source contributor,,Reddit (/r/rust),,No,Yes,No,,
100,1651,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,15,0,0,Monthly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Game development,Data structures and language-level primitives",,"Networking & distributed systems,Game development,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"ManuallyDrop,Pin,Box,Arc,Cell,UnsafeCell",,"Calling foreign functions,Inline assembly,Cyclic aliasing patterns,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Yes,Always,Always,Sometimes,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Inline assembly",,About half the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Inline assembly,Cyclic aliasing patterns",,,,Most of the time,Small-scale optimizations,,Unsure,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Never,Most of the time,About half the time,C,,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,Box,,Never,No,Yes,Most of the time,About half the time,"bindgen,cbindgen,wasm-bindgen",,12,,Somewhat difficult,,,"Loom,Miri,Valgrind",,Yearly,"Out-of-bounds access,Violation of stacked or tree borrows,Other",move of object not allowed to be moved,About half the time,About half the time,"cargo-update,cargo-audit,cargo-deny",Somewhat likely,Lack of support for foreign function calls,,Always,"Stacked Borrows Violation,Tree Borrows Violation",,Extremely difficult,The Rust Programming Language Forums,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Some college,Woman,,"Industry,Open-source contributor",,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,1225,TRUE,anonymous,0.899999976,,0,25,,Yes,Yes,Yes,1,Yes,8,2,7,Monthly,No,Yes,Monthly,Data structures and language-level primitives,,Data structures and language-level primitives,,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,RefCell,LazyCell,Mutex",,"Manual memory allocation,Intrinsics,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Sometimes,Sometimes,"Atomics,Architecture-specific or SIMD intrinsics",,No,Sometimes,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Intrinsics,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Most of the time,MaybeUninit,,,,,,"Intrinsics,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,,,About half the time,Large-scale components purpose-built for performance.,,Use unsafe,Use unsafe,Neither easy nor difficult,,Never,Sometimes,No,Yes,,,,,,Sometimes,Most of the time,,,,,,,,,,,,,,,,,,,,,,Valgrind,,Weekly,"Using uninitialized memory,Out-of-bounds access,Integer overflow,Memory leak",,Never,Never,,Neither likely nor unlikely,,,,,,,"Reddit (/r/rust),The Rust Community Discord",,Extremely negatively,Extremely negatively,Unsure,Strongly agree,18-29,Prefer not to answer,Prefer not to disclose,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,5508,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,7,4,3,Monthly,Yes,No,Monthly,Image & Data processing,,,,Yes,Yes,No,Somewhat difficult,"Box,Other",Vec,"Manual memory allocation,mem::transmute,Calling unsafe functions written in Rust",,Yes,,Most of the time,Never,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"Manual memory allocation,mem::transmute,Calling unsafe functions written in Rust",,,,"Manual memory allocation,mem::transmute,Calling unsafe functions written in Rust",,,,Always,Small-scale optimizations,,Use unsafe,Use unsafe,Extremely easy,,Never,Sometimes,No,Yes,,,,,,Never,Most of the time,,,,,,,,,,,,,,,,,,,,,,Valgrind,,Never,Out-of-bounds access,,Always,Never,,Somewhat unlikely,,,,,,,Reddit (/r/rust),,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat disagree,18-29,Bachelor's degree,Man,,Academia,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1146,TRUE,anonymous,0.800000012,,0,75,,Yes,Yes,Yes,7,Yes,10,4,4,Monthly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Non-JIT Compilation,Game development,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Arc",,"Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer",,Yes,,Always,Always,"Volatiles,Atomics,Architecture-specific or SIMD intrinsics",,No,Unsure,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,Intrinsics,mem::transmute,Dereferencing a raw pointer",,About half the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer",,ManuallyDrop,,"Intrinsics,Dereferencing a raw pointer",,"MaybeUninit,UnsafeCell",,About half the time,Unsure,,Use unsafe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,About half the time,No,Yes,,,,,,Always,About half the time,C,,I generate bindings using a tool,Might or might not,Probably yes,Unsure,,Box,,Never,Yes,Yes,Most of the time,Sometimes,"bindgen,cbindgen",,15,,,,,"AddressSanitizer (ASAN),cargo fuzz,LeakSanitizer (LSAN),Loom,MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),Valgrind",,Never,"Using uninitialized memory,Use after free,Failure to meet an application's functional requirements.,Null pointer dereference,Violation of stacked or tree borrows,Memory leak",,Always,Sometimes,"cargo-audit,cargo-deny",Neither likely nor unlikely,"My unsafe code is in violation of Tree Borrows,Other",not functioning across ffi boundary,Sometimes,"Tree Borrows Violation,Data race,Using uninitialized memory",,Somewhat difficult,"GitHub,The Rust Community Discord",,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Some college,Man,,Open-source contributor,,Reddit (/r/rust),,No,Yes,No,,
100,2870,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,3,Yes,8,2,7,Yearly,Yes,Yes,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,Yes,No,No,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Always,Always,,,,Sometimes,No,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,In-place initialization or updates,,MaybeUninit,,Always,Large-scale components purpose-built for performance.,,Use safe,,Somewhat easy,forbid(unsafe_code),Sometimes,Most of the time,No,Yes,,,,,,Always,Most of the time,C++,,I generate bindings using a tool,Might or might not,Probably yes,No,,"Box,Arc",,Most of the time,Yes,Yes,Sometimes,Sometimes,"bindgen,wasm-bindgen,PyO3",,13,,Somewhat easy,,,"Miri,Valgrind",,Monthly,Using uninitialized memory,,Most of the time,Never,,Somewhat likely,,,Most of the time,Using uninitialized memory,,,"Reddit (/r/rust),The Rust Programming Language Forums",,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Bachelor's degree,Man,,Open-source contributor,,The Rust Programming Language Forums,,Yes,Yes,No,,Starbucks
100,688,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,9,4,1,Weekly,Yes,Yes,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems",,No,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop",,"Manual memory allocation,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Most of the time,Most of the time,,,,Most of the time,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,No,Yes,,,,,,Always,Always,C,,I write bindings manually and generate bindings using a tool,Might or might not,Might or might not,Yes,Written manually,,,Never,No,Yes,Always,Always,cbindgen,,,,,,,"AddressSanitizer (ASAN),MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Daily,"Using uninitialized memory,Out-of-bounds access,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Most of the time,Sometimes,,Somewhat likely,Lack of support for foreign function calls,,Most of the time,"Stacked Borrows Violation,Tree Borrows Violation,Data race,Use-after-free,Unaligned memory access",,Neither easy nor difficult,The Rust Community Discord,,Somewhat negatively,Unsure,Sometimes,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,716,TRUE,anonymous,0.800000012,,0,75,,Yes,Yes,Yes,2,Yes,10,1,3,Yearly,No,No,Yearly,"Web applications - Frontend,Web applications - Backend,Game development,Data structures and language-level primitives,Static analysis",,"Game development,Static analysis",,No,No,Yes,Neither easy nor difficult,"MaybeUninit,Box,Arc,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,Sometimes,Always,About half the time,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Most of the time,About half the time,About half the time,About half the time,Most of the time,"C,Python",,I generate bindings using a tool,Might or might not,Definitely yes,No,,"Box,Arc",,Sometimes,No,Yes,Most of the time,Most of the time,"CXX,PyO3",,,,,,,Miri,,Less than once a year,"Using uninitialized memory,Out-of-bounds access,Use after free,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Most of the time,Never,,Somewhat likely,Lack of support for foreign function calls,,Most of the time,"Null pointer dereference,Data race,Memory leak,Use-after-free,Out-of-bounds access,Using uninitialized memory",,,,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,1642,TRUE,anonymous,0.899999976,,0,25,,Yes,Yes,Yes,8,Yes,18,18,15,Daily,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,Most of the time,Sometimes,"Volatiles,Atomics,Architecture-specific or SIMD intrinsics",,Yes,Unsure,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.,Other","Certain low level things are not possible without unsafe, regardless of ease-of-use or performance.",mem::transmute,,Always,,,,,,,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat difficult,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Unsure,Always,Sometimes,Always,Sometimes,"Assembly,C,C++,JavaScript,Python",,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,No,,Box,,Never,Yes,Yes,Sometimes,Sometimes,"bindgen,wasm-bindgen,Emscripten,PyO3",,15,,Somewhat easy,,,"cargo fuzz,Miri,Valgrind",,Less than once a year,Other,I probably did but it happens so rarely that I don't remember any.,Most of the time,Sometimes,,Neither likely nor unlikely,Slow performance,,Sometimes,,,,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,917,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,5,Yes,9,1,2,Monthly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,UnsafeCell,,"Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Most of the time,Always,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,Most of the time,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Never,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,Valgrind,,Yearly,"Using uninitialized memory,Failure to meet an application's functional requirements.,Memory leak",,Sometimes,Never,,Extremely likely,,,,,,,,,Extremely negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Master's degree,Man,,"Academia,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,645,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,1.5,Yes,5,1,3,Daily,No,Yes,Daily,"Embedded systems,Networking & distributed systems,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Networking & distributed systems,Game development,Serialization & deserialization",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,Rc,UnsafeCell,Mutex",,"Implementing a custom allocator,Calling foreign functions,System calls,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,Always,Always,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Implementing a custom allocator,Calling foreign functions,System calls,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,Always,No,Yes,,,,,,Sometimes,Always,"C,C++",,I generate bindings using a tool,Might or might not,Might or might not,Unsure,,,,Never,No,Yes,Most of the time,Sometimes,"bindgen,PyO3",,13,,,,,"AddressSanitizer (ASAN),Miri,Valgrind",,Monthly,"Incorrectly declared bindings to intrinsics or foreign functions.,Memory leak",,Sometimes,Never,"cargo-audit,cargo-deny",Somewhat likely,Lack of support for foreign function calls,,Never,,,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub",,Somewhat negatively,Somewhat positively,Sometimes,Neither agree nor disagree,18-29,Master's degree,Man,,Industry,,Reddit (/r/rust),,No,Yes,No,,
100,1123,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,30,30,30,Monthly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Serialization & deserialization",,No,Yes,Yes,Extremely difficult,,,"Mutable static variables,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Never,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Mutable static variables,mem::transmute",,Most of the time,,,,,,,,,,,,,,Use unsafe,Use unsafe,Extremely easy,,Sometimes,About half the time,No,Yes,,,,,,About half the time,Sometimes,,,,,,,,,,,,,,,,,,,,,,,,Yearly,"Using uninitialized memory,Out-of-bounds access,Use after free,Unaligned memory access",,About half the time,Sometimes,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,40-49,Prefer not to answer,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,947,TRUE,anonymous,0.400000006,,0,0,,Yes,Yes,Yes,3,Yes,10,6,1,Monthly,Yes,No,Monthly,"Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,Always,Sometimes,,,,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Calling unsafe functions written in Rust",,About half the time,,,,,,,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,"MaybeUninit,ManuallyDrop",,About half the time,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,To provide a more performant equivalent of a safe API,,Always,Always,Never,Always,Always,"C,Python",,I generate bindings using a tool,Might or might not,Probably yes,No,,Box,,Never,Yes,Yes,Sometimes,Sometimes,"bindgen,cbindgen,PyO3",,13,,,,,Valgrind,,Weekly,"Out-of-bounds access,Use after free,Double free,Null pointer dereference,Memory leak",,Sometimes,Never,,Somewhat likely,,,,,,,,,Somewhat negatively,Somewhat positively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,2535,TRUE,anonymous,1,,,,,Yes,Yes,Yes,3.5,Yes,6,2,1.5,Weekly,Yes,Yes,Weekly,"Operating systems,Web applications - Frontend,Web applications - Backend,Game development,Data structures and language-level primitives,Serialization & deserialization,Other",Linux Desktop Applications,"Operating systems,Web applications - Frontend,Web applications - Backend,Game development,Data structures and language-level primitives,Serialization & deserialization,Other",Linux Desktop Applications,Yes,No,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,Mutex,Other",GlobalAlloc,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait,Other",Zero-copy deserialisation,No,,Most of the time,Sometimes,"Atomics,Architecture-specific or SIMD intrinsics,Other",unreachable unchecked,No,Never,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Most of the time,"MaybeUninit,ManuallyDrop",,"Calling foreign functions,mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates",,MaybeUninit,,"Accessing the fields of a union type,System calls,Intrinsics,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop",,Never,Unsure,,Use unsafe,Use unsafe,Neither easy nor difficult,,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Most of the time,Most of the time,"Assembly,C,Other",Rust (Using C ABI),I write bindings manually and generate bindings using a tool,Probably yes,Might or might not,No,,Box,,Never,Yes,Yes,Sometimes,Never,"bindgen,cbindgen,wasm-bindgen",,14,,Neither easy nor difficult,,,"Miri,Valgrind",,Yearly,"Using uninitialized memory,Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Memory leak",,About half the time,Sometimes,,Somewhat likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Sometimes,"Out-of-bounds access,Using uninitialized memory",,,The Rust Community Discord,,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,1982,TRUE,anonymous,0.899999976,,,,,Yes,Yes,Yes,9,Yes,15,7,14,Weekly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Manufacturing,Data structures and language-level primitives",,"Web applications - Frontend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Manufacturing,Data structures and language-level primitives",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,RefCell,Cell,UnsafeCell,Other","GlobalAlloc, Vec","Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait,Other","core::mem::drop_in_place, accessing repr(packed) fields",Yes,Most of the time,Always,About half the time,"Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,Sometimes,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,,,,,"System calls,Intrinsics,Global assembly,mem::transmute,Pointer arithmetic,In-place initialization or updates,Implementing an unsafe trait",,"MaybeUninit,ManuallyDrop",,Always,Unsure,,Use safe,Use safe,Neither easy nor difficult,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,About half the time,Sometimes,Most of the time,"Assembly,C,C++,JavaScript,Python",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Yes,Generated by a tool,"Box,Arc",,Sometimes,Yes,Unsure,Sometimes,Sometimes,"bindgen,cbindgen,wasm-bindgen,CXX,PyO3",,13,,Somewhat difficult,Kani,,"cargo fuzz,libFuzzer,Miri,Valgrind",,Less than once a year,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Always,Sometimes,cargo-deny,Neither likely nor unlikely,"Lack of support for foreign function calls,Lack of support for inline assembly,Other","My code requires dynamic alignment checks, My code encapsulates highly platform dependent  behavior and cross-emulation is prohibitvely costly",Sometimes,"Stacked Borrows Violation,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory,Other",compiler bug,Somewhat difficult,"The Rust Programming Language Forums,GitHub,The Rust Community Discord",,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Master's degree,Prefer not to disclose,,"Industry,Open-source contributor",,The Rust Programming Language Forums,,No,Yes,Yes,No,
100,693,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,11,5,5,Weekly,Yes,Yes,Weekly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Image & Data processing,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Pin,Box,RefCell,UnsafeCell,OnceCell",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,Most of the time,,,,Most of the time,No,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Self-referential structs,In-place initialization or updates",,,,Sometimes,Both,,Use unsafe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Sometimes,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Always,Sometimes,"C,C++",,I generate bindings using a tool,Might or might not,Definitely yes,No,,Box,,Never,No,No,Always,Sometimes,bindgen,,14,,,,,"Miri,Valgrind",,Monthly,"Violation of stacked or tree borrows,Unaligned memory access",,Never,Never,,Extremely unlikely,"Slow performance,Lack of support for foreign function calls",,Sometimes,Stacked Borrows Violation,,Somewhat difficult,"Reddit (/r/rust),The Rust Community Discord",,Neither positively nor negatively,Neither positively nor negatively,Always,Strongly agree,18-29,Some high school,Non-binary,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,110,TRUE,anonymous,1,,0,0,,No,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1336,TRUE,anonymous,,,0,0,,Yes,Yes,Yes,5,Yes,7,6,4,Yearly,Yes,Yes,Yearly,"Embedded systems,Web applications - Backend,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Other",Scientific computing applications (numerical simulations),"Embedded systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Other",Scientific computing / simulations,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,Pin,Box",,"Self-referential structs,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,,Most of the time,Never,,,,,No,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Self-referential structs,mem::transmute,In-place initialization or updates",,MaybeUninit,,Most of the time,Both,,Use safe,Unsure,Neither easy nor difficult,,Sometimes,Always,Yes,Yes,To provide a more performant equivalent of a safe API,,Always,Always,Sometimes,About half the time,Never,,,,,,,,,,,,,,,,,,,,"Kani,Flux",,Miri,,Less than once a year,"Creating a zero-size allocation with an allocator that requires nonzero size,Out-of-bounds access,Use after free,Double free,Failure to meet an application's functional requirements.,Integer overflow",,About half the time,Never,,Extremely unlikely,Slow performance,,Sometimes,"Memory leak,Use-after-free,Out-of-bounds access",,,Reddit (/r/rust),,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Academia,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,925,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,5,Yes,8,6,6,Yearly,Yes,No,Yearly,"Operating systems,Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Backend,Database systems,Interpreters & runtime systems,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,Most of the time,Other,,No,Sometimes,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,Sometimes,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,Use unsafe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Sometimes,"C,C++",,I generate bindings using a tool,Probably not,Definitely yes,No,,,,Never,No,Yes,Most of the time,Sometimes,"bindgen,cbindgen,CXX",,13,,,,,Miri,,Weekly,Double free,,Most of the time,Never,"cargo-audit,cargo-geiger",Somewhat unlikely,,,Most of the time,"Null pointer dereference,Using uninitialized memory",,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub",,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat disagree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor,Rust project member",,Reddit (/r/rust),,No,No,No,,
100,731,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,9,5,3,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Box,RefCell,Cell,UnsafeCell,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Intrinsics,Cyclic aliasing patterns,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,About half the time,Architecture-specific or SIMD intrinsics,,No,Never,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Intrinsics,Cyclic aliasing patterns,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,,,,,"Intrinsics,Cyclic aliasing patterns,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,UnsafeCell",,Always,Small-scale optimizations,,Use unsafe,Use unsafe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Sometimes,Always,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Always,Never,,Neither likely nor unlikely,Slow performance,,Most of the time,"Stacked Borrows Violation,Tree Borrows Violation,Null pointer dereference,Data race,Memory leak,Use-after-free,Out-of-bounds access,Using uninitialized memory",,Neither easy nor difficult,The Rust Programming Language Forums,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Academia,Open-source contributor",,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,653,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,7,4,4,Weekly,No,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Non-JIT Compilation,Interpreters & runtime systems,Game development",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Non-JIT Compilation,Interpreters & runtime systems,Game development",,Yes,No,Yes,Somewhat difficult,"Box,UnsafeCell",,"Implementing a custom allocator,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,Most of the time,About half the time,Sometimes,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Always,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,,Never,Always,No,Yes,,,,,,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,,,Yearly,,,Sometimes,Never,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Somewhat positively,Most of the time,Neither agree nor disagree,18-29,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,No,Yes,No,,
100,765,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,12,12,12,Weekly,Yes,Yes,Monthly,"Operating systems,Serialization & deserialization,Other","Audio, Virtualization ","Operating systems,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,Other",Raw pointers,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,About half the time,Never,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Always,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"mem::transmute,Pointer arithmetic",,,,About half the time,Both,,Use unsafe,Use unsafe,Neither easy nor difficult,,Never,About half the time,Yes,Yes,Other,"Some APIs are fundamentally unsafe, eg FFI. ",Always,Always,Never,Always,Unsure,"C,C++,TypeScript",,I write bindings manually and generate bindings using a tool,Definitely yes,Definitely yes,Yes,Both,,,Never,No,Yes,Sometimes,Never,"bindgen,cbindgen,wasm-bindgen",,Locally,,Extremely difficult,,,"cargo fuzz,Miri",,Daily,"Using uninitialized memory,Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Null pointer dereference,Unaligned memory access",,About half the time,Never,,Neither likely nor unlikely,Slow performance,,Never,"Stacked Borrows Violation,Data race,Use-after-free,Using uninitialized memory",,Extremely difficult,,,Unsure,Unsure,Sometimes,Strongly disagree,30-39,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,560,TRUE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,5,Yes,9,11,11,Weekly,No,Yes,Weekly,"Game development,Data structures and language-level primitives",,Game development,,No,No,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Cell,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,Yes,Most of the time,Always,Most of the time,,,,About half the time,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Sometimes,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Most of the time,Always,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Unsure,Always,Never,Always,Always,"C,C++,Swift",,I write bindings manually,Probably yes,Probably yes,Unsure,,,,Never,Yes,Yes,Sometimes,Most of the time,,,,,,,,cargo fuzz,,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Null pointer dereference,Unaligned memory access,Memory leak",,Most of the time,About half the time,cargo-geiger,Somewhat likely,,,,,,,"Reddit (/r/rust),The Rust Programming Language Forums",,Neither positively nor negatively,Unsure,Most of the time,Somewhat agree,30-39,Master's degree,Man,,Other,Private personal project developer,Reddit (/r/rust),,No,Yes,No,,
100,3601,TRUE,anonymous,0.899999976,,,,,Yes,Yes,Yes,3,Yes,20,17,17,Daily,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Box,Rc,RefCell,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,Always,Most of the time,Sometimes,"Volatiles,Atomics,Architecture-specific or SIMD intrinsics",,Yes,Unsure,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,MaybeUninit,,,,,,"Implementing a custom allocator,Accessing the fields of a union type,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,,,About half the time,Both,,Unsure,Unsure,Extremely easy,"allow(improper_ctypes),allow(improper_ctypes_definitions),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Never,About half the time,About half the time,"Assembly,C,C++",,I write bindings manually,Definitely yes,Might or might not,Yes,Generated by a tool,"Box,Other","All three of them if it's not about consuming, just temp. borrowing",Never,Yes,Yes,Unsure,Unsure,,,,,,,,"AddressSanitizer (ASAN),Miri,Valgrind",,Yearly,"Using uninitialized memory,Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI",,Most of the time,Sometimes,,Somewhat likely,"Lack of support for foreign function calls,Other",Actually it's used whenever its possible,Always,"Stacked Borrows Violation,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,Other,"There was no need to ask myself, with enough reading all easy and complicated questions were answerable with existing resources",Neither positively nor negatively,Unsure,Unsure,Neither agree nor disagree,Prefer not to answer,Master's degree,Man,,"Industry,Open-source contributor",,Other,,No,No,No,,
100,1394,TRUE,anonymous,1,,0,45,,Yes,Yes,Yes,2,Yes,17,4,2,Monthly,Yes,No,Monthly,"Image & Data processing,Data structures and language-level primitives,Other",File manager,"Image & Data processing,Data structures and language-level primitives,Other",File manager,Yes,No,Yes,Somewhat easy,"ManuallyDrop,Box,UnsafeCell",,"Manual memory allocation,Calling foreign functions,Cyclic aliasing patterns,Self-referential structs,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,Most of the time,Most of the time,Most of the time,,,,,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.,Other","I have marked functions as unsafe for reasons that don't traditionally require unsafe, if they can cause undesired behaviour","Manual memory allocation,Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,,,"Cyclic aliasing patterns,Self-referential structs",,"ManuallyDrop,UnsafeCell",,"Cyclic aliasing patterns,Self-referential structs",,"ManuallyDrop,UnsafeCell",,Always,Both,,Unsure,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Sometimes,Always,Most of the time,"C,C++",,I generate bindings using a tool,Might or might not,Probably yes,Yes,Generated by a tool,Box,,Never,No,Yes,Always,Most of the time,Other,gir,,,,,,"Miri,ThreadSanitizer (TSAN),Valgrind",,Less than once a year,"Using uninitialized memory,Incorrectly declared bindings to intrinsics or foreign functions.,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Sometimes,Sometimes,"cargo-update,cargo-audit",Somewhat likely,"Slow performance,Lack of support for foreign function calls",,Most of the time,Stacked Borrows Violation,,Extremely easy,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Other,IRC,Yes,Yes,No,,Amazon
100,2446,TRUE,anonymous,,,0,0,,Yes,Yes,Yes,6,Yes,10,0,3,Weekly,Yes,Yes,Monthly,"Embedded systems,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,UnsafeCell,Other",Allocator,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Most of the time,About half the time,,,,Sometimes,Yes,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Calling foreign functions,System calls,mem::transmute,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Sometimes,,,,,,,"Manual memory allocation,Accessing the fields of a union type,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Large-scale components purpose-built for performance.,,Use unsafe,Use unsafe,Neither easy nor difficult,"deny(unsafe_code),allow(improper_ctypes),allow(improper_ctypes_definitions),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,About half the time,About half the time,About half the time,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Yes,Both,"Box,Arc",,Sometimes,No,Yes,About half the time,About half the time,"bindgen,wasm-bindgen,CXX,Diplomat",,Locally,,Neither easy nor difficult,,,Miri,,Yearly,"Creating a zero-size allocation with an allocator that requires nonzero size,Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Most of the time,Sometimes,,Somewhat likely,,,About half the time,"Stacked Borrows Violation,Memory leak,Using uninitialized memory",,Neither easy nor difficult,The Rust Programming Language Forums,,Neither positively nor negatively,Somewhat positively,Most of the time,Somewhat agree,18-29,Master's degree,"Man,Non-binary",,"Open-source contributor,Rust project member",,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,701,TRUE,anonymous,0.800000012,,0,5,,Yes,Yes,Yes,1,Yes,3,0,0,Monthly,No,Yes,Monthly,"Web applications - Backend,Interpreters & runtime systems,Data structures and language-level primitives,Other",,"Web applications - Backend,Interpreters & runtime systems",,Yes,No,Yes,Somewhat difficult,"Pin,Box,Arc,Mutex",,"Manual memory allocation,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Implementing an unsafe trait",,No,,,,,,,,No,No,"I am not aware of a safe alternative at any level of ease-of-use or performance.,Other",,mem::transmute,,About half the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,unsafe_block_in_unsafe_fn,Sometimes,About half the time,No,Yes,,,,,,Sometimes,Always,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),HWAddressSanitizer (HWASAN),LeakSanitizer (LSAN),MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN)",,Daily,"Double free,Integer overflow,Other",,Most of the time,Never,cargo-audit,Somewhat likely,Other,,Sometimes,"Memory leak,Use-after-free,Unaligned memory access",,,The Rust Programming Language Forums,,Somewhat positively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,High school diploma/GED,Man,,Open-source contributor,,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,726,TRUE,anonymous,0.899999976,,0,30,,Yes,Yes,Yes,3,Yes,3,0,1,Monthly,No,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems,Serialization & deserialization",,"Networking & distributed systems,Interpreters & runtime systems",,Yes,No,Yes,Somewhat easy,"Arc,Other",AtomicU64,"Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Sometimes,Never,,,,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Dereferencing a raw pointer,Calling unsafe functions written in Rust",,,,Always,Both,,Use safe,Use safe,Extremely difficult,,About half the time,Always,No,Yes,,,,,,Sometimes,Most of the time,,,,,,,,,,,,,,,,,,,,,,Valgrind,,Never,"Using uninitialized memory,Memory leak",,Never,Never,,Somewhat likely,,,,,,,The Rust Community Discord,,Neither positively nor negatively,Neither positively nor negatively,Sometimes,Strongly agree,18-29,Bachelor's degree,Man,,"Industry,Academia,Open-source contributor,Rust project member",,Other,[organization] slack,Yes,Yes,No,,Amazon
100,43,TRUE,anonymous,0.899999976,,0,25,,Yes,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,3155,TRUE,anonymous,0.899999976,,,,,Yes,Yes,Yes,1,Yes,15,5,5,Weekly,Yes,Yes,Weekly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,,Most of the time,Most of the time,Atomics,,No,Unsure,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Never,Always,Yes,Yes,"To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Unsure,Most of the time,Sometimes,Most of the time,Unsure,C,,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,,,Sometimes,Yes,Unsure,Most of the time,Most of the time,"bindgen,cbindgen",,In CI,,,,,Miri,,Weekly,"Creating a zero-size allocation with an allocator that requires nonzero size,Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Unaligned memory access,Memory leak",,Sometimes,Sometimes,cargo-update,Somewhat likely,,,Sometimes,"Null pointer dereference,Using uninitialized memory",,,The Rust Community Discord,,Neither positively nor negatively,Unsure,Unsure,Somewhat agree,18-29,Some college,Man,,Open-source contributor,,The Rust Programming Language Community Discord,,Yes,No,No,,Amazon
100,1022,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,42,20,20,Yearly,No,No,Yearly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Manufacturing,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Networking & distributed systems",,No,Yes,Yes,Somewhat difficult,Pin,,"Accessing the fields of a union type,Calling foreign functions,System calls,Self-referential structs,Dereferencing a raw pointer,Pointer arithmetic",,Yes,,Always,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,Self-referential structs,Dereferencing a raw pointer",,Always,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,unsafe_block_in_unsafe_fn,Never,Most of the time,No,Yes,,,,,,Most of the time,Always,"C,C++,Python",,I write bindings manually,Might or might not,Probably yes,Yes,Unsure,,,Never,No,Yes,Always,Sometimes,,,,,,,,Miri,,Yearly,External runtime or hardware interface does not behave according to its written specification.,,Most of the time,Sometimes,"cargo-update,cargo-audit",Somewhat likely,,,Most of the time,,,,,,Neither positively nor negatively,Unsure,Most of the time,Strongly agree,50-59,Bachelor's degree,Man,,Industry,,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,1164,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,5,3,3,Monthly,Yes,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Extremely easy,MaybeUninit,,"Manual memory allocation,Mutable static variables,Dereferencing a raw pointer,In-place initialization or updates",,Yes,,,,,,,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Manual memory allocation,Dereferencing a raw pointer,In-place initialization or updates",,MaybeUninit,,Most of the time,Small-scale optimizations,,Use safe,Use safe,Somewhat difficult,,Never,Most of the time,No,Yes,,,,,,Never,Always,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),ThreadSanitizer (TSAN)",,Weekly,,,Never,Sometimes,"cargo-update,cargo-audit",Extremely likely,,,,,,,,,Extremely negatively,Neither positively nor negatively,Most of the time,Somewhat disagree,30-39,Bachelor's degree,Prefer not to disclose,,"Industry,Academia",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,417,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,5,0,0,Yearly,Yes,No,Yearly,"Data structures and language-level primitives,Other",Scientific programming / HPC,"Data structures and language-level primitives,Other",Scientific programming / hpc,Yes,No,No,Somewhat difficult,Box,,"Cyclic aliasing patterns,Self-referential structs",,No,,,,,,,,Yes,Yes,Other,Unsafe more ergonomic and intuitive but also to practice unsafe,,,,,,,,,,,,,,,,,Use safe,,Neither easy nor difficult,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Most of the time,No,Yes,,,,,,Always,Most of the time,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Never,"Using uninitialized memory,Memory leak",,Always,Never,,Somewhat unlikely,,,Always,Memory leak,,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub,The Rust Community Discord",,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,Academia,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1050,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,20,18,18,Yearly,Yes,No,Less than once a year,"Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat easy,MaybeUninit,,"Calling foreign functions,Intrinsics,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,,Most of the time,Sometimes,Architecture-specific or SIMD intrinsics,,Yes,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Intrinsics,In-place initialization or updates",,MaybeUninit,,Most of the time,Both,,Use safe,Use safe,Neither easy nor difficult,,Sometimes,About half the time,No,Yes,,,,,,Always,Sometimes,"C,Java",,I write bindings manually,Probably yes,Probably yes,No,,,,Never,No,No,Unsure,Unsure,,,,,,,,"AddressSanitizer (ASAN),cargo fuzz,Miri,Valgrind",,Weekly,"External runtime or hardware interface does not behave according to its written specification.,Null pointer dereference,Unaligned memory access",,Most of the time,Sometimes,cargo-geiger,Somewhat unlikely,,,Sometimes,Unaligned memory access,,,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,2122,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,27,20,0,Monthly,Yes,Yes,Monthly,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives",,Yes,Yes,Yes,Neither easy nor difficult,MaybeUninit,,"Manual memory allocation,Calling foreign functions,System calls,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Sometimes,"Architecture-specific or SIMD intrinsics,Other","transmute, copy_nonoverlapping",Yes,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Always,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,Use safe,Use safe,Extremely easy,deny(unsafe_code),Never,Always,No,Yes,,,,,,Never,Most of the time,C,,I write bindings manually,Might or might not,Might or might not,No,,,,Never,No,No,Never,Never,,,,,,,,"AddressSanitizer (ASAN),Valgrind,Other",Hand-written fuzz script,Yearly,"Out-of-bounds access,Use after free,Null pointer dereference",,Most of the time,Sometimes,"cargo-update,cargo-audit",Somewhat likely,,,,,,,,,Somewhat negatively,Somewhat positively,Most of the time,Neither agree nor disagree,40-49,Some college,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1214,TRUE,anonymous,0.899999976,,0,90,,Yes,Yes,Yes,2,Yes,3,1,1,Daily,Yes,Yes,Weekly,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Game development,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop",,"Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,Always,,,,Never,,,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,"Mutable static variables,mem::transmute,Implementing an unsafe trait,Declaring an unsafe trait",,MaybeUninit,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,Always,No,Yes,,,,,,Sometimes,Sometimes,"C,C++,JavaScript,Other",objective C,I generate bindings using a tool,Might or might not,Might or might not,Yes,Generated by a tool,,,Never,Unsure,Yes,Unsure,Never,"bindgen,wasm-bindgen,CXX,PyO3",,Locally,,Neither easy nor difficult,,,"AddressSanitizer (ASAN),HWAddressSanitizer (HWASAN),KernelControlFlowIntegrity,LeakSanitizer (LSAN),MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"Using uninitialized memory,Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,Memory leak",,Sometimes,Never,,Somewhat unlikely,Lack of support for foreign function calls,,Never,"Memory leak,Use-after-free,Using uninitialized memory",,,,,Extremely positively,Somewhat negatively,About half the time,Somewhat agree,18-29,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,660,TRUE,anonymous,0.400000006,,0,0,,Yes,Yes,Yes,4,Yes,9,7,7,Daily,Yes,Yes,Weekly,"Embedded systems,Non-JIT Compilation,Serialization & deserialization,Static analysis",,"Embedded systems,Non-JIT Compilation,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin",,"Implementing a custom allocator,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Always,Sometimes,,,,Never,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,About half the time,"MaybeUninit,ManuallyDrop",,,,,,"Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Most of the time,Both,,Unsure,Unsure,Somewhat easy,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Sometimes,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Sometimes,About half the time,"C,C++,Python",,I do not write or generate bindings,Might or might not,Probably yes,No,,,,Sometimes,No,Unsure,Always,Never,,,,,,,,"Miri,Valgrind",,Weekly,"Using uninitialized memory,External runtime or hardware interface does not behave according to its written specification.,Other",`std::mem::transmute` on types whose layouts aren't compatible,Always,Sometimes,,Neither likely nor unlikely,Lack of support for foreign function calls,,Sometimes,,,,"Reddit (/r/rust),The Rust Programming Language Forums",,Somewhat positively,Unsure,Most of the time,Strongly agree,18-29,Bachelor's degree,Man,,Industry,,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,34,TRUE,anonymous,,,,,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,2695,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,20,12,11,Monthly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,UnsafeCell,Other",Atomic*,"Calling foreign functions,System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,Sometimes,,,,Never,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.,Other","C FFI, especially syscalls - impossible without unsafe","Calling foreign functions,System calls,Inline assembly,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,MaybeUninit,,,,,,"Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Unsure,,Use safe,Use unsafe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,To provide a more performant equivalent of a safe API,,Always,Always,Never,Never,Most of the time,"C,C++,JavaScript",,I write bindings manually and generate bindings using a tool,Might or might not,Definitely yes,Yes,Written manually,Box,,Never,Unsure,Yes,Sometimes,Sometimes,"bindgen,wasm-bindgen",,Other,In the build script ,Extremely easy,Kani,,"AddressSanitizer (ASAN),cargo fuzz,Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN)",,Never,"Using uninitialized memory,Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI",,Most of the time,Sometimes,cargo-audit,Neither likely nor unlikely,Lack of support for foreign function calls,,Most of the time,Other,I don't remember but pretty sure I found something.,,"The Rust Programming Language Forums,GitHub",,Extremely positively,Somewhat positively,Most of the time,Strongly agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,925,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,7,Yes,21,3,1,Yearly,Yes,No,Less than once a year,"Data structures and language-level primitives,Other",Operations research solvers ,"Data structures and language-level primitives,Other",Operations research solver ,Yes,Yes,Yes,Somewhat difficult,Other,Raw pointers ,"Implementing a custom allocator,Accessing the fields of a union type,mem::transmute,Dereferencing a raw pointer,In-place initialization or updates",,Yes,,,,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,mem::transmute,,,,"mem::transmute,Dereferencing a raw pointer",,,,Most of the time,Large-scale components purpose-built for performance.,,Use safe,Use safe,Neither easy nor difficult,,Sometimes,Most of the time,No,Yes,,,,,,Sometimes,Most of the time,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Monthly,"Out-of-bounds access,Null pointer dereference,Integer overflow",,Always,Never,,Somewhat likely,My unsafe code is in violation of Tree Borrows,,Sometimes,Tree Borrows Violation,,Somewhat difficult,Reddit (/r/rust),,Somewhat negatively,Somewhat negatively,Unsure,Strongly disagree,30-39,PhD,Man,,"Industry,Academia,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,28,TRUE,anonymous,0.899999976,TRUE,100,75,9/22/23 18:22,Yes,Yes,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1419,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,8,6,4,Weekly,No,Yes,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,MaybeUninit,,"Self-referential structs,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Always,Always,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Self-referential structs,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,About half the time,MaybeUninit,,,,,,"Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,MaybeUninit,,Always,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat easy,deny(unsafe_code),Sometimes,Most of the time,No,Yes,,,,,,Always,Most of the time,,,,,,,,,,,,,,,,,,,,,,Miri,,Monthly,"Using uninitialized memory,Null pointer dereference",,About half the time,Sometimes,cargo-deny,Extremely likely,,,Sometimes,"Null pointer dereference,Out-of-bounds access",,,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Neither agree nor disagree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,60,TRUE,anonymous,1,,0,0,,Yes,No,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,4317,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,8,Yes,25,10,3,Yearly,Yes,No,Less than once a year,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Web browsers,Non-JIT Compilation,Game development,Data structures and language-level primitives,Other","Reverse engineering, drivers, protocol stacks, release automation and tooling","Operating systems,Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Other","Reverse engineering, drivers, protocol stacks",Yes,Yes,Yes,Somewhat easy,"UnsafeCell,Other","Do traits count? Send and Sync! PhantomData, etc.","Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Other",Some of the things listed above I have used but since decided against; transmute and mutable statics. Now I use normal casting and static SyncUnsafeCell.,No,Always,Always,Always,"Volatiles,Atomics,Architecture-specific or SIMD intrinsics",,No,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Other",Same caveat WRT transmute and mutable static.,Most of the time,"UnsafeCell,Other",And unsafe traits.,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Always,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,Always,Most of the time,"Assembly,C",,I generate bindings using a tool,Might or might not,Probably yes,Yes,Written manually,,,Never,No,Yes,Always,Sometimes,"bindgen,wasm-bindgen,CXX",,Other,Build script,Somewhat easy,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),Loom,MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Less than once a year,"Using uninitialized memory,Use after free,Double free,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,Violation of stacked or tree borrows,Unaligned memory access",,Always,About half the time,"cargo-update,cargo-audit,cargo-geiger",Extremely likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Most of the time,"Stacked Borrows Violation,Data race,Use-after-free,Unaligned memory access,Other","Invariant violations; invalid UTF-8 in str, invalid casts, object safety violation, &mut aliasing, improper use of FFI calls",Somewhat easy,The Rust Programming Language Forums,,Somewhat negatively,Unsure,Most of the time,Strongly disagree,40-49,Some college,Man,,"Industry,Open-source contributor",,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,1968,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,10,4,1,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Most of the time,Most of the time,"Volatiles,Architecture-specific or SIMD intrinsics",,No,Sometimes,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,System calls,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Small-scale optimizations,,Unsure,Unsure,Somewhat easy,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Most of the time,About half the time,Sometimes,"C,C++,JavaScript,Python,Other",Elixir,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Yes,Written manually,,,Most of the time,No,No,Most of the time,Most of the time,"cbindgen,wasm-bindgen,CXX,PyO3",,,,Neither easy nor difficult,,,"AddressSanitizer (ASAN),cargo fuzz,Miri,Valgrind",,Weekly,"Using uninitialized memory,Out-of-bounds access,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Memory leak",,Always,Sometimes,,Somewhat likely,,,Always,"Stacked Borrows Violation,Null pointer dereference,Data race,Memory leak,Out-of-bounds access,Using uninitialized memory",,Somewhat difficult,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Master's degree,Man,,"Academia,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1085,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,7,Yes,31,22,5,Less than once a year,No,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,"Web applications - Backend,Networking & distributed systems,Game development",,Yes,No,Yes,Somewhat difficult,"Box,RefCell,Cell,UnsafeCell",,"Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Most of the time,Always,Most of the time,,,,,No,No,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Cyclic aliasing patterns,Self-referential structs,mem::transmute,Pointer arithmetic",,About half the time,UnsafeCell,,"Cyclic aliasing patterns,Self-referential structs,Calling unsafe functions written in Rust",,,,,,,,,,,Use safe,Use safe,Somewhat difficult,,Sometimes,Always,No,Yes,,,,,,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,cargo fuzz,,Less than once a year,"Out-of-bounds access,Null pointer dereference,Integer overflow",,About half the time,Never,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,30-39,Some college,Man,,Other,hobbyist,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1131,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,25,18,1,Monthly,No,No,Monthly,"Operating systems,Embedded systems,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Interpreters & runtime systems,Data structures and language-level primitives",,No,No,Yes,Extremely easy,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Self-referential structs,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,Always,Always,Always,,,,Never,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Self-referential structs,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Sometimes,ManuallyDrop,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,No,Yes,,,,,,Always,Most of the time,C,,I generate bindings using a tool,Probably yes,Might or might not,Unsure,,,,Never,No,Yes,Always,Sometimes,bindgen,,Locally,,,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,Loom,Miri",,Weekly,"Creating a zero-size allocation with an allocator that requires nonzero size,Using uninitialized memory,Double free,External runtime or hardware interface does not behave according to its written specification.,Unaligned memory access,Memory leak",,Always,Sometimes,cargo-audit,Extremely likely,,,Never,,,,The Rust Community Discord,,Somewhat negatively,Neither positively nor negatively,Sometimes,Somewhat disagree,40-49,Some college,Man,,Industry,,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,1207,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,12,5,2,Daily,Yes,Yes,Weekly,"Operating systems,Embedded systems,Interpreters & runtime systems,Data structures and language-level primitives",,"Operating systems,Embedded systems,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,LazyCell",,"Manual memory allocation,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Most of the time,Most of the time,"Const intrinsics,Other",Cryptographic intrinsics,No,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"System calls,Intrinsics,Inline assembly,Global assembly",,Most of the time,MaybeUninit,,,,,,mem::transmute,,MaybeUninit,,Sometimes,Small-scale optimizations,,Unsure,Use safe,Somewhat easy,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,Sometimes,Sometimes,"Assembly,C",,I write bindings manually and generate bindings using a tool,Might or might not,Might or might not,Yes,Unsure,,,Never,No,Yes,Sometimes,Sometimes,"cbindgen,wasm-bindgen",,,,Somewhat difficult,Kani,,"cargo fuzz,libFuzzer,Miri,Valgrind",,Yearly,Other,Invalid instructions,Most of the time,Sometimes,"cargo-audit,cargo-deny",Somewhat likely,Lack of support for inline assembly,,Sometimes,,,,GitHub,,Neither positively nor negatively,Unsure,Sometimes,Somewhat agree,18-29,Master's degree,Man,,"Academia,Open-source contributor",,Reddit (/r/rust),,No,Yes,Yes,Yes,
100,19,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1122,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,7,Yes,25,18,15,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Web browsers,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,Box,Arc",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,Sometimes,,,,,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Never,Most of the time,Most of the time,"Assembly,C,C++,Java,Other",Objective C,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Yes,Written manually,"Box,Arc",,Never,Unsure,Unsure,Sometimes,Most of the time,"bindgen,CXX",,Other,In the build system,,,,Miri,,Monthly,"Out-of-bounds access,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference",,Most of the time,Sometimes,,Somewhat likely,"Lack of support for foreign function calls,Lack of support for inline assembly,Other",I'm not sure how to,Never,Stacked Borrows Violation,,Neither easy nor difficult,Other,Internal Rust mailing lists and chat rooms,Neither positively nor negatively,Unsure,About half the time,Somewhat agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,2095,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,8,Yes,32,25,15,Yearly,Yes,No,Yearly,"Image & Data processing,Data structures and language-level primitives,Other",Non-realtime 3d graphics and rendering,"Image & Data processing,Data structures and language-level primitives,Other",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Implementing a custom allocator,Calling foreign functions,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Always,Always,About half the time,Architecture-specific or SIMD intrinsics,,Yes,Unsure,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Most of the time,MaybeUninit,,,,,,"Implementing a custom allocator,Intrinsics,mem::transmute,Pointer arithmetic",,MaybeUninit,,Most of the time,Both,,Use safe,Use safe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,Other,"To provide flexibility for niche use cases, expecting most people won't use it.  Strong warnings given and invariants/requirements documented.",Always,Always,Sometimes,About half the time,About half the time,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,,,Never,Unsure,Unsure,Unsure,Unsure,bindgen,,Locally,,,,,"cargo fuzz,libFuzzer,Miri",,Less than once a year,"Using uninitialized memory,Out-of-bounds access,Memory leak",,Always,Never,,Neither likely nor unlikely,Slow performance,,Most of the time,Other,I don't remember off the top of my head but it has definitely caught things that I then fixed.,,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Neither agree nor disagree,30-39,Bachelor's degree,Man,,Open-source contributor,,Reddit (/r/rust),,No,Yes,No,,
100,787,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,7,Yes,14,10,8,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Backend,Non-JIT Compilation,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,Most of the time,"Volatiles,Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,No,Most of the time,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Most of the time,About half the time,Most of the time,"Assembly,C,C++,Haskell",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,No,,Box,,Most of the time,Yes,Yes,About half the time,Most of the time,bindgen,,Locally,,,,,"AddressSanitizer (ASAN),cargo fuzz,LeakSanitizer (LSAN),libFuzzer,Loom,Miri,UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,About half the time,About half the time,,Somewhat likely,"Slow performance,Lack of support for inline assembly,My unsafe code is in violation of Stacked Borrows",,Sometimes,"Stacked Borrows Violation,Memory leak,Out-of-bounds access,Using uninitialized memory",,Neither easy nor difficult,The Rust Community Discord,,Somewhat negatively,Neither positively nor negatively,Sometimes,Neither agree nor disagree,18-29,Bachelor's degree,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1205,TRUE,anonymous,1,,0,10,,Yes,Yes,Yes,2,Yes,11,0,0,Yearly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,Box,,"Calling foreign functions,System calls,mem::transmute,Calling unsafe functions written in Rust",,No,,Most of the time,Never,,,,,No,No,"I am not aware of a safe alternative at any level of ease-of-use or performance.,Other",It was either related to unsafe apis like window creation and once I used it to get around a lifetime qurik in a crate I used ,"Calling foreign functions,System calls,mem::transmute,Calling unsafe functions written in Rust",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Never,Most of the time,No,Yes,,,,,,Never,Unsure,"Java,Other",Objective C,I write bindings manually,Might or might not,Probably yes,No,,,,Never,Unsure,Unsure,Unsure,Unsure,,,,,,,,Miri,,Monthly,External runtime or hardware interface does not behave according to its written specification.,,Never,Never,,Neither likely nor unlikely,"Slow performance,Lack of support for foreign function calls",,Sometimes,,,,,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,887,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,6,Yes,8,1,3,Less than once a year,Yes,No,Less than once a year,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Calling foreign functions,System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,Most of the time,Always,Most of the time,,,,Unsure,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Most of the time,Always,No,Yes,,,,,,Sometimes,Most of the time,C,,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,No,,,,Most of the time,No,Yes,Most of the time,Most of the time,"bindgen,cbindgen,PyO3",,Locally,,,,,,,Weekly,"Using uninitialized memory,Out-of-bounds access",,Sometimes,Sometimes,cargo-audit,Extremely likely,,,,,,,,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Master's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,83,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,0,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,713,TRUE,anonymous,0.699999988,,0,0,,Yes,Yes,Yes,4,Yes,5,1,0,Weekly,Yes,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Game development,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Game development,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,UnsafeCell",,"Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,Most of the time,Most of the time,Sometimes,,,,Never,,,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,Mutable static variables,,,,,,,,,,,Unsure,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Miri,Valgrind",,Less than once a year,Memory leak,,About half the time,Sometimes,cargo-geiger,Somewhat likely,,,Sometimes,,,,The Rust Community Discord,,Somewhat negatively,Neither positively nor negatively,Most of the time,Neither agree nor disagree,18-29,Some college,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,828,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,8,8,5,Yearly,No,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Data structures and language-level primitives",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box,Other",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Intrinsics,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Always,Sometimes,Const intrinsics,,No,Sometimes,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Intrinsics,Self-referential structs",,Most of the time,ManuallyDrop,,,,,,"Manual memory allocation,Implementing a custom allocator,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,"MaybeUninit,ManuallyDrop",,Sometimes,Unsure,,Unsure,Use safe,Neither easy nor difficult,"deny(unsafe_code),unsafe_block_in_unsafe_fn",About half the time,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,"C,C++",,I write bindings manually,Probably yes,Probably yes,No,,Box,,About half the time,No,No,Always,Most of the time,,,,,,,,"AddressSanitizer (ASAN),Valgrind",,Less than once a year,"Using uninitialized memory,Use after free,Double free,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access",,Always,Never,,Somewhat unlikely,,,,,,,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Some college,Man,,Academia,,Reddit (/r/rust),,No,No,No,,
100,2191,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,17,15,15,Daily,Yes,Yes,Daily,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Other",Game Console Emulator,"Embedded systems,Non-JIT Compilation,Other",Game Console Emulator,Yes,Yes,Yes,Extremely difficult,"MaybeUninit,Pin,Box,Arc,UnsafeCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,Always,Always,Never,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Always,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Extremely easy,allow(improper_ctypes),Sometimes,Sometimes,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Most of the time,Never,Always,Always,"C,C++",,I write bindings manually and generate bindings using a tool,Definitely yes,Definitely yes,Yes,Unsure,"Box,Arc",,Never,Yes,Yes,Most of the time,About half the time,bindgen,,Other,Generate locally but don't check them,,,,,,Daily,Unwinding across foreign stack frames without using an -unwind ABI,,Sometimes,Never,,Neither likely nor unlikely,,,,,,,,,Extremely negatively,Unsure,Most of the time,Strongly agree,30-39,Some high school,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,54,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,0.3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1667,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,7,Yes,20,20,5,Weekly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Web browsers,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,Pin,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,Most of the time,About half the time,Architecture-specific or SIMD intrinsics,,Yes,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Sometimes,"MaybeUninit,UnsafeCell",,,,,,"Intrinsics,Inline assembly,mem::transmute",,,,Always,Small-scale optimizations,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,About half the time,Always,"C,C++",,I generate bindings using a tool,Might or might not,Probably yes,Yes,Unsure,,,Never,No,No,Always,Sometimes,"bindgen,cbindgen,wasm-bindgen,CXX,Emscripten,PyO3",,Other,build.rs,Neither easy nor difficult,,,"cargo fuzz,libFuzzer,Loom,Miri,Valgrind",,Less than once a year,"Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Most of the time,Sometimes,"cargo-update,cargo-audit,cargo-deny",Somewhat likely,"Slow performance,Lack of support for foreign function calls",,Sometimes,"Stacked Borrows Violation,Use-after-free,Out-of-bounds access,Using uninitialized memory",,Somewhat difficult,"Reddit (/r/rust),GitHub",,Somewhat negatively,Unsure,Most of the time,Strongly agree,30-39,Master's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,2661,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,10,7,5,Monthly,Yes,No,Monthly,"Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Web browsers,Non-JIT Compilation,Interpreters & runtime systems,Serialization & deserialization,Static analysis",,"Networking & distributed systems,Non-JIT Compilation,Serialization & deserialization",,No,No,No,Somewhat difficult,"MaybeUninit,ManuallyDrop,Rc,RefCell,Cell,UnsafeCell,OnceCell",,"Manual memory allocation,System calls,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,Always,About half the time,Sometimes,,,,Never,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Manual memory allocation,Self-referential structs,Dereferencing a raw pointer",,ManuallyDrop,,Sometimes,Large-scale components purpose-built for performance.,,Use safe,,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Sometimes,Always,No,Yes,,,,,,Most of the time,Sometimes,,,,,,,,,,,,,,,,,,,,,,Miri,,Monthly,Deallocating memory with an incorrect Layout,,Always,Never,,Neither likely nor unlikely,Other,lack of support of Linux APIs that are not implemented in Miri's VM,About half the time,Other,wrong memory layout on drop,,Reddit (/r/rust),,Neither positively nor negatively,Neither positively nor negatively,About half the time,Strongly agree,18-29,High school diploma/GED,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1153,TRUE,anonymous,1,TRUE,82,0,9/22/23 21:47,Yes,Yes,Yes,2,Yes,15,15,12,Daily,No,Yes,Weekly,"Operating systems,Embedded systems,JIT Compilation,Interpreters & runtime systems,Other",Mobile apps & sdk,"Operating systems,JIT Compilation,Other",Concurrent + multithreaded windows drivers,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,Mutex",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,Most of the time,Most of the time,About half the time,Atomics,,No,,Yes,No,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,"MaybeUninit,UnsafeCell",,,,,,,,,Use safe,Use safe,Somewhat easy,,About half the time,Most of the time,No,Yes,,,,,,Most of the time,Sometimes,"Assembly,C,C++",,I write bindings manually and generate bindings using a tool,Probably yes,Might or might not,Yes,Both,"Box,Arc",,Never,Yes,Yes,Most of the time,About half the time,"bindgen,cbindgen",,In CI,,,,,,,Weekly,"Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Unaligned memory access,Memory leak",,Sometimes,Sometimes,cargo-audit,Extremely likely,,,,,,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub",,Neither positively nor negatively,Somewhat negatively,Sometimes,Strongly agree,18-29,Some college,,,Industry,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,6011,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,2,Yes,10,8,8,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Backend,Database systems,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Backend,Database systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,Sometimes,,,,Most of the time,No,No,Other,C FFI,,,,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Always,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Most of the time,Always,Sometimes,Sometimes,About half the time,"C,C++",,I generate bindings using a tool,Might or might not,Definitely yes,Unsure,,Box,,Most of the time,Yes,Yes,Never,Never,"bindgen,cbindgen,wasm-bindgen,PyO3",,Locally,,Neither easy nor difficult,,,"AddressSanitizer (ASAN),MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN)",,Monthly,"Out-of-bounds access,Null pointer dereference,Memory leak",,Most of the time,Never,"cargo-update,cargo-audit",Somewhat likely,Lack of support for foreign function calls,,Most of the time,"Memory leak,Use-after-free,Other",Invalid enum values,,"The Rust Programming Language Forums,GitHub",,Somewhat negatively,Unsure,Most of the time,Somewhat disagree,18-29,Bachelor's degree,Man,,Open-source contributor,,The Rust Programming Language Forums,,No,No,No,,
100,665,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,6,Yes,16,2,0,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Manufacturing,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Most of the time,Sometimes,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,No,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,"Calling foreign functions,Mutable static variables,mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates",,MaybeUninit,,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,MaybeUninit,,Sometimes,Other,Embedded development,Use unsafe,Use safe,Neither easy nor difficult,,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Sometimes,Most of the time,Sometimes,Sometimes,Always,"Assembly,Go,JavaScript,Ruby,TypeScript",,I write bindings manually and generate bindings using a tool,Definitely yes,Probably yes,Yes,Generated by a tool,Box,,Sometimes,No,Yes,Most of the time,Always,"bindgen,wasm-bindgen",,Locally,,Neither easy nor difficult,,,,,Monthly,"Failure to meet an application's functional requirements.,External runtime or hardware interface does not behave according to its written specification.",,Sometimes,Most of the time,cargo-vet,Neither likely nor unlikely,,,,,,,,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat disagree,30-39,High school diploma/GED,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,844,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,8,Yes,14,2,1,Weekly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box,Arc,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Calling foreign functions,Mutable static variables,Calling unsafe functions written in Rust",,Yes,Most of the time,Always,Most of the time,,,,Unsure,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Mutable static variables,Calling unsafe functions written in Rust",,Unsure,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Unsure,Unsure,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Never,Most of the time,Yes,Yes,"Impossible to encapsulate without imposing safety requirements on the user,Other","To indicate that there are preconditions for calling the API that would, if unfulfilled, result in unexpected behaviour",Most of the time,Always,Sometimes,Sometimes,Always,C,,I generate bindings using a tool,Might or might not,Might or might not,Unsure,,Box,,Most of the time,Unsure,Unsure,Unsure,Unsure,"bindgen,cbindgen,wasm-bindgen,Other",safer-ffi,Locally,,Neither easy nor difficult,,,,,Never,Unwinding across foreign stack frames without using an -unwind ABI,,Sometimes,Sometimes,"cargo-audit,cargo-deny",Extremely likely,,,,,,,,,Neither positively nor negatively,Unsure,Most of the time,Neither agree nor disagree,18-29,Bachelor's degree,Woman,,Industry,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,785,TRUE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,2,Yes,6,2,0,Monthly,Yes,Yes,Monthly,"Database systems,Networking & distributed systems,Data structures and language-level primitives,Static analysis",,Data structures and language-level primitives,,No,No,Yes,Somewhat difficult,Other,Intel instrinsic types for SIMD,"Intrinsics,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Sometimes,Architecture-specific or SIMD intrinsics,,Yes,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,Intrinsics,,,,Always,Small-scale optimizations,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Never,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Miri,,Weekly,"Out-of-bounds access,Unaligned memory access",,Never,Never,,Somewhat unlikely,,,Sometimes,Unaligned memory access,,,,,Neither positively nor negatively,Neither positively nor negatively,Always,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1087,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,30,10,3,Monthly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Database systems,Networking & distributed systems,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,Pin,Box,Cell",,"Implementing a custom allocator,Calling foreign functions,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Yes,,Never,Sometimes,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Calling foreign functions,Self-referential structs,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Most of the time,MaybeUninit,,"Self-referential structs,Dereferencing a raw pointer",,,,"Self-referential structs,Dereferencing a raw pointer",,MaybeUninit,,About half the time,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat difficult,,Never,About half the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Most of the time,Sometimes,Sometimes,Always,"C,Swift,TypeScript",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,Box,,Sometimes,Unsure,Unsure,Most of the time,Unsure,"bindgen,cbindgen,wasm-bindgen,Emscripten",,In CI,,Somewhat easy,,,"Miri,Valgrind",,Daily,"Out-of-bounds access,Use after free,Null pointer dereference",,Always,Never,,Extremely unlikely,My unsafe code is in violation of Stacked Borrows,,Sometimes,Stacked Borrows Violation,,Somewhat difficult,,,Somewhat negatively,Somewhat negatively,Most of the time,Neither agree nor disagree,30-39,Master's degree,Prefer not to disclose,,"Industry,Academia,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1597,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,7,Yes,9,9,9,Yearly,Yes,No,Yearly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"Pin,Box,Arc,Cell,UnsafeCell,Mutex",,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Sometimes,Always,About half the time,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,UnsafeCell,,,,,,,,,,,,,Use unsafe,Unsure,Somewhat easy,,Sometimes,Most of the time,No,Yes,,,,,,Always,Always,"C,JavaScript,Python",,I write bindings manually and generate bindings using a tool,Definitely yes,Probably yes,No,,"Box,Arc",,Sometimes,Yes,Yes,Most of the time,Sometimes,"bindgen,wasm-bindgen,PyO3",,Locally,,Somewhat easy,,,"cargo fuzz,Miri,Valgrind",,Monthly,"Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference",,Always,Never,cargo-deny,Somewhat likely,"Lack of support for foreign function calls,My unsafe code is in violation of Tree Borrows",,Sometimes,"Stacked Borrows Violation,Tree Borrows Violation,Null pointer dereference",,Extremely easy,,,Unsure,Unsure,Unsure,Strongly agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1371,TRUE,anonymous,0.800000012,,0,5,,Yes,Yes,Yes,5,Yes,15,0,0,Monthly,Yes,Yes,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Serialization & deserialization",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Arc,Mutex",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,,Always,Most of the time,,,,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,System calls,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,Accessing the fields of a union type,,"MaybeUninit,ManuallyDrop",,Always,Small-scale optimizations,,Use safe,Use safe,Somewhat easy,,Sometimes,Sometimes,No,Yes,,,,,,Most of the time,Always,C,,I write bindings manually and generate bindings using a tool,Might or might not,Might or might not,Yes,Both,Box,,Never,No,Yes,Always,Sometimes,bindgen,,Locally,,,,,"cargo fuzz,Loom,Miri",,Less than once a year,"Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.",,Always,Sometimes,,Neither likely nor unlikely,"Slow performance,Lack of support for foreign function calls",,Most of the time,Tree Borrows Violation,,Neither easy nor difficult,,,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,Prefer not to answer,Prefer not to answer,Prefer not to disclose,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,18,TRUE,anonymous,1,,0,60,,Yes,Yes,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,907,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,5,1,0,Less than once a year,Yes,No,Less than once a year,"Operating systems,JIT Compilation",,"Operating systems,JIT Compilation",,No,Yes,Yes,Neither easy nor difficult,"Pin,Arc,Cell,UnsafeCell,OnceCell,Mutex",,"Implementing a custom allocator,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Sometimes,Always,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Dereferencing a raw pointer,,Most of the time,,,,,,,,,,,,,,Use safe,Unsure,Extremely difficult,forbid(unsafe_code),Sometimes,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Other,gdb,Less than once a year,"Out-of-bounds access,Unaligned memory access",,Sometimes,Never,,Extremely likely,,,,,,,Other,Friends,Unsure,Unsure,Unsure,Strongly agree,18-29,Some high school,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1144,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,22,22,22,Daily,No,Yes,Daily,"Operating systems,Database systems,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,RefCell,Cell,Mutex",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,Yes,,Sometimes,Most of the time,,,,Sometimes,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,In-place initialization or updates,,Most of the time,,,,,,,,,,,,,,Use unsafe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Most of the time,Always,Most of the time,Most of the time,About half the time,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Yes,Generated by a tool,Box,,Never,No,No,Always,Always,"bindgen,cbindgen,CXX,PyO3",,Locally,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),libFuzzer,Miri,ThreadSanitizer (TSAN),Valgrind",,Monthly,"Using uninitialized memory,Unwinding across foreign stack frames without using an -unwind ABI,Unaligned memory access",,Always,Sometimes,"cargo-update,cargo-audit,cargo-deny,cargo-geiger,cargo-vet",Neither likely nor unlikely,Lack of support for foreign function calls,,Sometimes,"Data race,Unaligned memory access,Using uninitialized memory",,,"Reddit (/r/rust),GitHub,Other",Zulip,Somewhat positively,Unsure,Most of the time,Strongly agree,30-39,Master's degree,Man,,Industry,,Reddit (/r/rust),,No,No,No,,
100,2038,TRUE,anonymous,0.400000006,,0,30,,Yes,Yes,Yes,4,Yes,12,9,5,Yearly,Yes,No,Less than once a year,"Data structures and language-level primitives,Other",,"Data structures and language-level primitives,Other",,No,Yes,No,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,UnsafeCell",,"mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,Most of the time,About half the time,Sometimes,,,,Unsure,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Never,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,,Never,Always,No,Yes,,,,,,Sometimes,Most of the time,,,,,,,,,,,,,,,,,,,,,,Miri,,Monthly,"Use after free,Double free,Integer overflow,Violation of stacked or tree borrows,Memory leak",,Never,Never,,Extremely unlikely,Slow performance,,Sometimes,Stacked Borrows Violation,,Somewhat difficult,,,Extremely negatively,Neither positively nor negatively,Most of the time,Neither agree nor disagree,18-29,Bachelor's degree,Man,,Open-source contributor,,The Rust Programming Language Forums,,No,Yes,No,,
100,2296,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,9,4,3,Weekly,Yes,Yes,Monthly,"Web applications - Backend,Database systems,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Arc,Cell,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Most of the time,About half the time,,,,Sometimes,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.,Other","When porting code I am not completely familiar with from C to Rust, I find it can be helpful to do a 1:1 unsafe conversion first. During this process I gain a better understanding of how data is passed through the program and I can convert parts to safe Rust as I go.","Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,About half the time,UnsafeCell,,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,"ManuallyDrop,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,MaybeUninit,,Always,Both,,Use safe,Use safe,Neither easy nor difficult,,Most of the time,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,About half the time,About half the time,"C,C++,Java",,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,No,,"Box,Arc",,Never,No,Yes,Sometimes,About half the time,bindgen,,In CI,,,,,"Miri,Valgrind",,Yearly,"Use after free,Double free,Failure to meet an application's functional requirements.,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Memory leak",,Sometimes,Never,,Neither likely nor unlikely,"Slow performance,Lack of support for foreign function calls",,Sometimes,"Memory leak,Use-after-free",,,The Rust Community Discord,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat disagree,18-29,Master's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,922,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,7,Yes,12,0,0,Weekly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis,Other",,"Web applications - Backend,Game development,Serialization & deserialization,Static analysis,Other",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop",,"Accessing the fields of a union type,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Always,Sometimes,,,,Most of the time,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Sometimes,ManuallyDrop,,,,,,"Accessing the fields of a union type,mem::transmute",,MaybeUninit,,Always,Both,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Sometimes,Always,C,,I do not write or generate bindings,Probably yes,Probably yes,No,,,,Sometimes,No,Yes,Most of the time,Never,,,,,,,,"cargo fuzz,Miri",,Monthly,Null pointer dereference,,Always,Sometimes,cargo-audit,Neither likely nor unlikely,Slow performance,,Always,"Stacked Borrows Violation,Null pointer dereference",,Somewhat easy,The Rust Programming Language Forums,,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Some college,Man,,"Industry,Open-source contributor,Rust project member",,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,513,TRUE,anonymous,0.899999976,,0,25,,Yes,Yes,Yes,1,Yes,2,1,0,Daily,Yes,Yes,Weekly,"Embedded systems,Web applications - Backend,Image & Data processing,Interpreters & runtime systems",,"Embedded systems,Web applications - Backend,Image & Data processing,Interpreters & runtime systems",,Yes,No,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Arc",,"Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Most of the time,Most of the time,,,,Sometimes,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,System calls,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,MaybeUninit,,,,,,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer",,,,Always,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat easy,"deny(unsafe_code),const_raw_ptr_deref",About half the time,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,"Assembly,C,C++,C#",,I generate bindings using a tool,Probably not,Probably yes,Yes,Written manually,Box,,Most of the time,Yes,Yes,Sometimes,Sometimes,"bindgen,wasm-bindgen,CXX",,In CI,,Somewhat easy,,,Miri,,Weekly,"Using uninitialized memory,Null pointer dereference,Violation of stacked or tree borrows,Memory leak",,About half the time,Most of the time,cargo-deny,Extremely likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Sometimes,Memory leak,,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub",,Somewhat negatively,Unsure,Unsure,Somewhat agree,18-29,Bachelor's degree,Non-binary,,Industry,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1550,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,4,Yes,15,13,13,Weekly,Yes,Yes,Monthly,"Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,"Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Calling foreign functions,System calls,Self-referential structs,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,Most of the time,Most of the time,,,,Never,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Calling foreign functions,Self-referential structs,Calling unsafe functions written in Rust",,About half the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Use unsafe,Unsure,Somewhat difficult,,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Most of the time,Most of the time,Most of the time,"C,C++",,I generate bindings using a tool,Probably yes,Probably yes,Unsure,,"Box,Arc",,Sometimes,No,Yes,Most of the time,Never,"bindgen,cbindgen,CXX",,Locally,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),MemorySanitizer (MSAN),ThreadSanitizer (TSAN)",,Daily,"Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Failure to meet an application's functional requirements.,External runtime or hardware interface does not behave according to its written specification.,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Never,cargo-audit,Somewhat unlikely,,,,,,,The Rust Programming Language Forums,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,30-39,PhD,Man,,"Open-source contributor,Other",National lab (government),Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1875,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,3,Yes,25,2,0,Weekly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Game development,Data structures and language-level primitives",,Yes,Yes,No,Somewhat easy,"MaybeUninit,Rc,Arc,Mutex,Other",RwLock,"Self-referential structs,mem::transmute,Calling unsafe functions written in Rust",,No,,Always,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Self-referential structs,mem::transmute,Calling unsafe functions written in Rust",,Always,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Never,Always,No,Yes,,,,,,Never,Always,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,libFuzzer,Miri",,Never,"Creating a zero-size allocation with an allocator that requires nonzero size,Out-of-bounds access",,Always,Sometimes,,Extremely likely,,,Sometimes,,,,"The Rust Programming Language Forums,The Rust Community Discord",,Neither positively nor negatively,Somewhat positively,Most of the time,Somewhat disagree,30-39,Bachelor's degree,Prefer not to disclose,,"Open-source contributor,Other",Hobbyist,The Rust Programming Language Forums,,Yes,Yes,No,,Target
100,697,TRUE,anonymous,1,,0,75,,Yes,Yes,Yes,3,Yes,10,10,5,Weekly,No,Yes,Weekly,Embedded systems,,,,Yes,No,Yes,Somewhat easy,MaybeUninit,,"Calling foreign functions,Inline assembly",,No,,Always,Always,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Inline assembly",,Always,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,"allow(improper_ctypes),allow(improper_ctypes_definitions)",Sometimes,Never,No,Yes,,,,,,Always,Always,"C,C++",,I write bindings manually,Definitely yes,Probably yes,No,,,,Never,Yes,Yes,Never,Never,,,,,,,,"Miri,Valgrind",,Daily,,,Always,Always,"cargo-update,cargo-audit,cargo-deny",Extremely likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,About half the time,,,,,,Somewhat negatively,Unsure,Most of the time,Neither agree nor disagree,30-39,Master's degree,Man,,Industry,,Reddit (/r/rust),,No,No,No,,
100,1272,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,3,Yes,25,20,18,Weekly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Game development,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,OnceCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Most of the time,Sometimes,,,,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"Accessing the fields of a union type,Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,ManuallyDrop,,"System calls,Self-referential structs,Mutable static variables,Dereferencing a raw pointer,Implementing an unsafe trait,Declaring an unsafe trait",,MaybeUninit,,About half the time,Small-scale optimizations,,Use safe,Use unsafe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Sometimes,Yes,No,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API",,Always,Always,Sometimes,,,"C,C++,Python",,I generate bindings using a tool,Might or might not,Definitely yes,No,,Box,,Never,No,Yes,Always,Always,"bindgen,wasm-bindgen,CXX,PyO3",,Locally,,Somewhat easy,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,Miri,Valgrind",,Monthly,"Deallocating memory with an incorrect Layout,Out-of-bounds access,Double free,Violation of stacked or tree borrows",,Sometimes,Never,"cargo-update,cargo-audit,cargo-deny",Somewhat unlikely,"Lack of support for foreign function calls,Lack of support for inline assembly",,About half the time,Stacked Borrows Violation,,Extremely difficult,Reddit (/r/rust),,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat agree,30-39,Bachelor's degree,Man,,"Academia,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,773,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,8,1,2,Monthly,No,No,Monthly,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Database systems,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Pin,Box",,"Implementing a custom allocator,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,,Always,Never,,,,Never,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Implementing a custom allocator,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,deny(unsafe_code),Sometimes,Always,No,Yes,,,,,,Never,Always,C++,,I write bindings manually and generate bindings using a tool,Might or might not,Might or might not,Yes,Both,"Box,Arc",,Never,Yes,No,Sometimes,Always,"CXX,PyO3",,,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),ThreadSanitizer (TSAN)",,Never,"Use after free,Double free",,Always,Never,,Somewhat unlikely,,,,,,,,,Somewhat negatively,Somewhat positively,Most of the time,Strongly agree,18-29,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,No,Yes,No,,
100,928,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,7,1,0,Yearly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Game development,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Game development,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"Box,Rc,UnsafeCell",,"Manual memory allocation,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,Most of the time,Always,Sometimes,,,,,Yes,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Mutable static variables,,About half the time,,,,,,,mem::transmute,,,,Never,Other,I do not use unsafe because it performs faster or is more space efficient. I must have answered a previous entry incorrectly.,Unsure,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Never,Most of the time,No,Yes,,,,,,Sometimes,Unsure,"C,Go,JavaScript,Other",Where does WASM fit here? (Selected Javascript),I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,No,,Box,,Sometimes,Yes,Yes,Sometimes,Sometimes,"cbindgen,wasm-bindgen",,,,Extremely easy,,,libFuzzer,,Daily,"Use after free,Null pointer dereference,Unaligned memory access,Memory leak",,Sometimes,Never,cargo-audit,Neither likely nor unlikely,,,,,,,The Rust Community Discord,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,603,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,3,Yes,11,10,7,Monthly,No,Yes,Monthly,"Operating systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,Cell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,,Always,Sometimes,,,,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Manual memory allocation,Accessing the fields of a union type,mem::transmute",,,,Never,Unsure,,Use unsafe,Unsure,Neither easy nor difficult,,Never,Most of the time,Yes,No,To provide a more performant equivalent of a safe API,,Always,Most of the time,Never,,,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Yearly,"Using uninitialized memory,Double free,Violation of stacked or tree borrows,Memory leak",,Sometimes,Sometimes,cargo-vet,Neither likely nor unlikely,"Slow performance,Lack of support for foreign function calls",,Sometimes,"Stacked Borrows Violation,Memory leak,Using uninitialized memory",,Extremely easy,,,Neither positively nor negatively,Somewhat negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,11498,TRUE,anonymous,0.400000006,,0,0,,Yes,Yes,Yes,5,Yes,6,0,0,Weekly,Yes,Yes,Monthly,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Intrinsics,Inline assembly,Self-referential structs,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,About half the time,"Volatiles,Const intrinsics",,No,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,In-place initialization or updates,,Sometimes,MaybeUninit,,,,,,"Self-referential structs,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Both,,Use safe,Unsure,Extremely easy,,Sometimes,Most of the time,Yes,Yes,To provide a more performant equivalent of a safe API,,Always,Always,Sometimes,Sometimes,About half the time,"C,Python",,I do not write or generate bindings,Might or might not,Might or might not,Unsure,,"Box,Arc",,Never,No,No,Always,Always,,,,,,,,"Miri,ThreadSanitizer (TSAN),Valgrind",,Monthly,"Use after free,Double free,Memory leak",,Always,About half the time,,Neither likely nor unlikely,"Slow performance,Other",Not all system calls are supported,Sometimes,,,,"Reddit (/r/rust),The Rust Programming Language Forums",,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,18-29,Some high school,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,39800,TRUE,anonymous,0.899999976,,0,10,,Yes,Yes,Yes,2,Yes,8,0,0,Less than once a year,No,No,Less than once a year,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Non-JIT Compilation,Data structures and language-level primitives,Static analysis",,Image & Data processing,,No,No,Yes,Somewhat easy,"Pin,Box",,"Self-referential structs,mem::transmute,Dereferencing a raw pointer,Implementing an unsafe trait",,Yes,,,,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,Implementing an unsafe trait,,Never,,,,,,,mem::transmute,,,,Never,Large-scale components purpose-built for performance.,,Use unsafe,Use unsafe,Extremely easy,,Sometimes,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Monthly,Use after free,,Sometimes,Never,,Extremely unlikely,,,,,,,,,Somewhat negatively,Somewhat negatively,Always,Somewhat agree,18-29,Some college,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1539,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,2,Yes,10,4,3,Yearly,Yes,Yes,Yearly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Non-JIT Compilation,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Image & Data processing,Non-JIT Compilation,Serialization & deserialization",,Yes,No,Yes,Somewhat easy,Box,,"Implementing a custom allocator,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,About half the time,Most of the time,,,,,No,No,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Calling foreign functions,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Most of the time,,,mem::transmute,,,,,,,,,,,Unsure,Use safe,Extremely easy,,Never,Most of the time,No,No,,,,,,,,"C,C++,JavaScript,TypeScript",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,Box,,About half the time,No,No,Most of the time,Sometimes,"bindgen,wasm-bindgen,Emscripten",,In CI,,Somewhat easy,,,"cargo fuzz,Miri",,Monthly,,,Most of the time,Never,,Neither likely nor unlikely,,,About half the time,"Unaligned memory access,Using uninitialized memory",,,,,Somewhat negatively,Somewhat positively,Most of the time,Somewhat agree,18-29,High school diploma/GED,Prefer not to disclose,,Open-source contributor,,Reddit (/r/rust),,No,No,No,,
100,4362,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,13,6,0,Monthly,Yes,Yes,Monthly,Image & Data processing,,,,Yes,Yes,Yes,Somewhat easy,ManuallyDrop,,"Calling foreign functions,System calls,Intrinsics,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Yes,,Always,Sometimes,"Atomics,Const intrinsics",,Yes,,,,Other,CUDA and FFI,,,,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,Other,Interfacing with CUDA requires unsafe function calls and caller device pointers,Always,Always,Sometimes,Sometimes,Sometimes,"C,C++",,I generate bindings using a tool,Probably yes,Probably yes,Unsure,,,,Never,No,Yes,Most of the time,About half the time,"bindgen,cbindgen,CXX,PyO3",,Locally,,,,,,,Less than once a year,"Using uninitialized memory,Out-of-bounds access,Use after free,Null pointer dereference",,Always,Sometimes,,Somewhat unlikely,,,,,,,The Rust Programming Language Forums,,Neither positively nor negatively,Unsure,Most of the time,Strongly disagree,30-39,PhD,Man,,"Academia,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,36,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,30,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1043,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,23,20,0,Daily,Yes,Yes,Weekly,"Web applications - Backend,Database systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Database systems,Serialization & deserialization",,No,Yes,Yes,Neither easy nor difficult,"MaybeUninit,Box",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Intrinsics,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,,Always,About half the time,Architecture-specific or SIMD intrinsics,,No,,No,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Intrinsics,Inline assembly,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,MaybeUninit,,About half the time,Both,,Use safe,Use safe,Somewhat easy,,Sometimes,Sometimes,Yes,Yes,To provide a more performant equivalent of a safe API,,Always,Always,About half the time,Always,Sometimes,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Weekly,"Using uninitialized memory,Out-of-bounds access,Unaligned memory access",,Always,About half the time,cargo-deny,Neither likely nor unlikely,"Slow performance,Lack of support for inline assembly",,Most of the time,"Stacked Borrows Violation,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,,,Somewhat negatively,Somewhat negatively,Unsure,Strongly agree,40-49,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,902,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,4,Yes,8,5,5,Weekly,Yes,Yes,Weekly,"Embedded systems,Web applications - Backend,Database systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,No,No,Yes,Somewhat difficult,"MaybeUninit,Box,Rc,Arc",,"Manual memory allocation,Intrinsics,mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,,Always,About half the time,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Intrinsics,mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,About half the time,,,"mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait",,,,"Manual memory allocation,Intrinsics,mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,,,Always,Both,,Use safe,Use safe,Somewhat difficult,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Most of the time,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Weekly,"Using uninitialized memory,Out-of-bounds access,Integer overflow,Unaligned memory access",,Sometimes,About half the time,cargo-update,Somewhat unlikely,,,,,,,The Rust Community Discord,,Neither positively nor negatively,Somewhat positively,Most of the time,Somewhat disagree,18-29,Some college,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,1134,TRUE,anonymous,0.899999976,,,,,Yes,Yes,Yes,1,Yes,15,1,10,Daily,No,Yes,Daily,"Embedded systems,Database systems,Networking & distributed systems,Image & Data processing,Game development,Serialization & deserialization",,"Image & Data processing,Game development",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Arc",,"Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Always,Most of the time,,,,Unsure,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,Calling foreign functions,,Most of the time,,,,,,,mem::transmute,,MaybeUninit,,Never,Both,,Use unsafe,Use safe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API",,Always,Most of the time,Sometimes,Always,Most of the time,"C,C++",,I do not write or generate bindings,Probably yes,Probably yes,No,,"Box,Arc",,Never,Unsure,Unsure,Unsure,Never,,,,,,,,,,Daily,"Using uninitialized memory,Out-of-bounds access,Null pointer dereference",,Sometimes,Never,,Neither likely nor unlikely,,,,,,,The Rust Community Discord,,Somewhat negatively,Unsure,Unsure,Somewhat agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,980,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,8,Yes,40,24,12,Monthly,Yes,Yes,Monthly,"Operating systems,Game development,Data structures and language-level primitives",,"Operating systems,Game development,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Most of the time,Most of the time,Never,,,,Sometimes,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,,Sometimes,Always,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,About half the time,About half the time,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Yearly,"Out-of-bounds access,Use after free,Double free,Violation of stacked or tree borrows",,Most of the time,Sometimes,cargo-geiger,Neither likely nor unlikely,My unsafe code is in violation of Tree Borrows,,Sometimes,Stacked Borrows Violation,,Somewhat difficult,,,Extremely negatively,Somewhat negatively,Most of the time,Somewhat agree,40-49,PhD,Man,,Academia,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,780,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,10,4,4,Monthly,No,Yes,Monthly,"Web applications - Backend,Networking & distributed systems,Manufacturing,Other",,"Manufacturing,Other",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,Box,UnsafeCell",,"Implementing a custom allocator,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,Most of the time,Most of the time,Sometimes,,,,,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Implementing a custom allocator,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,No,Yes,,,,,,About half the time,Sometimes,C,,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,Box,,Sometimes,Yes,Yes,Sometimes,Sometimes,"bindgen,wasm-bindgen,PyO3",,Locally,,Extremely easy,,,,,Yearly,"Using uninitialized memory,Use after free,Null pointer dereference,Memory leak",,Most of the time,Never,,Somewhat likely,,,,,,,,,Somewhat negatively,Somewhat positively,Most of the time,Neither agree nor disagree,18-29,Master's degree,Man,,Industry,,Other,Colleague,Yes,Yes,No,,Amazon
100,2085,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,41,3,10,Weekly,Yes,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Networking & distributed systems,Image & Data processing,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,Cell,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,No,About half the time,Always,About half the time,,,,,,,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,Most of the time,"MaybeUninit,UnsafeCell",,"Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates",,MaybeUninit,,,,,,,,,Use safe,Use safe,Somewhat easy,allow(improper_ctypes),Never,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,About half the time,About half the time,Most of the time,Most of the time,C++,,I write bindings manually and generate bindings using a tool,Definitely yes,Probably not,Yes,Unsure,,,Never,Unsure,Yes,Unsure,Sometimes,bindgen,,In CI,,,,,,,Weekly,"Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Memory leak",,Sometimes,Never,cargo-update,Extremely likely,,,,,,,,,Somewhat negatively,Unsure,Sometimes,Neither agree nor disagree,50-59,Some high school,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1971,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,10,2,0,Weekly,Yes,Yes,Monthly,"Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,UnsafeCell,Mutex",,"Manual memory allocation,Calling foreign functions,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Declaring an unsafe trait",,Yes,Always,Always,Sometimes,"Atomics,Architecture-specific or SIMD intrinsics",,Yes,Most of the time,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Calling foreign functions,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Declaring an unsafe trait",,MaybeUninit,,About half the time,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Never,Sometimes,Most of the time,"Assembly,C,JavaScript",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,No,,"Box,Other",Vec,Never,No,No,Always,About half the time,"cbindgen,wasm-bindgen,Emscripten,PyO3",,,,Neither easy nor difficult,,,"cargo fuzz,MemorySanitizer (MSAN),Miri,Valgrind",,Monthly,"Out-of-bounds access,Double free,Failure to meet an application's functional requirements.,Null pointer dereference,Memory leak",,Always,Sometimes,cargo-audit,Neither likely nor unlikely,Lack of support for foreign function calls,,About half the time,"Stacked Borrows Violation,Use-after-free,Out-of-bounds access",,Somewhat difficult,"Reddit (/r/rust),The Rust Community Discord",,Somewhat negatively,Somewhat positively,About half the time,Strongly agree,18-29,Master's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,745,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,15,6,5,Yearly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,No,Neither easy nor difficult,"Box,Arc",,"Calling foreign functions,mem::transmute,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,Most of the time,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"mem::transmute,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,,,,,,,,,,,,,,Use safe,,Somewhat easy,,Never,Most of the time,No,Yes,,,,,,Never,Never,C,,I do not write or generate bindings,Probably yes,Probably yes,No,,,,Never,No,No,Unsure,Unsure,,,,,,,,Miri,,Never,Violation of stacked or tree borrows,,Sometimes,Never,,Somewhat likely,,,Sometimes,Tree Borrows Violation,,Somewhat difficult,The Rust Community Discord,,Somewhat negatively,Unsure,Always,Strongly agree,18-29,Master's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1044,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,10,0,2,Yearly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Manufacturing,Serialization & deserialization",,"Embedded systems,Manufacturing,Serialization & deserialization",,Yes,No,Yes,Neither easy nor difficult,,,"Calling foreign functions,System calls",,Yes,,Most of the time,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls",,Always,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,forbid(unsafe_code),Sometimes,Always,No,Yes,,,,,,Most of the time,Sometimes,"C,C++,Python",,I generate bindings using a tool,Might or might not,Probably yes,Unsure,,,,Never,No,No,Unsure,Unsure,PyO3,,,,,,,Valgrind,,Never,,,Sometimes,Sometimes,,Extremely unlikely,,,,,,,,,Neither positively nor negatively,Unsure,Most of the time,Strongly agree,40-49,Master's degree,Prefer not to disclose,,Industry,,The Rust Programming Language Forums,,No,No,No,,
100,1606,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,13,13,10,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis,Other",Lots of CLI tools,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Arc,Other","Vec (to/from raw, for ffi)","Calling foreign functions,System calls,Intrinsics,Inline assembly,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Most of the time,Sometimes,Architecture-specific or SIMD intrinsics,,Yes,Most of the time,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.,Other","I sometimes use unsafe as a marker, voluntarily, when the caller/implementer needs to avoid unusual invalid situations that can't really be checked. I could omit the unsafe marker... but it would be less safe :) Similarly, in Rust std::fs::File is safe, yet you can open /proc/self/mem and do unsafe things with it. unsafe is a courtesy marker, when it makes sense","Calling foreign functions,System calls,Intrinsics,Inline assembly,Dereferencing a raw pointer",,Most of the time,,,"Calling foreign functions,Intrinsics,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop",,"Calling foreign functions,Intrinsics,Inline assembly,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust",,"MaybeUninit,ManuallyDrop",,Sometimes,Small-scale optimizations,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Sometimes,About half the time,About half the time,"Assembly,C,C++",,I generate bindings using a tool,Might or might not,Probably yes,No,,"Box,Arc,Other",Vec,Never,Unsure,No,Unsure,Most of the time,"bindgen,cbindgen,CXX,Emscripten,UniFFI",,Other,Build step.. what do you mean CI :/ ?,,,,"Miri,Valgrind",,Monthly,"Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Memory leak",,Most of the time,Sometimes,cargo-geiger,Somewhat likely,"Lack of support for foreign function calls,Other","My unsafe code tends to be simple and FFI related, so I'm usually confident I'm not doing anything worth taking sanitizers and miri out for (perhaps recklessly.. but I am lazy and/or ADHD!)",Sometimes,,,,"Reddit (/r/rust),The Rust Community Discord",,Somewhat negatively,Somewhat positively,Most of the time,Neither agree nor disagree,18-29,Master's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,Yes,No,,
100,718,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,14,0,0,Monthly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Game development,Data structures and language-level primitives",,"Web applications - Backend,Networking & distributed systems,Game development,Data structures and language-level primitives",,Yes,Yes,Yes,Extremely easy,"MaybeUninit,ManuallyDrop,Cell,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,About half the time,Always,Sometimes,"Volatiles,Architecture-specific or SIMD intrinsics",,No,Most of the time,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Always,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,No,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Never,,,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Less than once a year,,,Always,Never,,Somewhat likely,"Lack of support for foreign function calls,Other",mmap is missing basically,Sometimes,"Stacked Borrows Violation,Use-after-free,Using uninitialized memory",,Somewhat difficult,Reddit (/r/rust),,Neither positively nor negatively,Somewhat positively,Sometimes,Somewhat agree,Prefer not to answer,Some college,Prefer not to disclose,,"Academia,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,41,TRUE,anonymous,1,,0,5,,Yes,Yes,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1311,TRUE,anonymous,1,TRUE,90,10,9/23/23 16:30,Yes,Yes,Yes,4,Yes,6,6,6,Daily,No,Yes,Daily,"Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Box,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,Yes,Most of the time,Always,Never,Architecture-specific or SIMD intrinsics,,No,Most of the time,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,"mem::transmute,Dereferencing a raw pointer",,,,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,UnsafeCell",,Always,Both,,Use unsafe,Use unsafe,Somewhat difficult,"allow(improper_ctypes),allow(improper_ctypes_definitions),unsafe_block_in_unsafe_fn",Never,Never,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Never,Always,About half the time,"Assembly,C,C++",,I write bindings manually,Probably not,Probably not,Yes,Both,Box,,Sometimes,Yes,Unsure,Sometimes,Sometimes,,,,,,Kani,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),libFuzzer,MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN)",,Daily,"Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Always,,Neither likely nor unlikely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Always,"Stacked Borrows Violation,Tree Borrows Violation,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Neither easy nor difficult,,,Extremely negatively,Extremely negatively,Never,Somewhat agree,30-39,High school diploma/GED,Man,,Industry,,Reddit (/r/rust),,No,No,No,,
100,1008,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,8,Yes,15,15,15,Daily,Yes,Yes,Daily,"Networking & distributed systems,Image & Data processing,Data structures and language-level primitives",,"Networking & distributed systems,Image & Data processing,Data structures and language-level primitives",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Rc,UnsafeCell",,"Cyclic aliasing patterns,Self-referential structs,Dereferencing a raw pointer,In-place initialization or updates",,No,Always,,,,,,Never,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Cyclic aliasing patterns,Self-referential structs,Dereferencing a raw pointer,In-place initialization or updates",,"MaybeUninit,UnsafeCell",,Always,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat difficult,,Sometimes,Most of the time,No,Yes,,,,,,Always,Always,,,,,,,,,,,,,,,,,,,,,,"Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Daily,"Using uninitialized memory,Use after free,Violation of stacked or tree borrows,Memory leak",,Always,Sometimes,cargo-audit,Extremely likely,,,Always,"Stacked Borrows Violation,Memory leak,Use-after-free,Using uninitialized memory",,Extremely easy,"Reddit (/r/rust),The Rust Community Discord",,Unsure,Somewhat negatively,Most of the time,Somewhat agree,18-29,Master's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,Yes,No,,
100,5090,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,6,6,6,Weekly,Yes,Yes,Monthly,"Embedded systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,RefCell,Cell,UnsafeCell,Other",NonNull,"Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait,Other",Type Erasure,No,Always,Always,About half the time,,,,Never,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell,Other",NonNull,,,,,"Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait,Other",Type Erasure,"MaybeUninit,ManuallyDrop,UnsafeCell,Other",NonNull,Sometimes,Both,,Use unsafe,Unsure,Somewhat easy,,About half the time,Most of the time,No,Yes,,,,,,Sometimes,Always,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),MemorySanitizer (MSAN),Miri,Valgrind",,Yearly,"Deallocating memory with an incorrect Layout,Use after free,External runtime or hardware interface does not behave according to its written specification.,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Most of the time,Never,,Neither likely nor unlikely,"Slow performance,Other",Reading from a vtable using a regular load is undefined behavior.,Most of the time,"Stacked Borrows Violation,Use-after-free,Unaligned memory access",,Somewhat difficult,"The Rust Programming Language Forums,GitHub",,Somewhat negatively,Somewhat positively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,2648,TRUE,anonymous,0.899999976,,0,25,,Yes,Yes,Yes,2,Yes,7,2,0,Yearly,Yes,No,Yearly,Other,ffi bindings,Other,video recording,Yes,No,Yes,Extremely difficult,"MaybeUninit,Rc,Cell,OnceCell,LazyCell,Mutex",,"Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Calling unsafe functions written in Rust",,Always,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Never,Always,No,Yes,,,,,,Never,Always,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,Other,stack,Never,No,Yes,Unsure,Sometimes,bindgen,,Other,both,,,,,,Monthly,"Using uninitialized memory,Out-of-bounds access,Null pointer dereference",,Never,Sometimes,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Unsure,About half the time,Somewhat agree,18-29,Bachelor's degree,Prefer not to disclose,,Other,hobbyist,Reddit (/r/rust),,Yes,No,No,,Amazon
100,43,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,1.5,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1046,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,3,Yes,13,5,3,Monthly,Yes,Yes,Weekly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Serialization & deserialization",,No,Yes,Yes,Neither easy nor difficult,"MaybeUninit,OnceCell",,"Accessing the fields of a union type,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Other",Changing mutability,Yes,,Sometimes,Always,"Atomics,Architecture-specific or SIMD intrinsics",,Yes,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,,,,,,,"Intrinsics,Inline assembly,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,"MaybeUninit,ManuallyDrop",,Most of the time,Both,,Unsure,Use safe,Somewhat easy,,Sometimes,Always,Yes,Yes,To provide a more performant equivalent of a safe API,,Always,Always,Most of the time,Sometimes,Sometimes,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,Loom,Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Daily,,,Always,Sometimes,cargo-update,Neither likely nor unlikely,Slow performance,,Sometimes,Out-of-bounds access,,,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Master's degree,Man,,Academia,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1506,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,8,6,6,Daily,Yes,Yes,Daily,"Operating systems,Web applications - Frontend,Image & Data processing,Web browsers,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,Box,Rc,Arc,RefCell,Cell,UnsafeCell,Mutex",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,Intrinsics,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,Always,Always,Most of the time,"Atomics,Architecture-specific or SIMD intrinsics",,Yes,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.,Other",Needing to maintain an existing C ABI,"Calling foreign functions,Calling unsafe functions written in Rust",,Sometimes,"MaybeUninit,UnsafeCell",,,,,,"Accessing the fields of a union type,Self-referential structs,mem::transmute,Calling unsafe functions written in Rust",,MaybeUninit,,Sometimes,Both,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Most of the time,Most of the time,Yes,Yes,Other,"Maintaining an existing C ABI, and in general, providing FFI APIs",Always,Most of the time,Sometimes,Always,Always,"Assembly,C",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,No,,Box,,Never,Yes,Yes,Sometimes,Sometimes,"bindgen,cbindgen,wasm-bindgen,Emscripten",,Locally,,Somewhat easy,,,Miri,,Monthly,"Using uninitialized memory,Out-of-bounds access,Unaligned memory access",,Always,Never,,Extremely likely,Lack of support for foreign function calls,,Most of the time,"Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,,GitHub,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Bachelor's degree,Woman,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,928,TRUE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,4,Yes,13,10,13,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems",,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Pin,Box,UnsafeCell,Mutex",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,About half the time,Always,Most of the time,"Volatiles,Atomics,Const intrinsics",,No,Sometimes,Yes,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Intrinsics,Self-referential structs,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,Unsure,Unsure,Somewhat easy,unsafe_block_in_unsafe_fn,Never,About half the time,Yes,Yes,To provide a more performant equivalent of a safe API,,Most of the time,Most of the time,Never,Most of the time,Never,C,,I generate bindings using a tool,Might or might not,Probably yes,Unsure,,Box,,Sometimes,Yes,Yes,Sometimes,Sometimes,"bindgen,cbindgen,wasm-bindgen",,Locally,,Extremely difficult,,,libFuzzer,,Weekly,"Using uninitialized memory,Memory leak",,Sometimes,Never,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Unsure,Most of the time,Somewhat disagree,18-29,Some high school,Non-binary,,"Industry,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,784,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,8,5,6,Monthly,Yes,Yes,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,Yes,Neither easy nor difficult,"MaybeUninit,Pin,Box,Rc,Arc",,"Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Most of the time,Most of the time,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop",,"Mutable static variables,mem::transmute",,,,About half the time,Both,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Most of the time,No,Yes,,,,,,Always,Most of the time,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Less than once a year,"Out-of-bounds access,Memory leak",,Sometimes,Never,,Somewhat likely,,,Most of the time,"Stacked Borrows Violation,Out-of-bounds access",,Somewhat easy,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Some college,Man,,Open-source contributor,,Reddit (/r/rust),,No,No,No,,
100,5212,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,18,18,16,Monthly,No,No,Monthly,"Networking & distributed systems,Image & Data processing,Data structures and language-level primitives",,"Networking & distributed systems,Image & Data processing,Data structures and language-level primitives",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,UnsafeCell",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Global assembly,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,Always,Always,Always,,,,Sometimes,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,In-place initialization or updates,,Most of the time,MaybeUninit,,,,,,,,,,,,,Unsure,Unsure,Neither easy nor difficult,,Never,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Sometimes,Always,Sometimes,Most of the time,Most of the time,"C,C++,Python",,I write bindings manually and generate bindings using a tool,Definitely not,Probably yes,Unsure,,,,Never,No,Yes,Always,Most of the time,"cbindgen,CXX,PyO3",,,,,,,Miri,,Less than once a year,"Use after free,Double free,Violation of stacked or tree borrows",,Most of the time,Sometimes,cargo-audit,Extremely likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Most of the time,Null pointer dereference,,,"Reddit (/r/rust),The Rust Programming Language Forums",,Neither positively nor negatively,Unsure,Most of the time,Strongly agree,18-29,PhD,Woman,,"Industry,Academia,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1202,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,12,4,1,Monthly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,Sometimes,Always,About half the time,,,,Always,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,About half the time,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,About half the time,No,Yes,,,,,,Always,Most of the time,"C,C++,Dart",,I do not write or generate bindings,Definitely not,Probably yes,No,,,,Never,Yes,No,Unsure,Unsure,,,,,,,,"Miri,Shuttle",,Monthly,"Failure to meet an application's functional requirements.,External runtime or hardware interface does not behave according to its written specification.",,Most of the time,Never,cargo-audit,Neither likely nor unlikely,,,Never,,,,,,Somewhat positively,Unsure,Always,Somewhat agree,18-29,High school diploma/GED,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,4400,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,11,11,11,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Manufacturing,Data structures and language-level primitives,Serialization & deserialization,Other",,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Other",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,UnsafeCell,Other",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,About half the time,Sometimes,"Volatiles,Atomics,Architecture-specific or SIMD intrinsics",,No,Sometimes,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,Other",,,,,,,,,,,"Intrinsics,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat difficult,"forbid(unsafe_code),deny(unsafe_code)",Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Unsure,"C,C++,JavaScript,TypeScript",,I write bindings manually and generate bindings using a tool,Probably yes,Might or might not,Yes,Both,"Box,Other",Vec,Sometimes,No,No,Always,Most of the time,"bindgen,cbindgen,wasm-bindgen,CXX,PyO3",,In CI,,Somewhat difficult,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),Miri,UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Other",creating reference to raw pointer and violating the types constraints,Most of the time,Most of the time,,Somewhat likely,Lack of support for foreign function calls,,Sometimes,Stacked Borrows Violation,,Somewhat easy,"GitHub,Other",IRC,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Some college,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,1658,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,4,2,2,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Manufacturing,Serialization & deserialization,Static analysis",,"Operating systems,Embedded systems,Manufacturing,Serialization & deserialization,Static analysis",,Yes,Yes,No,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,RefCell,Cell,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,Yes,,About half the time,Sometimes,,,,Never,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Mutable static variables,Calling unsafe functions written in Rust",,Sometimes,ManuallyDrop,,,,,,,,,,,,,Unsure,Unsure,Somewhat difficult,,Sometimes,About half the time,Yes,Yes,To provide a more ergonomic equivalent of a safe API,,About half the time,About half the time,Sometimes,Most of the time,Most of the time,"Assembly,C,C++,TypeScript",,I write bindings manually,Probably yes,Might or might not,Yes,Both,"Box,Rc,Arc",,Never,Yes,No,Sometimes,Unsure,,,,,,,,,,Daily,"Using uninitialized memory,Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Memory leak",,Always,About half the time,cargo-update,Neither likely nor unlikely,,,,,,,GitHub,,Neither positively nor negatively,Unsure,About half the time,Strongly agree,18-29,High school diploma/GED,Man,,"Industry,Academia,Open-source contributor,Rust project member",,"Reddit (/r/rust),""This Week in Rust""",,No,No,No,,
100,1909,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,15,13,12,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Other",Hardware Description Languages,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Other",Hardware Description Languages,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,Cell,UnsafeCell,OnceCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,About half the time,Sometimes,"Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Intrinsics,Inline assembly,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Calling foreign functions,Intrinsics,Inline assembly,Self-referential structs,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Both,,Unsure,Unsure,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Most of the time,Sometimes,Most of the time,Sometimes,"Assembly,C,C++,JavaScript,Python",,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,Yes,Written manually,"Box,Arc,Other",Vec,Sometimes,Yes,Yes,Most of the time,Sometimes,"bindgen,cbindgen,wasm-bindgen,Emscripten,PyO3",,Other,as a build step,Neither easy nor difficult,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,Miri,UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"Out-of-bounds access,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Violation of stacked or tree borrows",,Most of the time,Sometimes,,Somewhat likely,Lack of support for foreign function calls,,Sometimes,,,,"The Rust Programming Language Forums,GitHub",,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Some college,Man,,"Industry,Open-source contributor,Rust project member",,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,594,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,8,8,8,Monthly,No,No,Yearly,"Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Database systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box",,"System calls,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,Always,Most of the time,,,,Most of the time,Yes,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Unsure,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,deny(unsafe_code),Never,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Most of the time,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Miri",,Monthly,"Using uninitialized memory,Out-of-bounds access,Use after free,Integer overflow",,Always,Sometimes,,Somewhat likely,Lack of support for foreign function calls,,Sometimes,"Stacked Borrows Violation,Use-after-free,Using uninitialized memory",,Neither easy nor difficult,,,Neither positively nor negatively,Unsure,Most of the time,Somewhat disagree,18-29,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,1782,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,8,Yes,35,7,5,Weekly,Yes,Yes,Weekly,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Extremely easy,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,OnceCell,Mutex",,"Accessing the fields of a union type,Calling foreign functions,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,,Always,Most of the time,"Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,Most of the time,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,Dereferencing a raw pointer,Implementing an unsafe trait",,Most of the time,ManuallyDrop,,,,,,"Accessing the fields of a union type,Intrinsics,mem::transmute,Pointer arithmetic",,"MaybeUninit,ManuallyDrop",,Always,Both,,Use safe,Use safe,Extremely easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Most of the time,Most of the time,Always,"Assembly,C,Swift,TypeScript,Other",Fortran,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,No,,"Box,Arc",,Never,No,Yes,About half the time,Sometimes,"bindgen,cbindgen,wasm-bindgen,CXX,PyO3,Other",typescript-type-def,Locally,,Somewhat easy,"Kani,Prusti,Creusot",,"cargo fuzz,libFuzzer,Miri,UndefinedBehaviorSanitizer (UBSAN)",,Less than once a year,"Using uninitialized memory,Out-of-bounds access,Failure to meet an application's functional requirements.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Always,Most of the time,"cargo-update,cargo-audit,cargo-deny,cargo-geiger,cargo-vet",Neither likely nor unlikely,Slow performance,,Most of the time,"Out-of-bounds access,Using uninitialized memory",,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub,Other","zulip, mailto [name]  ;-)",Somewhat negatively,Somewhat positively,Most of the time,Strongly agree,40-49,Master's degree,Man,,"Industry,Open-source contributor,Rust project member",,Reddit (/r/rust),,Yes,No,No,,Amazon
100,928,TRUE,anonymous,1,,0,20,,Yes,Yes,Yes,3,Yes,5,4,4,Weekly,Yes,Yes,Weekly,"Operating systems,Image & Data processing,Serialization & deserialization,Static analysis",,"Operating systems,Image & Data processing,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,Box,Arc,RefCell,OnceCell,Mutex",,"Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,,Sometimes,Sometimes,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,"forbid(unsafe_code),const_raw_ptr_deref",Most of the time,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,About half the time,About half the time,About half the time,Most of the time,Unsure,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Might or might not,Yes,Both,Box,,Never,Yes,No,Unsure,Always,"cbindgen,CXX,PyO3",,,,,,,Valgrind,,Daily,"Out-of-bounds access,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Memory leak",,About half the time,Sometimes,cargo-deny,Somewhat likely,,,,,,,GitHub,,Neither positively nor negatively,Unsure,Most of the time,Somewhat agree,18-29,High school diploma/GED,Man,,Open-source contributor,,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,1470,TRUE,anonymous,0.899999976,,0,85,,Yes,Yes,Yes,2,Yes,17,13,12,Monthly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,No,Yes,Somewhat easy,"MaybeUninit,Cell,OnceCell,LazyCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Most of the time,Most of the time,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Inline assembly,Mutable static variables,mem::transmute,Implementing an unsafe trait,Declaring an unsafe trait",,Sometimes,Other,Union of floating point and unsigned int,,,,,"Inline assembly,Calling unsafe functions written in Rust",,,,Most of the time,Small-scale optimizations,,Unsure,Unsure,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Most of the time,Sometimes,Most of the time,Unsure,"Assembly,C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,,,Never,No,Yes,Most of the time,Unsure,"wasm-bindgen,Emscripten,PyO3",,,,Somewhat difficult,,,,,Weekly,"Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Integer overflow,Unaligned memory access",,Most of the time,Never,,Neither likely nor unlikely,,,,,,,,,Neither positively nor negatively,Unsure,About half the time,Neither agree nor disagree,30-39,Master's degree,Prefer not to disclose,,"Academia,Open-source contributor",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,929,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,8,2,3,Monthly,Yes,No,Monthly,"Web applications - Backend,Non-JIT Compilation,Interpreters & runtime systems",,Non-JIT Compilation,,Yes,Yes,No,Neither easy nor difficult,"ManuallyDrop,Box,UnsafeCell",,"Calling foreign functions,Self-referential structs,mem::transmute,Dereferencing a raw pointer",,Yes,Always,Always,Most of the time,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Dereferencing a raw pointer",,About half the time,"ManuallyDrop,UnsafeCell",,,,,,"Self-referential structs,mem::transmute",,UnsafeCell,,Always,Both,,Use safe,Use safe,Somewhat easy,,Sometimes,Always,No,Yes,,,,,,Most of the time,Most of the time,"C,C#,Go,JavaScript",,I generate bindings using a tool,Definitely yes,Probably yes,Unsure,,"Box,Rc,Arc",,Never,Yes,Yes,About half the time,Sometimes,"cbindgen,wasm-bindgen,PyO3,Other",napi-rs,,,Extremely easy,,,"LeakSanitizer (LSAN),Miri,Valgrind",,Daily,"Use after free,Double free,Memory leak",,Always,Sometimes,cargo-audit,Neither likely nor unlikely,,,Always,"Memory leak,Use-after-free",,,,,Somewhat negatively,Neither positively nor negatively,Most of the time,Strongly agree,18-29,Some college,Man,,"Industry,Open-source contributor",,Reddit (/r/rust),,No,No,No,,
100,717,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,10,2,2,Monthly,No,No,Monthly,"Game development,Data structures and language-level primitives",,"Game development,Data structures and language-level primitives",,Yes,No,No,Extremely difficult,"MaybeUninit,ManuallyDrop,Rc,Arc,Cell,Mutex",,"Accessing the fields of a union type,Calling foreign functions,Intrinsics,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,,Most of the time,Sometimes,Atomics,,No,Sometimes,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Intrinsics,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,About half the time,MaybeUninit,,,,,,,,,,,,,Unsure,,Neither easy nor difficult,,Sometimes,Sometimes,No,Yes,,,,,,Sometimes,About half the time,"C,C++",,I do not write or generate bindings,Might or might not,Might or might not,Unsure,,,,Sometimes,Unsure,Unsure,Unsure,Unsure,,,,,,,,Miri,,Monthly,"Out-of-bounds access,Use after free,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Never,,Neither likely nor unlikely,,,Never,,,,The Rust Community Discord,,Extremely negatively,Unsure,Sometimes,Somewhat agree,30-39,Bachelor's degree,Man,,Industry,,Reddit (/r/rust),,No,Yes,No,,
100,875,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,10,6,6,Weekly,Yes,Yes,Weekly,"Web applications - Backend,Database systems,Networking & distributed systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Database systems,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Arc,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,System calls,Inline assembly,Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,Most of the time,,,,Sometimes,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,System calls,Inline assembly,Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Manual memory allocation,Cyclic aliasing patterns,Self-referential structs,mem::transmute,In-place initialization or updates",,MaybeUninit,,Always,Both,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Always,Always,Most of the time,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Loom,Miri",,Monthly,"Out-of-bounds access,Violation of stacked or tree borrows,Memory leak",,Always,About half the time,"cargo-deny,cargo-vet",Somewhat likely,"Slow performance,Lack of support for foreign function calls",,Most of the time,"Stacked Borrows Violation,Tree Borrows Violation,Null pointer dereference,Memory leak,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Neither easy nor difficult,The Rust Community Discord,,Extremely positively,Somewhat positively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,The Rust Programming Language Community Discord,,Yes,Yes,No,,Amazon
100,935,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,4,0,0,Weekly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Static analysis",,"Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Static analysis",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Arc,Cell,UnsafeCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,Always,,,,Unsure,Yes,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,Sometimes,"MaybeUninit,UnsafeCell",,"Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates",,ManuallyDrop,,"Manual memory allocation,Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,"MaybeUninit,UnsafeCell",,Most of the time,Both,,Use safe,Use safe,Somewhat easy,"allow(improper_ctypes),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,About half the time,Most of the time,Most of the time,"C,Java",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,Box,,Never,Unsure,Unsure,About half the time,About half the time,bindgen,,Locally,,,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),Valgrind",,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access",,Always,Sometimes,cargo-geiger,Somewhat likely,"Slow performance,Lack of support for foreign function calls,Lack of support for inline assembly",,Most of the time,"Stacked Borrows Violation,Tree Borrows Violation,Null pointer dereference,Data race,Memory leak,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,The Rust Community Discord,,Somewhat negatively,Unsure,Unsure,Strongly agree,18-29,High school diploma/GED,Man,,"Open-source contributor,Rust project member",,The Rust Programming Language Community Discord,,No,Yes,Yes,Yes,
100,444,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,10,6,6,Monthly,Yes,Yes,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Game development,Serialization & deserialization",,Game development,,Yes,No,No,Somewhat difficult,"MaybeUninit,Pin,Box,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,,About half the time,Sometimes,,,,,No,No,Other,"I was wrapping FFI functions, e.g. on bare metal [hardware-based emulator]  or creating a static library that was linked into a C++ application",,,,,,,,,,,,,,,,,Use safe,,Extremely easy,,Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,"C,C++",,I write bindings manually,Probably yes,Probably yes,No,,Box,,Never,No,Unsure,Sometimes,Unsure,,,,,,,,"AddressSanitizer (ASAN),ThreadSanitizer (TSAN),Valgrind",,Monthly,Use after free,,Sometimes,Sometimes,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Unsure,Always,Strongly agree,18-29,Some college,Non-binary,,Open-source contributor,,The Rust Programming Language Community Discord,,No,No,No,,
100,1934,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,7,1,1,Monthly,Yes,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives",,"Embedded systems,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,No,Neither easy nor difficult,,,"Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Always,Sometimes,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Most of the time,,,,,,,"Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,,,Most of the time,Both,,Use safe,Unsure,Somewhat easy,,Sometimes,Most of the time,No,Yes,,,,,,Sometimes,Always,"Assembly,C,C++",,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,Unsure,,,,Never,Unsure,Unsure,Unsure,Unsure,"bindgen,cbindgen",,Locally,,,,,"Miri,Valgrind",,Never,"Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Null pointer dereference,Memory leak",,Sometimes,Never,"cargo-audit,cargo-geiger",Somewhat likely,,,Sometimes,"Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,,The Rust Community Discord,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Some college,Man,,Open-source contributor,,The Rust Programming Language Community Discord,,Yes,Yes,No,,Amazon
100,652,TRUE,anonymous,0.400000006,,0,0,,Yes,Yes,Yes,3,Yes,12,1,4,Monthly,No,No,Monthly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box",,"Implementing a custom allocator,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Always,Most of the time,,,,Never,No,Yes,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Calling unsafe functions written in Rust",,About half the time,MaybeUninit,,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,UnsafeCell",,,,,,,,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,No,Yes,,,,,,Sometimes,About half the time,"C,C++",,I do not write or generate bindings,Probably yes,Definitely yes,No,,Box,,Never,No,Yes,Sometimes,Most of the time,,,,,,,,"cargo fuzz,libFuzzer,Miri",,Monthly,"Use after free,Double free,Violation of stacked or tree borrows",,Most of the time,Sometimes,"cargo-deny,cargo-geiger",Somewhat likely,"Slow performance,Lack of support for foreign function calls",,Most of the time,"Stacked Borrows Violation,Tree Borrows Violation,Data race,Out-of-bounds access,Using uninitialized memory",,Neither easy nor difficult,The Rust Community Discord,,Somewhat negatively,Somewhat positively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,The Rust Programming Language Community Discord,,Yes,No,No,,Amazon
100,593,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,7,3,3,Weekly,No,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems,Game development,Serialization & deserialization",,,,No,No,No,Extremely easy,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,Cell,UnsafeCell",,"Manual memory allocation,Accessing the fields of a union type,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,Most of the time,,,,Never,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Self-referential structs,mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Use safe,,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,No,Yes,,,,,,Always,Most of the time,,,,,,,,,,,,,,,,,,,,,,Miri,,Never,"Using uninitialized memory,Incorrectly declared bindings to intrinsics or foreign functions.,Integer overflow,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Always,Never,,Somewhat unlikely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Always,"Stacked Borrows Violation,Tree Borrows Violation,Null pointer dereference,Data race,Memory leak,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,The Rust Community Discord,,Neither positively nor negatively,Neither positively nor negatively,Always,Strongly agree,18-29,Bachelor's degree,Man,,"Academia,Open-source contributor",,The Rust Programming Language Community Discord,,No,No,No,,
100,681,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,7,0,2,Daily,Yes,Yes,Daily,"Web applications - Frontend,Web applications - Backend,Web browsers,Interpreters & runtime systems,Data structures and language-level primitives",,"Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,Rc,RefCell,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Always,Most of the time,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,mem::transmute,Implementing an unsafe trait,Declaring an unsafe trait",,About half the time,,,,,,,"Accessing the fields of a union type,Self-referential structs,Dereferencing a raw pointer",,"MaybeUninit,UnsafeCell",,Never,Small-scale optimizations,,Use safe,Use safe,Somewhat difficult,,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,About half the time,Sometimes,Sometimes,About half the time,Sometimes,"C,C++",,I generate bindings using a tool,Might or might not,Probably yes,Yes,Both,"Box,Rc",,Sometimes,No,Yes,Always,Sometimes,"bindgen,CXX",,Locally,,,,,,,Weekly,"Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference",,Sometimes,Never,,Neither likely nor unlikely,,,,,,,The Rust Community Discord,,Somewhat negatively,Extremely negatively,Most of the time,Strongly agree,18-29,High school diploma/GED,Man,,Open-source contributor,,The Rust Programming Language Community Discord,,No,Yes,No,,
100,3488,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,15,3,5,Weekly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Arc,Cell,UnsafeCell,Mutex,Other",SyncUnsafeCell,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait,Other",#[no_mangle],Yes,Always,Always,About half the time,"Architecture-specific or SIMD intrinsics,Other",assume/likely/unlikely hints,No,Sometimes,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Calling foreign functions,System calls,Inline assembly,Global assembly,mem::transmute,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell,Other",SyncUnsafeCell,,,,,"Manual memory allocation,Accessing the fields of a union type,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates",,UnsafeCell,,About half the time,Small-scale optimizations,,Use safe,Use safe,Neither easy nor difficult,"forbid(unsafe_code),allow(improper_ctypes),unsafe_block_in_unsafe_fn",About half the time,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,About half the time,Most of the time,"C,JavaScript,Python",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Yes,Both,"Box,Other",Vec,Sometimes,Yes,Yes,About half the time,About half the time,"bindgen,cbindgen,wasm-bindgen,PyO3",,Locally,,Somewhat easy,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,Loom,Miri,Valgrind,Other",AFL++,Yearly,"Use after free,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,Violation of stacked or tree borrows,Memory leak,Other",Type confusion (unsound type punning),Most of the time,Sometimes,"cargo-audit,cargo-geiger",Somewhat likely,"Lack of support for foreign function calls,My unsafe code is in violation of Stacked Borrows",,Most of the time,"Stacked Borrows Violation,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,"The Rust Community Discord,Other",IRC (rip),Extremely negatively,Somewhat negatively,About half the time,Neither agree nor disagree,18-29,Master's degree,Man,,Open-source contributor,,The Rust Programming Language Community Discord,,Yes,Yes,No,,Amazon
100,513,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,3,0,0,Monthly,No,No,Less than once a year,"Web applications - Frontend,Web applications - Backend,Data structures and language-level primitives",,Data structures and language-level primitives,,No,Yes,No,Somewhat difficult,,,Dereferencing a raw pointer,,No,,,,,,,,,,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,Dereferencing a raw pointer,,,,,,,,,,,Use unsafe,Use unsafe,Neither easy nor difficult,,Never,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Weekly,,,Always,Never,,Extremely likely,,,,,,,,,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,Open-source contributor,,Reddit (/r/rust),,No,No,No,,
100,295825,TRUE,anonymous,1,,0,75,,Yes,Yes,Yes,9,Yes,10,0,0,Monthly,Yes,No,Yearly,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,UnsafeCell",,"Calling foreign functions,System calls,Mutable static variables,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,Most of the time,Always,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls,mem::transmute,Calling unsafe functions written in Rust",,About half the time,,,,,,,,,,,,,,Unsure,Use safe,Neither easy nor difficult,"forbid(unsafe_code),deny(unsafe_code)",Most of the time,Most of the time,No,Yes,,,,,,Sometimes,About half the time,"C,C++",,I generate bindings using a tool,Probably yes,Probably yes,Unsure,,,,Never,Unsure,Yes,Unsure,Sometimes,"wasm-bindgen,CXX,PyO3",,,,Somewhat easy,,,"cargo fuzz,Miri,Valgrind",,Monthly,"Deallocating memory with an incorrect Layout,Out-of-bounds access,Use after free,Failure to meet an application's functional requirements.,External runtime or hardware interface does not behave according to its written specification.,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Sometimes,"cargo-audit,cargo-deny",Somewhat likely,"Slow performance,Lack of support for foreign function calls",,About half the time,Use-after-free,,,,,Somewhat negatively,Unsure,Sometimes,Neither agree nor disagree,18-29,Bachelor's degree,Prefer not to disclose,,Industry,,Reddit (/r/rust),,Yes,No,No,,Amazon
100,787,TRUE,anonymous,0.899999976,,,,,Yes,Yes,Yes,3,Yes,22,1,2,Monthly,No,No,Less than once a year,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Game development,Serialization & deserialization",,Yes,No,Yes,Somewhat difficult,Other,None of the above,Implementing an unsafe trait,,No,,,,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Implementing an unsafe trait,,Unsure,Other,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),deny(unsafe_code)",Never,Never,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Valgrind,,Yearly,,,Never,Never,"cargo-update,cargo-audit",Extremely unlikely,,,,,,,,,Somewhat negatively,Neither positively nor negatively,Always,Strongly agree,30-39,Master's degree,Man,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
100,1340,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3.5,Yes,10,5,8,Monthly,Yes,Yes,Monthly,"Operating systems,Web applications - Backend,Networking & distributed systems,Game development,Serialization & deserialization,Static analysis",,"Operating systems,Game development",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,Box,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Sometimes,Most of the time,,,,,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,About half the time,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,,,Always,About half the time,Sometimes,Most of the time,Sometimes,"Assembly,C,C++",,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,Yes,Written manually,Box,,Never,No,Yes,Most of the time,Sometimes,"bindgen,wasm-bindgen,CXX",,Locally,,Neither easy nor difficult,,,Miri,,Monthly,"Out-of-bounds access,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Unaligned memory access",,Most of the time,Sometimes,,Neither likely nor unlikely,Lack of support for foreign function calls,,Never,,,,GitHub,,Neither positively nor negatively,Somewhat positively,Most of the time,Somewhat disagree,18-29,Bachelor's degree,Non-binary,,"Open-source contributor,Other",Hobbyist,"""This Week in Rust""",,Yes,No,No,,Amazon
100,18,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1038,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,7,Yes,15,2,1,Monthly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Web browsers,Interpreters & runtime systems",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Web browsers,Interpreters & runtime systems",,Yes,No,Yes,Somewhat easy,"MaybeUninit,Other",raw pointers,"Calling foreign functions,Inline assembly,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Always,About half the time,,,,,,,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Inline assembly,Calling unsafe functions written in Rust",,Most of the time,MaybeUninit,,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer",,"ManuallyDrop,UnsafeCell",,,,,,,,,Use safe,Use safe,Neither easy nor difficult,,Never,Always,No,Yes,,,,,,Most of the time,Sometimes,"C,Python",,I generate bindings using a tool,Probably yes,Probably yes,No,,,,Never,Yes,No,Sometimes,Sometimes,"bindgen,wasm-bindgen,PyO3",,Locally,,Somewhat difficult,,,Valgrind,,Yearly,"Using uninitialized memory,External runtime or hardware interface does not behave according to its written specification.,Null pointer dereference",,About half the time,Never,"cargo-update,cargo-audit",Somewhat likely,,,,,,,,,Somewhat negatively,Unsure,Most of the time,Strongly agree,18-29,High school diploma/GED,Man,,Industry,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,346,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,6647,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,5,Yes,11,6,1,Monthly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Static analysis",,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Static analysis",,Yes,No,No,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box",,"Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Always,Sometimes,,,,Sometimes,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,Sometimes,MaybeUninit,,,,,,,,,,,,,Use safe,,Somewhat easy,,Sometimes,Most of the time,No,No,,,,,,,,,,I do not write or generate bindings,Definitely yes,Definitely yes,No,,Box,,Never,Unsure,Unsure,Unsure,Unsure,,,,,,"Prusti,Creusot",,"Loom,Miri",,Never,Violation of stacked or tree borrows,,Always,Never,,Somewhat likely,,,Sometimes,"Stacked Borrows Violation,Data race,Unaligned memory access,Using uninitialized memory",,Neither easy nor difficult,,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,18-29,High school diploma/GED,Non-binary,,"Academia,Open-source contributor",,"""This Week in Rust""",,No,No,No,,
100,505,TRUE,anonymous,1,,0,15,,Yes,Yes,Yes,6,Yes,18,6,3,Yearly,No,No,Yearly,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development,Serialization & deserialization,Static analysis",,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development,Static analysis",,Yes,Yes,Yes,Somewhat difficult,,,"mem::transmute,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Calling unsafe functions written in Rust,,Sometimes,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,,Always,Always,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Never,,,Most of the time,Sometimes,cargo-update,Somewhat likely,,,,,,,,,Somewhat negatively,Unsure,Most of the time,Neither agree nor disagree,30-39,High school diploma/GED,Non-binary,,"Industry,Open-source contributor",,"""This Week in Rust""",,No,No,No,,
100,1167,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,3,Yes,20,20,10,Weekly,Yes,Yes,Weekly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Manufacturing,Data structures and language-level primitives",,Embedded systems,,No,Yes,Yes,Somewhat difficult,"MaybeUninit,Mutex",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Most of the time,About half the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Most of the time,Always,No,Yes,,,,,,Most of the time,Most of the time,"Assembly,C",,I write bindings manually,Might or might not,Probably yes,No,,,,Most of the time,Yes,Yes,About half the time,Sometimes,,,,,,,,,,Weekly,"Creating a zero-size allocation with an allocator that requires nonzero size,Out-of-bounds access,Null pointer dereference,Integer overflow,Unaligned memory access",,Sometimes,Sometimes,"cargo-update,cargo-audit",Somewhat likely,,,,,,,"GitHub,The Rust Community Discord",,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,50-59,Bachelor's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,No,No,No,,
100,73,TRUE,anonymous,1,,0,0,,Yes,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,777,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,12,1,1,Monthly,Yes,Yes,Monthly,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Inline assembly,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,Most of the time,,,,Never,No,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Mutable static variables,Pointer arithmetic,Calling unsafe functions written in Rust",,"MaybeUninit,UnsafeCell",,Always,Both,,Use unsafe,Use unsafe,Somewhat difficult,deny(unsafe_code),Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,About half the time,Always,About half the time,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),Miri,UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"Using uninitialized memory,Out-of-bounds access,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Sometimes,"cargo-audit,cargo-deny",Somewhat unlikely,Lack of support for foreign function calls,,Sometimes,"Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,,"Reddit (/r/rust),GitHub,The Rust Community Discord",,Somewhat negatively,Somewhat negatively,Sometimes,Somewhat agree,18-29,Bachelor's degree,Non-binary,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,672,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,8,Yes,15,12,12,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,Data structures and language-level primitives,,No,No,Yes,Extremely easy,"MaybeUninit,ManuallyDrop,Pin,Box,Cell,UnsafeCell,OnceCell",,"Accessing the fields of a union type,System calls,Inline assembly,Global assembly,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,Most of the time,Always,About half the time,,,,Most of the time,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"System calls,Inline assembly,Global assembly",,"ManuallyDrop,UnsafeCell",,"Accessing the fields of a union type,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,About half the time,Large-scale components purpose-built for performance.,,Unsure,Use unsafe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,About half the time,Yes,Yes,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,Miri,,Yearly,"Out-of-bounds access,Violation of stacked or tree borrows",,Sometimes,Never,,Extremely unlikely,Lack of support for inline assembly,,Never,,,,The Rust Community Discord,,Extremely negatively,Unsure,Most of the time,Strongly agree,30-39,Bachelor's degree,Man,,Open-source contributor,,"Reddit (/r/rust),""This Week in Rust""",,No,No,No,,
100,2586,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,12,0,2,Yearly,No,No,Yearly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing",,Networking & distributed systems,,No,Yes,Yes,Somewhat difficult,"ManuallyDrop,Box",,"Calling foreign functions,Dereferencing a raw pointer",,Yes,,Most of the time,Sometimes,,,,,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Dereferencing a raw pointer",,Most of the time,ManuallyDrop,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,Most of the time,No,Yes,,,,,,Always,Unsure,"C#,Python,TypeScript",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Yes,Written manually,Box,,Never,No,Yes,Always,Unsure,"Emscripten,PyO3",,,,,,,"AddressSanitizer (ASAN),ThreadSanitizer (TSAN)",,Weekly,"Use after free,Null pointer dereference,Memory leak",,Always,Sometimes,cargo-deny,Somewhat likely,,,,,,,,,Neither positively nor negatively,Unsure,Sometimes,Strongly agree,30-39,Master's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1049,TRUE,anonymous,1,,0,75,,Yes,Yes,Yes,2,Yes,7,7,6,Weekly,Yes,Yes,Monthly,"Embedded systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Static analysis",,"Embedded systems,Interpreters & runtime systems",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,Pin,Box,RefCell,Cell,UnsafeCell",,"Accessing the fields of a union type,Intrinsics,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Most of the time,About half the time,"Atomics,Architecture-specific or SIMD intrinsics",,Yes,,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,About half the time,"ManuallyDrop,UnsafeCell",,,,,,"Accessing the fields of a union type,Intrinsics,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,"MaybeUninit,UnsafeCell",,About half the time,Large-scale components purpose-built for performance.,,Use safe,Use safe,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,Sometimes,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Miri,Valgrind",,Yearly,"Use after free,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Memory leak",,Always,Never,,Somewhat likely,,,Always,"Stacked Borrows Violation,Null pointer dereference,Memory leak,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat difficult,"Reddit (/r/rust),The Rust Programming Language Forums",,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat disagree,30-39,Bachelor's degree,Man,,Open-source contributor,,"""This Week in Rust""",,No,Yes,No,,
100,623,TRUE,anonymous,0.100000001,,0,75,,Yes,Yes,Yes,2,Yes,10,3,2,Weekly,Yes,Yes,Weekly,"Interpreters & runtime systems,Data structures and language-level primitives,Static analysis",,"Interpreters & runtime systems,Data structures and language-level primitives,Static analysis",,No,Yes,Yes,Neither easy nor difficult,,,"Manual memory allocation,Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Most of the time,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,About half the time,,,,,,,,,,,,,,Unsure,Unsure,Neither easy nor difficult,,Sometimes,Sometimes,Yes,No,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Sometimes,Sometimes,,,"C,Other",Rust,I generate bindings using a tool,Probably not,Probably yes,Unsure,,,,Never,No,Yes,Always,Sometimes,bindgen,,Locally,,,Other,crux-mir,"AddressSanitizer (ASAN),Miri,UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"Using uninitialized memory,Memory leak",,About half the time,Sometimes,,Somewhat likely,Lack of support for foreign function calls,,Never,,,,,,Somewhat negatively,Somewhat negatively,Most of the time,Somewhat agree,18-29,Bachelor's degree,Non-binary,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,No,No,,Amazon
100,871,TRUE,anonymous,,,0,0,,Yes,Yes,Yes,4,Yes,7,5,1,Weekly,No,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Game development,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"Pin,Box,Arc,OnceCell,Mutex",,"Calling foreign functions,System calls,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,About half the time,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls",,Most of the time,,,,,,,,,,,,,,Unsure,Use unsafe,Neither easy nor difficult,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Never,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Most of the time,Sometimes,Always,Most of the time,"C,C++",,I generate bindings using a tool,Might or might not,Probably yes,No,,Box,,Never,No,Yes,Most of the time,Sometimes,"bindgen,cbindgen",,In CI,,,Kani,,"AddressSanitizer (ASAN),cargo fuzz,Miri",,Less than once a year,"Using uninitialized memory,Out-of-bounds access",,Most of the time,Sometimes,cargo-audit,Extremely likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Sometimes,"Stacked Borrows Violation,Data race,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,Other,Other Discord Servers,Neither positively nor negatively,Somewhat positively,Most of the time,Somewhat agree,18-29,High school diploma/GED,Man,,Open-source contributor,,The Rust Programming Language Forums,,Yes,Yes,No,,Amazon
100,1593,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,15,14,13,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Database systems,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,Cell,UnsafeCell,Mutex",,"Manual memory allocation,Calling foreign functions,System calls,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,Always,Sometimes,,,,About half the time,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Calling foreign functions,System calls,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,,,,,"System calls,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,UnsafeCell",,Sometimes,Both,,Unsure,Unsure,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Sometimes,Most of the time,C,,I write bindings manually and generate bindings using a tool,Probably yes,Might or might not,Yes,Generated by a tool,"Box,Arc",,Sometimes,Yes,Yes,Sometimes,Sometimes,bindgen,,Locally,,,,,Miri,,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Sometimes,,Somewhat likely,Other,Miri tests are more time consuming to develop. ,Sometimes,"Stacked Borrows Violation,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat difficult,GitHub,,Somewhat negatively,Neither positively nor negatively,Most of the time,Neither agree nor disagree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,859,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,5,Yes,20,5,5,Yearly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Networking & distributed systems,Serialization & deserialization",,No,Yes,No,Somewhat easy,Pin,,"Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Yes,,Most of the time,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Calling unsafe functions written in Rust",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,unsafe_block_in_unsafe_fn,Sometimes,Always,No,Yes,,,,,,Most of the time,Most of the time,"C,C++,Java",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Yes,Both,,,Never,Unsure,Yes,About half the time,About half the time,"bindgen,cbindgen,CXX,PyO3",,Locally,,,,,"AddressSanitizer (ASAN),ThreadSanitizer (TSAN)",,Yearly,"Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Null pointer dereference",,About half the time,Never,,Extremely likely,,,,,,,,,Neither positively nor negatively,Unsure,Most of the time,Somewhat agree,30-39,Bachelor's degree,Man,,Industry,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,979,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,20,2,4,Monthly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Game development,Manufacturing,Data structures and language-level primitives",,"Embedded systems,Web applications - Backend,Data structures and language-level primitives",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,Pin,UnsafeCell,OnceCell,LazyCell",,"Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,Most of the time,Always,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,deny(unsafe_code),Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Most of the time,Always,About half the time,Most of the time,About half the time,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,,,Sometimes,No,Unsure,Most of the time,Unsure,bindgen,,Locally,,,,,,,Monthly,"Failure to meet an application's functional requirements.,Unaligned memory access",,About half the time,Sometimes,"cargo-audit,cargo-deny",Somewhat likely,,,,,,,GitHub,,Neither positively nor negatively,Unsure,Most of the time,Somewhat disagree,30-39,Master's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,No,No,,Amazon
100,914,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,7,0,0,Weekly,Yes,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Serialization & deserialization",,"Web applications - Backend,Database systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Serialization & deserialization",,No,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,Always,Always,,,,Sometimes,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Sometimes,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Unsure,Use safe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Never,Always,Most of the time,"C,C++,JavaScript,TypeScript,Other",Lua,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,No,,Box,,Never,No,No,Most of the time,Always,"bindgen,wasm-bindgen",,Locally,,Somewhat easy,,,Miri,,Never,"Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Null pointer dereference,Violation of stacked or tree borrows,Memory leak",,Sometimes,Never,,Extremely likely,Lack of support for foreign function calls,,About half the time,"Stacked Borrows Violation,Null pointer dereference,Data race,Memory leak,Use-after-free,Out-of-bounds access,Using uninitialized memory",,Somewhat difficult,The Rust Community Discord,,Somewhat negatively,Somewhat positively,Most of the time,Somewhat agree,Prefer not to answer,Some high school,Non-binary,,Open-source contributor,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,990,TRUE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,8,Yes,25,20,20,Less than once a year,Yes,No,Less than once a year,"Embedded systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,Pin",,"Manual memory allocation,Calling foreign functions,System calls,Inline assembly,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,About half the time,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,Never,,,"Manual memory allocation,Mutable static variables,Dereferencing a raw pointer,Implementing an unsafe trait",,MaybeUninit,,"Manual memory allocation,Inline assembly,Mutable static variables,Dereferencing a raw pointer",,MaybeUninit,,Always,Both,,Use safe,Use safe,Extremely easy,deny(unsafe_code),About half the time,Always,No,Yes,,,,,,Sometimes,Always,C,,I write bindings manually and generate bindings using a tool,Probably not,Probably yes,No,,,,Sometimes,Yes,Yes,Sometimes,Sometimes,bindgen,,Locally,,,,,"cargo fuzz,Valgrind",,Less than once a year,"Use after free,Null pointer dereference",,Always,Sometimes,cargo-audit,Extremely likely,,,,,,,"The Rust Programming Language Forums,GitHub",,Somewhat negatively,Neither positively nor negatively,Always,Strongly disagree,40-49,Master's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,No,No,,Amazon
100,1490,TRUE,anonymous,1,,0,25,,Yes,Yes,Yes,4,Yes,6,4,0,Yearly,Yes,No,Yearly,"Operating systems,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Serialization & deserialization,Static analysis",,"Non-JIT Compilation,Interpreters & runtime systems,Serialization & deserialization,Static analysis",,Yes,No,Yes,Somewhat easy,,,"Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Always,Most of the time,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,mem::transmute",,Most of the time,,,,,,,Calling unsafe functions written in Rust,,,,Sometimes,Small-scale optimizations,,Use safe,Unsure,Somewhat easy,,Never,Most of the time,No,Yes,,,,,,Always,Most of the time,"C,OCaml",,I generate bindings using a tool,Might or might not,Definitely yes,No,,,,Never,Unsure,No,Unsure,Most of the time,"cbindgen,CXX",,,,,,,"cargo fuzz,Miri",,Monthly,"Using uninitialized memory,Null pointer dereference",,Always,Never,"cargo-audit,cargo-geiger",Somewhat likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Sometimes,Null pointer dereference,,,GitHub,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,"Academia,Open-source contributor",,"""This Week in Rust""",,No,No,No,,
100,1261,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,6,1,2,Monthly,No,No,Less than once a year,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Web browsers,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Somewhat difficult,MaybeUninit,,"Accessing the fields of a union type,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"Mutable static variables,mem::transmute,Calling unsafe functions written in Rust",,MaybeUninit,,"Accessing the fields of a union type,mem::transmute,Calling unsafe functions written in Rust",,MaybeUninit,,Never,Unsure,,Unsure,Unsure,Somewhat easy,forbid(unsafe_code),Never,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Never,Memory leak,,Most of the time,Never,cargo-audit,Somewhat likely,,,,,,,,,Somewhat negatively,Somewhat negatively,Most of the time,Neither agree nor disagree,18-29,Prefer not to answer,Man,,,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1884,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,30,30,27,Daily,No,No,Monthly,Embedded systems,,Embedded systems,,No,Yes,Yes,Somewhat easy,UnsafeCell,,"Intrinsics,Inline assembly,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Always,Always,Most of the time,Architecture-specific or SIMD intrinsics,,No,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Inline assembly,Global assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Unsure,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,forbid(unsafe_code),Sometimes,Always,No,Yes,,,,,,Most of the time,About half the time,,,,,,,,,,,,,,,,,,,,,,cargo fuzz,,Weekly,,,Most of the time,Sometimes,,Neither likely nor unlikely,,,,,,,,,Neither positively nor negatively,Unsure,Sometimes,Strongly disagree,40-49,Master's degree,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
100,80,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,3501,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,23,17,17,Daily,Yes,Yes,Daily,"Operating systems,Image & Data processing,Game development,Data structures and language-level primitives",,"Image & Data processing,Data structures and language-level primitives",,No,Yes,No,Somewhat easy,"MaybeUninit,Box,Arc,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,About half the time,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Implementing a custom allocator,Inline assembly,Self-referential structs,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Most of the time,Both,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Never,Most of the time,No,Yes,,,,,,Always,Sometimes,"Assembly,C,C++",,I write bindings manually,Probably yes,Probably yes,Yes,Both,Box,,Never,No,Yes,Always,Sometimes,,,,,,,,"AddressSanitizer (ASAN),LeakSanitizer (LSAN),Valgrind",,Less than once a year,"Out-of-bounds access,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,Violation of stacked or tree borrows",,Always,Never,,Neither likely nor unlikely,,,,,,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub",,Somewhat negatively,Unsure,Most of the time,Somewhat agree,30-39,PhD,Man,,"Academia,Open-source contributor",,"""This Week in Rust""",,No,Yes,No,,
100,31,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,13,TRUE,anonymous,1,,0,75,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1807,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,9,Yes,22,15,15,Yearly,Yes,No,Yearly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Serialization & deserialization,Static analysis",,No,Yes,Yes,Somewhat difficult,"Box,RefCell,Cell,UnsafeCell",,"Manual memory allocation,Calling foreign functions,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Sometimes,Sometimes,Other,"assume,likely,unlikely",No,,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Calling foreign functions,Inline assembly,Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Sometimes,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Manual memory allocation,Self-referential structs,Mutable static variables",,,,"Manual memory allocation,Calling foreign functions,Intrinsics,Cyclic aliasing patterns,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,ManuallyDrop,,Never,Both,,Unsure,Unsure,Neither easy nor difficult,allow(improper_ctypes),Sometimes,Sometimes,No,No,,,,,,,,"Assembly,C,C++,Other",Objective-C,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,Arc,,Sometimes,No,Yes,Most of the time,Unsure,bindgen,,Other,varies,,,,AddressSanitizer (ASAN),,Yearly,"Double free,Failure to meet an application's functional requirements.",,Sometimes,Never,,Somewhat unlikely,,,,,,,,,Somewhat negatively,Somewhat negatively,Sometimes,Somewhat agree,30-39,Some college,Man,,Open-source contributor,,The Rust Programming Language Forums,,No,No,No,,
100,2786,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,8,4,6,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Game development",,No,Yes,No,Somewhat difficult,"ManuallyDrop,Box,UnsafeCell,OnceCell",,"Implementing a custom allocator,Calling foreign functions,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Most of the time,Always,About half the time,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Implementing a custom allocator,Calling foreign functions,Inline assembly,Mutable static variables,Calling unsafe functions written in Rust",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,About half the time,Most of the time,No,No,,,,,,,,"Assembly,C,Other",elixir,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,"Box,Arc",,Sometimes,No,Yes,Unsure,About half the time,"bindgen,wasm-bindgen,Other",rustler,Other,generate in a build script,Somewhat easy,,,Valgrind,,Yearly,"Out-of-bounds access,Memory leak",,Most of the time,Sometimes,cargo-update,Extremely likely,,,,,,,,,Unsure,Extremely positively,Most of the time,Strongly agree,18-29,Bachelor's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,2146,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,8,0,2,Weekly,No,No,Monthly,"Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Database systems,,No,No,Yes,Somewhat difficult,"MaybeUninit,Pin,Box,UnsafeCell",,"Implementing a custom allocator,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Yes,Most of the time,Most of the time,Sometimes,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,mem::transmute,Calling unsafe functions written in Rust",,Sometimes,MaybeUninit,,,,,,"Implementing a custom allocator,Calling foreign functions,mem::transmute",,MaybeUninit,,About half the time,Both,,Unsure,Unsure,Somewhat difficult,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Never,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Most of the time,Always,Sometimes,Sometimes,Unsure,"C,C++",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Unsure,,"Box,Rc,Arc",,Sometimes,No,No,Most of the time,Most of the time,"CXX,Other",autocxx,,,,,,"AddressSanitizer (ASAN),Loom,Miri",,Weekly,"Unwinding across foreign stack frames without using an -unwind ABI,Unaligned memory access",,About half the time,Never,cargo-audit,Neither likely nor unlikely,Slow performance,,Always,,,,,,Somewhat negatively,Neither positively nor negatively,About half the time,Somewhat disagree,18-29,Bachelor's degree,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
100,48,TRUE,anonymous,1,,0,0,,No,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,664,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,10,6,6,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,Mutex,,"Manual memory allocation,System calls,Intrinsics,Inline assembly,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic",,Yes,,,,Architecture-specific or SIMD intrinsics,,No,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Inline assembly,Mutable static variables,Dereferencing a raw pointer",,About half the time,,,,,,,"Inline assembly,Dereferencing a raw pointer,Pointer arithmetic",,,,Most of the time,Both,,Unsure,Use safe,Somewhat difficult,,Never,About half the time,No,Yes,,,,,,About half the time,Sometimes,,,,,,,,,,,,,,,,,,,,,,Valgrind,,Yearly,"Out-of-bounds access,Failure to meet an application's functional requirements.,Unaligned memory access",,Most of the time,Never,,Somewhat unlikely,,,,,,,,,Somewhat negatively,Somewhat negatively,Sometimes,Somewhat agree,18-29,Master's degree,Man,,"Industry,Academia,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1577,TRUE,anonymous,0.899999976,,0,20,,Yes,Yes,Yes,5,Yes,20,5,5,Weekly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Manufacturing,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Serialization & deserialization",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,Pin,UnsafeCell,LazyCell",,"Manual memory allocation,Calling foreign functions,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,Yes,Sometimes,Most of the time,About half the time,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,No,,,,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,"Calling foreign functions,mem::transmute,Pointer arithmetic",,"MaybeUninit,UnsafeCell",,,,,,,,,Use safe,Use safe,Neither easy nor difficult,deny(unsafe_code),Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,"C,C++,Go,Python",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Yes,Both,,,Most of the time,No,No,Most of the time,Most of the time,"bindgen,cbindgen,wasm-bindgen,CXX,PyO3",,Locally,,Somewhat difficult,Kani,,"AddressSanitizer (ASAN),cargo fuzz,MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,Unaligned memory access,Memory leak",,Sometimes,About half the time,"cargo-update,cargo-audit,cargo-deny",Somewhat likely,Lack of support for inline assembly,,Sometimes,"Data race,Unaligned memory access",,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub",,Somewhat negatively,Unsure,Most of the time,Somewhat agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,"Reddit (/r/rust),""This Week in Rust""",,Yes,Yes,No,,Amazon
100,43,TRUE,anonymous,1,,0,0,,Yes,Yes,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,30,TRUE,anonymous,,,,,,Yes,Yes,Yes,2,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,2249,TRUE,anonymous,0.899999976,,0,25,,Yes,Yes,Yes,10,Yes,20,15,10,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Serialization & deserialization,Static analysis",,"Embedded systems,Interpreters & runtime systems,Serialization & deserialization",,Yes,Yes,Yes,Somewhat easy,"RefCell,Cell",,"Implementing a custom allocator,Calling foreign functions,Intrinsics,Inline assembly,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,Always,Architecture-specific or SIMD intrinsics,,No,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Implementing a custom allocator,Calling foreign functions,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,,,,,,,Calling unsafe functions written in Rust,,,,Most of the time,Small-scale optimizations,,Unsure,Unsure,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Most of the time,Most of the time,Unsure,"C,Other",WebAssembly,I write bindings manually,Definitely yes,Might or might not,Unsure,,,,Never,No,No,Always,Most of the time,,,,,,Creusot,,"cargo fuzz,Miri",,Never,"Out-of-bounds access,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Unaligned memory access",,Most of the time,Never,cargo-audit,Somewhat likely,Lack of support for foreign function calls,,Most of the time,,,,The Rust Programming Language Forums,,Somewhat negatively,Unsure,Unsure,Somewhat agree,30-39,PhD,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
100,1706,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,10,2,3,Weekly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Frontend,Web applications - Backend,Non-JIT Compilation,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,RefCell,UnsafeCell",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,Sometimes,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,No,Sometimes,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Calling foreign functions,Intrinsics,Inline assembly,mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,"deny(unsafe_code),const_raw_ptr_deref",Most of the time,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,Sometimes,Most of the time,"C,C++,JavaScript,Python",,I generate bindings using a tool,Definitely not,Definitely yes,Yes,Written manually,"Box,Arc",,Sometimes,No,No,Sometimes,Sometimes,"bindgen,wasm-bindgen,Emscripten,PyO3",,Other,Generate them in a build.rs file,Somewhat easy,,,"cargo fuzz,libFuzzer,Miri",,Less than once a year,"Out-of-bounds access,Double free",,Most of the time,Most of the time,"cargo-update,cargo-audit,cargo-geiger",Somewhat likely,"Slow performance,Lack of support for foreign function calls,Lack of support for inline assembly",,Most of the time,"Stacked Borrows Violation,Tree Borrows Violation,Using uninitialized memory",,Somewhat easy,GitHub,,Somewhat positively,Unsure,Most of the time,Somewhat disagree,18-29,Master's degree,Non-binary,,"Academia,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,8129,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,4,0,0,Weekly,Yes,Yes,Weekly,"Operating systems,Database systems,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Database systems,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,No,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,UnsafeCell,OnceCell,Mutex,Other","SyncUnsafeCell, Unique, NonNull, RwLock","Manual memory allocation,Accessing the fields of a union type,System calls,Intrinsics,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Always,Sometimes,"Volatiles,Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics,Other",,No,Most of the time,Yes,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Accessing the fields of a union type,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,"Manual memory allocation,Intrinsics,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,UnsafeCell,,About half the time,Both,,Use unsafe,Use unsafe,Somewhat difficult,,Sometimes,Sometimes,Yes,Yes,To provide a more performant equivalent of a safe API,,Most of the time,Always,Sometimes,Sometimes,About half the time,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,Miri",,Weekly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,Most of the time,Sometimes,"cargo-update,cargo-audit,cargo-deny",Neither likely nor unlikely,"Slow performance,My unsafe code is in violation of Stacked Borrows",,Always,"Stacked Borrows Violation,Data race,Memory leak,Use-after-free,Unaligned memory access,Out-of-bounds access,Using uninitialized memory",,Somewhat difficult,"Reddit (/r/rust),The Rust Community Discord,Other",The fediverse,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,Prefer not to answer,Bachelor's degree,Prefer not to disclose,,Open-source contributor,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1319,TRUE,anonymous,,,0,0,,Yes,Yes,Yes,3,Yes,20,15,1,Weekly,Yes,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Game development",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,RefCell,Cell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Always,Most of the time,"Atomics,Architecture-specific or SIMD intrinsics",,No,Never,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,mem::transmute,Implementing an unsafe trait",,Most of the time,MaybeUninit,,,,,,"Implementing a custom allocator,Calling foreign functions,System calls,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates,Implementing an unsafe trait",,MaybeUninit,,Sometimes,Both,,Use unsafe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Always,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,About half the time,About half the time,"Assembly,C,C++,JavaScript,Python,Swift",,I generate bindings using a tool,Probably yes,Probably yes,Yes,Unsure,"Box,Rc,Arc",,Sometimes,No,Yes,Always,Most of the time,"bindgen,cbindgen,wasm-bindgen,Emscripten,PyO3",,Locally,,Extremely easy,,,"AddressSanitizer (ASAN),Miri,UndefinedBehaviorSanitizer (UBSAN)",,Monthly,"Deallocating memory with an incorrect Layout,Out-of-bounds access,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access",,Always,Sometimes,,Extremely likely,Lack of support for foreign function calls,,Always,"Stacked Borrows Violation,Tree Borrows Violation",,Somewhat difficult,The Rust Community Discord,,Neither positively nor negatively,Unsure,Sometimes,Somewhat agree,30-39,Bachelor's degree,Non-binary,,"Industry,Open-source contributor,Other",Hobby,"""This Week in Rust""",,No,No,No,,
100,1181,TRUE,anonymous,1,,0,50,,Yes,Yes,Yes,5,Yes,25,3,1,Monthly,Yes,Yes,Monthly,"Web applications - Backend,Networking & distributed systems,Image & Data processing",,"Web applications - Backend,Networking & distributed systems",,Yes,Yes,No,Somewhat difficult,"MaybeUninit,Other",usually core::ptr package,"Manual memory allocation,Intrinsics,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,About half the time,Never,Architecture-specific or SIMD intrinsics,,No,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,Intrinsics,,Unsure,,,,,,,"Intrinsics,Pointer arithmetic",,,,Always,Small-scale optimizations,,Use safe,Use safe,Somewhat difficult,,Sometimes,Most of the time,No,Yes,,,,,,Never,Sometimes,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Yearly,"Using uninitialized memory,Out-of-bounds access,Null pointer dereference,Integer overflow,Violation of stacked or tree borrows,Unaligned memory access",,Always,Never,,Somewhat likely,,,Sometimes,Stacked Borrows Violation,,Somewhat easy,,,Unsure,Unsure,Most of the time,Strongly agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,793,TRUE,anonymous,1,,0,75,,Yes,Yes,Yes,2,Yes,14,2,0,Yearly,Yes,No,Yearly,"Operating systems,Embedded systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,No,Somewhat easy,"MaybeUninit,UnsafeCell",,"Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,Always,Always,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Most of the time,,,,,,,,,,,,,,Use safe,,Somewhat easy,,Never,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,C,,I generate bindings using a tool,Might or might not,Probably yes,No,,,,About half the time,Yes,No,Unsure,Unsure,"bindgen,wasm-bindgen",,In CI,,Somewhat difficult,,,"cargo fuzz,Miri,Valgrind",,Never,"Using uninitialized memory,Memory leak",,Always,Never,cargo-audit,Somewhat likely,"Slow performance,My unsafe code is in violation of Tree Borrows",,Sometimes,"Memory leak,Using uninitialized memory",,,,,Neither positively nor negatively,Unsure,Most of the time,Somewhat disagree,18-29,Master's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,No,No,No,,
100,18,TRUE,anonymous,0.899999976,,0,20,,Yes,No,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,84,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1518,TRUE,anonymous,0.899999976,,0,0,,Yes,No,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1732,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,6,4,1,Monthly,No,No,Less than once a year,"Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Other",Scientific applications ,"Data structures and language-level primitives,Serialization & deserialization,Other",Scientific applications ,Yes,Yes,Yes,Neither easy nor difficult,,,"Calling foreign functions,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,Always,Most of the time,,,,,,,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,"Calling foreign functions,Calling unsafe functions written in Rust",,,,,,,,,,,Unsure,Use safe,Neither easy nor difficult,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Always,"Assembly,C,C++,Python,Other",Fortran,I do not write or generate bindings,Probably not,Probably yes,No,,,,Never,No,Yes,Most of the time,Never,,,,,,,,,,Less than once a year,,,Most of the time,About half the time,"cargo-audit,cargo-geiger",Somewhat likely,,,,,,,GitHub,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,30-39,PhD,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1620,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,6,Yes,12,1,0,Monthly,No,No,Monthly,"Interpreters & runtime systems,Game development,Data structures and language-level primitives",,"Interpreters & runtime systems,Game development,Data structures and language-level primitives",,No,Yes,Yes,Somewhat difficult,,,Calling unsafe functions written in Rust,,No,,About half the time,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Calling unsafe functions written in Rust,,Sometimes,,,,,,,,,,,,,,Unsure,Unsure,Somewhat easy,,Sometimes,Most of the time,Yes,No,To provide a more performant equivalent of a safe API,,Most of the time,Always,Always,,,,,,,,,,,,,,,,,,,,,,,,,,Weekly,,,Most of the time,Never,,Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Unsure,Unsure,Neither agree nor disagree,18-29,Master's degree,Man,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
100,894,TRUE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,3,Yes,6,0,0,Less than once a year,No,No,Less than once a year,"Web applications - Backend,Networking & distributed systems,Other",,Web applications - Backend,,Yes,No,No,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Arc,Mutex",,"Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Always,Sometimes,,,,Sometimes,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Always,ManuallyDrop,,,,,,,,,,,,,Use safe,,Neither easy nor difficult,,Sometimes,Always,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Monthly,,,Always,Sometimes,,Extremely likely,,,,,,,GitHub,,Unsure,Unsure,Sometimes,Strongly agree,18-29,Bachelor's degree,Man,,Industry,,"""This Week in Rust""",,Yes,No,No,,Starbucks
100,2955,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,40,35,33,Monthly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Manufacturing,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Web applications - Backend,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop",,"Manual memory allocation,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Other",manual memory deallocation,No,,Always,Most of the time,,,,Sometimes,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,Manual memory allocation,,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,"Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,,,Sometimes,Small-scale optimizations,,Unsure,Use safe,Somewhat easy,,Sometimes,Sometimes,No,Yes,,,,,,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,,,Weekly,"Using uninitialized memory,Double free,Memory leak",,Always,Never,,Somewhat unlikely,,,,,,,Other,StackOverflow,Neither positively nor negatively,Unsure,Most of the time,Somewhat agree,Prefer not to answer,PhD,Man,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
100,1661,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,16,5,1,Monthly,No,No,Monthly,"Embedded systems,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Other",,"Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,No,Somewhat easy,"MaybeUninit,Pin,Other",,"Calling foreign functions,System calls,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Calling foreign functions,System calls,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,,,Most of the time,Both,,Use safe,,Somewhat easy,,Sometimes,Most of the time,No,Yes,,,,,,Always,About half the time,C,,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,No,,,,Never,No,Yes,Always,Sometimes,bindgen,,Locally,,,,,"cargo fuzz,Miri,Valgrind",,Weekly,Other,&str unsafely created from $[u8],Always,Never,,Neither likely nor unlikely,Other,Miri is always in the compiler that’s how I use it,Never,,,,,,Unsure,Somewhat positively,Most of the time,Strongly disagree,40-49,High school diploma/GED,Man,,Industry,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,38980,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,8,2,0,Daily,Yes,Yes,Daily,"Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems",,Interpreters & runtime systems,,No,Yes,No,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Cell,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Sometimes,Always,About half the time,,,,Never,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.,Other",In one word: FFI,"Implementing a custom allocator,Calling foreign functions,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Implementing a custom allocator,Mutable static variables,mem::transmute",,,,"Inline assembly,In-place initialization or updates",,MaybeUninit,,Sometimes,Small-scale optimizations,,Use safe,Use unsafe,Somewhat easy,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Most of the time,About half the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Most of the time,About half the time,Sometimes,Most of the time,Other,Objective-C,I write bindings manually and generate bindings using a tool,Probably not,Probably yes,Yes,Written manually,"Box,Other",Vec,Most of the time,No,Yes,Most of the time,Sometimes,bindgen,,Other,"Generate locally, check in CI",,,,"AddressSanitizer (ASAN),cargo fuzz,Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind,Other",Main Thread Checker,Weekly,"Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Violation of stacked or tree borrows,Unaligned memory access,Memory leak",,About half the time,Never,cargo-update,Somewhat likely,"Lack of support for foreign function calls,Lack of support for inline assembly",,Never,Using uninitialized memory,,,GitHub,,Somewhat negatively,Extremely positively,Most of the time,Somewhat agree,18-29,Some college,Man,,Open-source contributor,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
31,445,FALSE,anonymous,1,,0,25,,Yes,Yes,Yes,7,Yes,10,2,2,Daily,Yes,Yes,Daily,"Operating systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems",,"Operating systems,Web applications - Backend,Networking & distributed systems",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,Mutex,Other",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,About half the time,Sometimes,"Volatiles,Atomics",,No,Sometimes,Yes,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,20,FALSE,anonymous,0.400000006,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,467,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
19,297,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,5,2,0,Monthly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Serialization & deserialization",,"Non-JIT Compilation,Interpreters & runtime systems,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13,266,FALSE,anonymous,0.800000012,,0,5,,Yes,Yes,Yes,3,Yes,7,3,2,Monthly,Yes,No,Monthly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
14,131,FALSE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,8,Yes,18,10,0,Less than once a year,Yes,No,Less than once a year,"Web applications - Backend,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Static analysis,Other",Parsing ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,115,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
80,662,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,11,9,9,Monthly,No,No,Monthly,"Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,"Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,Yes,Yes,No,Somewhat easy,,,"Manual memory allocation,System calls,Intrinsics,Inline assembly,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Most of the time,Always,"Atomics,Architecture-specific or SIMD intrinsics",,Yes,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,System calls,Inline assembly,Dereferencing a raw pointer",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Sometimes,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),cargo fuzz,Miri",,Daily,,,About half the time,Sometimes,"cargo-deny,cargo-vet",Somewhat likely,Slow performance,,Sometimes,"Null pointer dereference,Out-of-bounds access",,,,,,,,,,,,,,,,,,,,,
6,27,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,107,FALSE,anonymous,0.899999976,,0,25,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
63,1119,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,7,2,1,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Image & Data processing,Game development,Serialization & deserialization",,"Image & Data processing,Game development",,No,No,No,Somewhat difficult,"MaybeUninit,Box,UnsafeCell",,"Calling foreign functions,Intrinsics,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,Always,Always,Sometimes,"Atomics,Architecture-specific or SIMD intrinsics",,No,,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Sometimes,UnsafeCell,,,,,,"Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,"MaybeUninit,UnsafeCell",,About half the time,Unsure,,Use safe,,Somewhat easy,,Sometimes,Most of the time,No,No,,,,,,,,C,,I write bindings manually and generate bindings using a tool,Might or might not,Definitely yes,Unsure,,"Box,Arc",,Never,No,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,46,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,2,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
71,889,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,9,Yes,18,3,0,Yearly,Yes,No,Yearly,"Data structures and language-level primitives,Serialization & deserialization,Static analysis,Other",,,,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,UnsafeCell,OnceCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,Always,Always,About half the time,,,,Unsure,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Inline assembly,,Most of the time,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,Other,The provide the building blocks of a safe API,Always,Always,About half the time,Sometimes,Most of the time,C,,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Yes,Both,,,Never,Unsure,No,Always,Always,"bindgen,wasm-bindgen,Other",windows-bindgen,,,Somewhat easy,,,"AddressSanitizer (ASAN),cargo fuzz,Miri",,Never,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,272,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59,2561,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,3,1,1,Yearly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Static analysis",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Game development,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,Box,Arc,OnceCell",,"Calling foreign functions,System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Always,Always,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,mem::transmute,,Never,,,"mem::transmute,Calling unsafe functions written in Rust",,,,"Inline assembly,mem::transmute,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,,,About half the time,Small-scale optimizations,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Most of the time,Most of the time,No,Yes,,,,,,Always,About half the time,"C,C++",,I write bindings manually and generate bindings using a tool,Probably yes,Might or might not,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13,93,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,10,1,0,Weekly,Yes,Yes,Monthly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,75,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,8,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,92,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,111,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,24,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,207,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,23,5,3,Yearly,No,No,Weekly,"Operating systems,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Image & Data processing,Data structures and language-level primitives",,Yes,No,No,Extremely difficult,Rc,,Calling unsafe functions written in Rust,,No,,Always,Always,,,,,,,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,,,,,,,,,,,,Use safe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,27,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13,77,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,15,15,15,Weekly,Yes,Yes,Weekly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
30,737,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,8,4,4,Monthly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Backend,Database systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Database systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Manual memory allocation,Accessing the fields of a union type,System calls,Intrinsics,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,Most of the time,Most of the time,About half the time,Architecture-specific or SIMD intrinsics,,No,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59,553,FALSE,anonymous,1,,0,100,,Yes,Yes,Yes,7,Yes,30,10,5,Monthly,Yes,Yes,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Most of the time,About half the time,,,,Unsure,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Implementing a custom allocator,Calling foreign functions,System calls,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Most of the time,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"Impossible to encapsulate without imposing safety requirements on the user,Other",Large FFI surface not fully exposed in safe code,Always,Most of the time,Sometimes,Always,Always,"C,C++,C#,Python",,I generate bindings using a tool,Might or might not,Probably yes,Yes,Both,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
23,465,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,6,Yes,15,15,15,Daily,Yes,Yes,Daily,"Embedded systems,Interpreters & runtime systems,Data structures and language-level primitives",,"Embedded systems,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13,59,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,1,Yes,4,0,0,Monthly,Yes,No,Monthly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28,304,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,1.5,Yes,10,7,2,Yearly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Non-JIT Compilation,Data structures and language-level primitives,Static analysis",,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,Box",,"Implementing a custom allocator,Calling foreign functions,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Most of the time,Sometimes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,65,FALSE,anonymous,0.800000012,,0,75,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1012,TRUE,anonymous,1,,0,45,,Yes,Yes,Yes,4,Yes,20,20,19,Weekly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Backend,Database systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Operating systems,Embedded systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,RefCell,UnsafeCell",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Intrinsics,Inline assembly,Cyclic aliasing patterns,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,About half the time,Always,Most of the time,Volatiles,,No,Sometimes,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Cyclic aliasing patterns,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,UnsafeCell,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,"deny(unsafe_code),unsafe_block_in_unsafe_fn",Most of the time,Always,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Never,Always,Most of the time,"Assembly,C,C++,Java",,I generate bindings using a tool,Might or might not,Probably yes,Yes,Written manually,Box,,Sometimes,No,Yes,Always,Never,"bindgen,cbindgen,wasm-bindgen,CXX",,Other,"They are generated and built at build-time, not checked in either locally or in CI",Somewhat difficult,,,"AddressSanitizer (ASAN),HWAddressSanitizer (HWASAN),KernelControlFlowIntegrity,libFuzzer,MemorySanitizer (MSAN),Miri,ShadowCallStack,UndefinedBehaviorSanitizer (UBSAN)",,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,Violation of stacked or tree borrows",,Sometimes,Sometimes,"cargo-deny,cargo-vet",Extremely likely,Lack of support for foreign function calls,,Sometimes,"Stacked Borrows Violation,Use-after-free,Using uninitialized memory",,Somewhat easy,Other,"IRC, Zulip",Neither positively nor negatively,Extremely positively,Sometimes,Somewhat disagree,30-39,PhD,Man,,"Industry,Open-source contributor",,Other,Work chat,Yes,Yes,No,,Amazon
4,5,FALSE,anonymous,1,,0,20,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
36,1054,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,12,3,4,Weekly,Yes,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Static analysis",,"JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,UnsafeCell",,"Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,Most of the time,Always,About half the time,,,,About half the time,No,No,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
14,156,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,5,1,0,Yearly,Yes,No,Yearly,Static analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31,333,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,25,6,3,Yearly,Yes,No,Yearly,"Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Extremely easy,MaybeUninit,,"Calling foreign functions,System calls,Inline assembly,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Most of the time,Most of the time,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
51,983,FALSE,anonymous,0.100000001,,0,0,,Yes,Yes,Yes,2.5,Yes,12,8,6,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Networking & distributed systems,Interpreters & runtime systems,Serialization & deserialization",,"Operating systems,Interpreters & runtime systems,Serialization & deserialization",,Yes,Yes,Yes,Extremely difficult,"MaybeUninit,ManuallyDrop,Pin,UnsafeCell",,"Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Inline assembly,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,Sometimes,Always,Most of the time,,,,Sometimes,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,"Implementing a custom allocator,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,"ManuallyDrop,UnsafeCell",,Most of the time,Small-scale optimizations,,Use unsafe,Use unsafe,Somewhat easy,forbid(unsafe_code),About half the time,Always,Yes,Yes,To provide a more performant equivalent of a safe API,,About half the time,Always,About half the time,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1313,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,8,Yes,43,15,20,Weekly,Yes,No,Monthly,"Operating systems,Embedded systems,Image & Data processing",,"Operating systems,Embedded systems",,No,Yes,Yes,Extremely difficult,MaybeUninit,,"Calling foreign functions,Inline assembly,Dereferencing a raw pointer,In-place initialization or updates",,No,,Always,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Inline assembly,Dereferencing a raw pointer,In-place initialization or updates",,Always,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn",Never,Always,No,Yes,,,,,,Most of the time,Sometimes,C,,I generate bindings using a tool,Probably yes,Probably yes,No,,,,Never,No,No,Always,Always,"bindgen,wasm-bindgen,CXX",,Locally,,Somewhat difficult,,,"AddressSanitizer (ASAN),Valgrind",,Monthly,"External runtime or hardware interface does not behave according to its written specification.,Other",Unexpected program flow,Always,Most of the time,"cargo-audit,cargo-deny,cargo-geiger",Extremely likely,,,,,,,Reddit (/r/rust),,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat disagree,50-59,Bachelor's degree,Man,,"Industry,Rust project member",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
100,49277,TRUE,anonymous,0.699999988,,0,75,,Yes,Yes,Yes,4,Yes,18,1,0,Less than once a year,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,No,Yes,Somewhat easy,MaybeUninit,,"Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Most of the time,Always,,,,,,,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"mem::transmute,Calling unsafe functions written in Rust",,Sometimes,"MaybeUninit,ManuallyDrop",,"mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,"MaybeUninit,ManuallyDrop",,,,,,,,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Most of the time,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,cargo fuzz,,Weekly,"Using uninitialized memory,Out-of-bounds access,Null pointer dereference,Integer overflow,Memory leak",,Never,Never,"cargo-update,cargo-audit,cargo-deny",Extremely unlikely,,,,,,,,,Neither positively nor negatively,Somewhat negatively,Most of the time,Neither agree nor disagree,18-29,Master's degree,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
28,322,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,7,7,2,Yearly,Yes,No,Yearly,"Operating systems,Interpreters & runtime systems",,Operating systems,,Yes,No,Yes,Neither easy nor difficult,"Box,Arc,RefCell,Cell,Other",MapCell (custom cell based on RefCell) and TakeCell(parent of MapCell),"Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,8,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,30,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76,561,FALSE,anonymous,0.899999976,TRUE,100,75,9/22/23 19:52,Yes,Yes,Yes,6,Yes,11,5,5,Monthly,Yes,Yes,Monthly,"Embedded systems,Non-JIT Compilation,Data structures and language-level primitives",,"Embedded systems,Non-JIT Compilation,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Arc",,"Manual memory allocation,Accessing the fields of a union type,Intrinsics,Inline assembly,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,Always,Always,"Volatiles,Atomics,Architecture-specific or SIMD intrinsics",,No,Sometimes,Yes,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,Sometimes,"MaybeUninit,UnsafeCell",,"Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,"MaybeUninit,ManuallyDrop",,"mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,"MaybeUninit,UnsafeCell",,Sometimes,Small-scale optimizations,,Use unsafe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Sometimes,Yes,Yes,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,About half the time,Most of the time,About half the time,Always,About half the time,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),cargo fuzz,HWAddressSanitizer (HWASAN),LeakSanitizer (LSAN),Loom,MemorySanitizer (MSAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Never,"Using uninitialized memory,Use after free,Incorrectly declared bindings to intrinsics or foreign functions.,Violation of stacked or tree borrows",,Always,Sometimes,"cargo-update,cargo-audit,cargo-deny",Neither likely nor unlikely,"Lack of support for foreign function calls,My unsafe code is in violation of Stacked Borrows,My unsafe code is in violation of Tree Borrows",,Sometimes,"Stacked Borrows Violation,Tree Borrows Violation,Out-of-bounds access",,,,,,,,,,,,,,,,,,,,,
6,1907,FALSE,anonymous,0.800000012,TRUE,100,75,9/22/23 19:53,Yes,Yes,Yes,7,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
19,129,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,20,3,5,Daily,Yes,Yes,Monthly,"Operating systems,Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Static analysis",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,No,Yes,Neither easy nor difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59,391,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,9,Yes,20,0,3,Yearly,No,No,Yearly,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Other",,"Web applications - Backend,Networking & distributed systems,Other",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop",,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Always,,,,Unsure,,,"I am not aware of a safe alternative at any level of ease-of-use or performance.,Other",,"Calling foreign functions,Calling unsafe functions written in Rust",,Most of the time,Other,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Sometimes,No,Yes,,,,,,Most of the time,Most of the time,C,,I do not write or generate bindings,Might or might not,Probably yes,Yes,Written manually,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,30,FALSE,anonymous,0.899999976,,,,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31,332,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,20,10,10,Monthly,No,Yes,Yearly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Manufacturing,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Serialization & deserialization",,No,Yes,No,Extremely easy,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,UnsafeCell,LazyCell",,"Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,Always,Always,Always,,,,Unsure,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59,1006,FALSE,anonymous,0.400000006,,0,0,,Yes,Yes,Yes,3,Yes,16,16,16,Daily,No,Yes,Daily,"Embedded systems,Networking & distributed systems,JIT Compilation,Interpreters & runtime systems,Game development,Serialization & deserialization",,"Embedded systems,Game development",,Yes,No,No,Somewhat difficult,"ManuallyDrop,Arc,RefCell,Cell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,No,,Most of the time,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,Most of the time,ManuallyDrop,,,,,,,,,,,,,Use unsafe,,Neither easy nor difficult,const_raw_ptr_deref,Never,Sometimes,No,Yes,,,,,,Never,Most of the time,"C,C++",,I write bindings manually,Probably yes,Might or might not,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
19,565,FALSE,anonymous,1,,0,20,,Yes,Yes,Yes,1,Yes,3,1,0,Daily,Yes,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Data structures and language-level primitives",,Data structures and language-level primitives,,Yes,No,Yes,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,130,FALSE,anonymous,1,,0,30,,Yes,Yes,Yes,8,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,135,FALSE,anonymous,1,,0,5,,Yes,Yes,Yes,1,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,105,FALSE,anonymous,0.899999976,,0,55,,Yes,Yes,Yes,1,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1361,TRUE,anonymous,0.800000012,,0,5,,Yes,No,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,6282,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,5,Yes,20,15,15,Daily,Yes,Yes,Monthly,"Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,No,Yes,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,RefCell,UnsafeCell,Mutex",,"Manual memory allocation,Calling foreign functions,System calls,Intrinsics,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Always,Always,Sometimes,Architecture-specific or SIMD intrinsics,,Yes,Never,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Sometimes,"ManuallyDrop,UnsafeCell",,,,,,"Manual memory allocation,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat easy,"forbid(unsafe_code),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,Sometimes,Always,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Yes,Written manually,,,Never,No,Yes,Always,Sometimes,bindgen,,Locally,,,,,"cargo fuzz,Loom,Miri",,Monthly,"Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Violation of stacked or tree borrows,Unaligned memory access",,Always,Sometimes,"cargo-update,cargo-deny",Neither likely nor unlikely,Lack of support for foreign function calls,,Always,"Stacked Borrows Violation,Unaligned memory access",,Extremely easy,GitHub,,Somewhat negatively,Somewhat positively,Most of the time,Somewhat agree,30-39,Bachelor's degree,Man,,"Industry,Open-source contributor",,Other,Industry word of mouth,Yes,Yes,No,,Amazon
28,300,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,12,6,6,Monthly,No,Yes,Monthly,"Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Serialization & deserialization",,"Database systems,Interpreters & runtime systems",,No,No,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Box,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,Always,Always,Most of the time,,,,About half the time,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,54,FALSE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,1,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
71,527,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,25,5,20,Weekly,Yes,Yes,Weekly,Game development,,Game development,,Yes,No,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Implementing a custom allocator,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Never,Always,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,No,Sometimes,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Implementing a custom allocator,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,MaybeUninit,,Most of the time,Both,,Use unsafe,Use unsafe,Extremely easy,,Sometimes,Sometimes,Yes,No,"To provide a more performant equivalent of a safe API,To provide a more ergonomic equivalent of a safe API",,Sometimes,Most of the time,About half the time,,,,,,,,,,,,,,,,,,,,,,,,,,Daily,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
40,350,FALSE,anonymous,0.899999976,,0,80,,Yes,Yes,Yes,4,Yes,10,4,5,Weekly,No,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,Pin,Box,Arc,RefCell,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Always,Always,,,,,Yes,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,58,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,36,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
14,2470,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,3,1,1,Daily,Yes,Yes,Daily,"Game development,Data structures and language-level primitives,Serialization & deserialization",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,20237,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,9,7,1,Weekly,Yes,Yes,Weekly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,OnceCell,Other",str/String,"Calling foreign functions,Self-referential structs,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,Yes,,Always,Most of the time,,,,Most of the time,Yes,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,Other",Duplicating safe functions with less checks wrt data encodings for performance,,,,,,,,,,"Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates",,MaybeUninit,,About half the time,Unsure,,Use safe,Use safe,Neither easy nor difficult,,About half the time,Most of the time,Yes,Yes,To provide a more performant equivalent of a safe API,,Most of the time,Always,About half the time,Always,About half the time,"C,Java",,I write bindings manually and generate bindings using a tool,Might or might not,Might or might not,Yes,Both,Box,,Never,No,Yes,Always,About half the time,"cbindgen,PyO3,Diplomat",,,,,,,Miri,,Yearly,"Out-of-bounds access,Use after free,Double free,External runtime or hardware interface does not behave according to its written specification.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Unaligned memory access",,Sometimes,Never,"cargo-update,cargo-audit",Somewhat unlikely,,,Never,,,,"Reddit (/r/rust),GitHub",,Neither positively nor negatively,Unsure,Sometimes,Somewhat agree,18-29,Bachelor's degree,Prefer not to disclose,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
50,579,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,2,1,5,Weekly,Yes,Yes,Daily,"Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Web browsers,JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,No,Somewhat difficult,"Box,Arc,UnsafeCell,OnceCell,LazyCell,Mutex",,"Implementing a custom allocator,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,About half the time,Most of the time,Always,,,,,No,No,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,"Implementing a custom allocator,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,"forbid(unsafe_code),deny(unsafe_code),unsafe_block_in_unsafe_fn,const_raw_ptr_deref",Never,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Sometimes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
53,1337,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,26,21,14,Daily,No,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Interpreters & runtime systems",,No,No,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Rc,UnsafeCell,OnceCell",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,About half the time,Always,Sometimes,Other,"unreachable, abort, try",No,Never,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Intrinsics,Inline assembly,mem::transmute",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,"allow(improper_ctypes),allow(improper_ctypes_definitions)",Sometimes,Most of the time,Yes,Yes,,,Unsure,Most of the time,Most of the time,Always,Always,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,126,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
51,458,FALSE,anonymous,1,,0,30,,Yes,Yes,Yes,4,Yes,25,24,24,Daily,Yes,Yes,Daily,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives",,Data structures and language-level primitives,,Yes,Yes,Yes,Somewhat easy,"ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,Mutex",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,System calls,Cyclic aliasing patterns,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Always,Always,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Always,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,,Sometimes,Always,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Always,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
97,359,FALSE,anonymous,1,,0,55,,Yes,Yes,Yes,4,Yes,6,2,1,Monthly,Yes,Yes,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Neither easy nor difficult,,,"Calling foreign functions,System calls",,No,,Most of the time,About half the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls",,About half the time,,,,,,,,,,,,,,Unsure,Use safe,Somewhat easy,,Sometimes,Most of the time,No,No,,,,,,,,"C,JavaScript,TypeScript",,I generate bindings using a tool,Probably yes,Probably yes,Unsure,,,,Never,Unsure,Unsure,Sometimes,Unsure,wasm-bindgen,,,,Somewhat easy,,,,,Monthly,,,Never,Never,,Somewhat likely,,,,,,,The Rust Community Discord,,Somewhat negatively,Unsure,Unsure,Somewhat agree,18-29,Some college,Prefer not to disclose,,"Industry,Open-source contributor,Rust project member",,Reddit (/r/rust),,Yes,Yes,No,,Amazon
6,29,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
48,55084,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,5,0,3,Monthly,No,No,Less than once a year,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Web browsers",,"Embedded systems,Web applications - Backend",,Yes,Yes,No,Somewhat easy,UnsafeCell,,"Calling foreign functions,mem::transmute",,No,Most of the time,Always,Most of the time,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,mem::transmute",,Most of the time,,,,,,,,,UnsafeCell,,Most of the time,Both,,Use safe,Use unsafe,Somewhat easy,,Sometimes,Most of the time,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1025,TRUE,anonymous,1,,0,0,,Yes,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,42,FALSE,anonymous,0.800000012,,0,35,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,721,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,10,4,5,Monthly,Yes,Yes,Monthly,Image & Data processing,,,,Yes,Yes,Yes,Somewhat easy,"Arc,Mutex",,"Manual memory allocation,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Sometimes,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Always,,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,,Never,Always,No,Yes,,,,,,Sometimes,Most of the time,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,Unsure,,Box,,Never,No,Yes,Most of the time,Sometimes,Other,cpp ,,,,,,,,Weekly,"Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Null pointer dereference",,Sometimes,Never,,Extremely likely,,,,,,,"Reddit (/r/rust),The Rust Programming Language Forums",,Somewhat negatively,Extremely negatively,Sometimes,Neither agree nor disagree,18-29,Master's degree,Man,,Industry,,"""This Week in Rust""",,Yes,No,No,,Amazon
100,25,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,619,TRUE,anonymous,1,,0,5,,Yes,Yes,Yes,4,Yes,7,0,0,Monthly,No,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Serialization & deserialization",,No,No,No,Somewhat difficult,,,"Manual memory allocation,System calls,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,About half the time,,,Calling unsafe functions written in Rust,,,,,,,,,,,Unsure,,Extremely difficult,,Sometimes,Always,Yes,No,,,Never,,,,,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Miri,Valgrind",,Weekly,"Using uninitialized memory,Out-of-bounds access,Null pointer dereference,Unaligned memory access",,Always,Never,,Somewhat likely,,,Sometimes,,,,,,Somewhat negatively,Unsure,Unsure,Neither agree nor disagree,18-29,Some college,Prefer not to disclose,,"Academia,Other",Hobby development,"""This Week in Rust""",,No,No,No,,
100,2197,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,17,1,1,Monthly,No,Yes,Monthly,"Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis,Other",Desktop applications,"Database systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization,Other",Desktop applications,No,No,Yes,Neither easy nor difficult,"ManuallyDrop,Box,Arc,Cell,UnsafeCell",,"Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,About half the time,Always,Most of the time,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,ManuallyDrop,,,,,,"mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,,,Always,Other,Experiments and research,Unsure,Unsure,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,"C,Java",,I write bindings manually,Might or might not,Might or might not,No,,Box,,Sometimes,Yes,No,Never,Always,,,,,,,,"Miri,Valgrind",,Monthly,"Out-of-bounds access,Integer overflow,Unaligned memory access,Memory leak,Other",transmute into wrong type,Always,Sometimes,"cargo-update,cargo-audit",Neither likely nor unlikely,"Slow performance,Other",Lack of time,Never,Unaligned memory access,,,,,Somewhat negatively,Unsure,Most of the time,Somewhat disagree,30-39,High school diploma/GED,Man,,Other,hobbyist,"""This Week in Rust""",,Yes,No,No,,Amazon
14,419,FALSE,anonymous,1,,0,10,,Yes,Yes,Yes,4,Yes,10,1,1,Yearly,No,No,Yearly,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13,87,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,9,9,3,Yearly,No,No,Less than once a year,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
19,142,FALSE,anonymous,0.699999988,,0,0,,Yes,Yes,Yes,5,Yes,8,6,7,Weekly,Yes,Yes,Weekly,"JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Non-JIT Compilation,Interpreters & runtime systems",,Yes,No,Yes,Neither easy nor difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
14,226,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,1,Yes,12,12,12,Weekly,Yes,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development,Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,52,FALSE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
19,176,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,10,1,4,Monthly,Yes,Yes,Monthly,"Embedded systems,Image & Data processing,Interpreters & runtime systems",,"Image & Data processing,Interpreters & runtime systems",,No,Yes,Yes,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
40,28109,FALSE,anonymous,0.800000012,,0,5,,Yes,Yes,Yes,1,Yes,5,1,2,Yearly,Yes,Yes,Yearly,"Web applications - Backend,Database systems,Networking & distributed systems,Data structures and language-level primitives",,"Database systems,Networking & distributed systems",,No,No,Yes,Neither easy nor difficult,"Box,Arc,LazyCell,Mutex",,"Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Most of the time,Sometimes,,,,,Yes,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Calling unsafe functions written in Rust,,Sometimes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31,684,FALSE,anonymous,0.800000012,,0,5,,Yes,Yes,Yes,3,Yes,6,2,0,Yearly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Game development",,No,No,No,Extremely easy,,,"Mutable static variables,mem::transmute,Calling unsafe functions written in Rust",,No,,Always,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,584,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,41,10,10,Yearly,Yes,No,Yearly,"Operating systems,Embedded systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives",,"Operating systems,Embedded systems,Image & Data processing,Data structures and language-level primitives",,Yes,Yes,No,Somewhat difficult,Other,[u8],"System calls,Inline assembly,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Most of the time,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"System calls,Dereferencing a raw pointer,Pointer arithmetic",,Always,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Never,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Most of the time,Always,Never,Never,Always,,,,,,,,,,,,,,,,,,,,,,,,Never,,,Sometimes,Never,cargo-update,Extremely likely,,,,,,,GitHub,,Somewhat negatively,Somewhat positively,Most of the time,Strongly agree,50-59,PhD,Man,,"Academia,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
6,35,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
34,81850,FALSE,anonymous,0.800000012,,0,75,,Yes,Yes,Yes,8,Yes,12,10,10,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Web browsers,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Web browsers,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Extremely difficult,"MaybeUninit,ManuallyDrop,Pin,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,About half the time,"Volatiles,Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics,Other",pretty much everything in core::intrinsics (i work on [rust]),Yes,Sometimes,Yes,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Accessing the fields of a union type,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Sometimes,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,2560,TRUE,anonymous,0.800000012,,,,,Yes,Yes,Yes,8,Yes,20,5,5,Yearly,Yes,No,Yearly,"Operating systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Other",Multimedia and real-time communications,"Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Other",Tooling to analyse real-time communications issues,No,Yes,Yes,Neither easy nor difficult,Box,,"Calling foreign functions,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Most of the time,About half the time,,,,,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,Other",Sometimes there are crates that help with e.g. JNI but they request to buy into their artitectural choises.,,,,,,,,,,"Calling foreign functions,Calling unsafe functions written in Rust,Implementing an unsafe trait",,,,Never,Other,"Note: now I see I should have chosed another options at the previous survey screen but there is no ""back"" button. I don't typically use `unsafe` for performance, just to access certain operating system or library things. Sometimes there is a way around it (i.e. a high-level Rust crate) but it does not suit me for some reason.",Unsure,Unsure,Neither easy nor difficult,forbid(unsafe_code),Never,Most of the time,No,Yes,,,,,,Most of the time,Unsure,"C,C++,Java,Python,Other",Does WebAssemly and browser's Javascript count as FFI?,I write bindings manually,Might or might not,Probably yes,No,,"Box,Other",Just used `cxx` crate for the Easy Mode FFI. It has special dedicated containers.,Never,No,Yes,Most of the time,Unsure,,,,,,,,"Valgrind,Other","Maybe ""none"" - just lucky so far.",Less than once a year,,,Never,Sometimes,"cargo-audit,cargo-geiger",Neither likely nor unlikely,,,,,,,,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,30-39,Master's degree,Prefer not to disclose,,"Industry,Open-source contributor",,"""This Week in Rust""",,No,Yes,No,,
51,360,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,4,3,4,Daily,No,No,Monthly,Embedded systems,,,,Yes,No,Yes,Neither easy nor difficult,"Rc,Arc,Mutex",,"Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Implementing an unsafe trait",,Yes,,,,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Mutable static variables,Implementing an unsafe trait",,Most of the time,,,,,,,,,,,,,,Use unsafe,Use safe,Extremely easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,No,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1858,TRUE,anonymous,0.699999988,,0,0,,Yes,Yes,Yes,6,Yes,40,3,5,Yearly,Yes,No,Yearly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,RefCell,,"Manual memory allocation,Calling foreign functions,System calls,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,"I am not aware of a safe alternative at any level of ease-of-use or performance.,Other",unsafe is faster _and_ the proram is an optimization game entry,"Calling foreign functions,Dereferencing a raw pointer",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,forbid(unsafe_code),Sometimes,Most of the time,No,Yes,,,,,,Always,Most of the time,"Assembly,C,C++",,I write bindings manually,Might or might not,Might or might not,Unsure,,,,Never,No,Yes,Unsure,Unsure,,,,,,,,cargo fuzz,,Less than once a year,,,Sometimes,Sometimes,cargo-audit,Somewhat unlikely,,,,,,,The Rust Programming Language Forums,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Somewhat agree,50-59,Some college,Man,,"Academia,Open-source contributor",,"""This Week in Rust""",,No,Yes,No,,
31,490,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,3,Yes,10,0,0,Weekly,Yes,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,ManuallyDrop,Box,UnsafeCell",,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,Yes,Always,Most of the time,Sometimes,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,No,Never,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13,64,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,3,2,2,Weekly,Yes,Yes,Weekly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,7,TRUE,anonymous,1,,0,0,,No,No,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76,405,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,11,1,3,Monthly,No,No,Yearly,"Image & Data processing,Game development,Other","Scientific Computing, Graphics Programming","Image & Data processing,Game development,Other","Scientific Computing, Graphics",Yes,No,Yes,Somewhat difficult,"MaybeUninit,Box,Rc,Arc,OnceCell",,"mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Always,Sometimes,,,,,No,No,"I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling unsafe functions written in Rust,Implementing an unsafe trait",,Never,MaybeUninit,,"mem::transmute,Dereferencing a raw pointer",,"MaybeUninit,UnsafeCell",,,,,,,,,Use unsafe,Use unsafe,Somewhat easy,,Never,Always,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Miri,Valgrind",,Monthly,Violation of stacked or tree borrows,,Most of the time,Never,,Somewhat likely,,,,,,,,,,,,,,,,,,,,,,,,,
4,33,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
14,123,FALSE,anonymous,1,TRUE,89,5,9/23/23 21:38,Yes,Yes,Yes,1.5,Yes,4,0.5,0.5,Less than once a year,Yes,No,Less than once a year,Image & Data processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,288,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
19,199,FALSE,anonymous,1,,0,20,,Yes,Yes,Yes,1,Yes,20,1,15,Monthly,Yes,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Database systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Neither easy nor difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,151,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,6,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,30,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1349,TRUE,anonymous,0.899999976,,0,10,,Yes,Yes,Yes,8,Yes,13,5,5,Daily,Yes,No,Yearly,"Operating systems,Embedded systems,JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,"Operating systems,Embedded systems,JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives",,Yes,Yes,Yes,Neither easy nor difficult,"MaybeUninit,Pin,UnsafeCell,OnceCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Most of the time,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Inline assembly,Global assembly,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,,Sometimes,Most of the time,No,Yes,,,,,,About half the time,Most of the time,"Assembly,C",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,No,,,,Never,No,No,Most of the time,Unsure,"bindgen,cbindgen,wasm-bindgen",,Locally,,Somewhat easy,,,Miri,,Weekly,Failure to meet an application's functional requirements.,,Sometimes,Never,,Extremely unlikely,,,Sometimes,,,,,,Somewhat negatively,Unsure,Unsure,Somewhat disagree,18-29,Master's degree,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
31,23335,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,14,2,1,Weekly,Yes,Yes,Monthly,"Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,"Image & Data processing,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Somewhat easy,"MaybeUninit,ManuallyDrop,Pin,Box,Arc,Cell,UnsafeCell,OnceCell,LazyCell,Mutex,Other",marker types e.g. phantoms,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,Always,Always,Sometimes,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1304,TRUE,anonymous,0.899999976,,0,25,,Yes,Yes,Yes,2,Yes,0,4,3,Yearly,No,No,Yearly,Networking & distributed systems,,,,Yes,No,Yes,Neither easy nor difficult,"Arc,Mutex",,"Calling foreign functions,Intrinsics,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Most of the time,Sometimes,Architecture-specific or SIMD intrinsics,,Yes,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Inline assembly,Global assembly,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates",,Most of the time,,,,,,,,,,,,,,Use unsafe,Use safe,Somewhat difficult,,Never,Most of the time,No,No,,,,,,,,Python,,I do not write or generate bindings,Probably yes,Probably yes,No,,,,Never,No,Yes,Never,Never,,,,,,,,,,Yearly,Failure to meet an application's functional requirements.,,Never,Never,,Somewhat likely,,,,,,,"Reddit (/r/rust),GitHub",,Neither positively nor negatively,Unsure,Sometimes,Strongly agree,18-29,Bachelor's degree,Man,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
76,5467,FALSE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,2,Yes,16,10,0,Daily,Yes,Yes,Daily,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Database systems,Networking & distributed systems,Data structures and language-level primitives",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Other",AtomicUsize,"Manual memory allocation,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait,Other",Pointer Tagging,Yes,,Always,Sometimes,,,,Unsure,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Most of the time,,,,,,,,,,,,,,Use safe,Unsure,Somewhat easy,,Never,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Always,Sometimes,Always,Sometimes,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Miri",,Weekly,"Using uninitialized memory,Double free,Failure to meet an application's functional requirements.,Memory leak,Other",Bad transmute/ptr-cast to wrong type.,Most of the time,Never,,Somewhat likely,,,,,,,,,,,,,,,,,,,,,,,,,
6,26,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1105,TRUE,anonymous,0.899999976,,0,10,,Yes,Yes,Yes,1,Yes,10,4,2,Weekly,Yes,Yes,Weekly,"Operating systems,Web applications - Frontend,Web applications - Backend,Image & Data processing,Game development,Serialization & deserialization",,"Operating systems,Web applications - Backend,Game development",,Yes,No,Yes,Neither easy nor difficult,"Arc,OnceCell,LazyCell,Mutex",,"Calling foreign functions,System calls,Inline assembly,mem::transmute",,Yes,,About half the time,Sometimes,,,,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,"Calling foreign functions,mem::transmute",,,,Sometimes,Small-scale optimizations,,Use unsafe,Use unsafe,Somewhat easy,allow(improper_ctypes),Never,About half the time,Yes,Yes,To provide a more ergonomic equivalent of a safe API,,About half the time,Sometimes,Sometimes,Sometimes,Unsure,"C,Python,TypeScript",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,Box,,Sometimes,Yes,Yes,Never,Unsure,"wasm-bindgen,PyO3,Other",Maturin,,,Neither easy nor difficult,Prusti,,AddressSanitizer (ASAN),,Daily,"Out-of-bounds access,Failure to meet an application's functional requirements.,Integer overflow",,Most of the time,Sometimes,cargo-update,Somewhat likely,,,,,,,"GitHub,Other",,Neither positively nor negatively,Unsure,Most of the time,Somewhat agree,18-29,Some high school,Man,,Open-source contributor,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1211,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,Yes,20,7,7,Less than once a year,No,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization",,Non-JIT Compilation,,Yes,No,No,Somewhat difficult,,,"mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Always,Never,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,Dereferencing a raw pointer,,Sometimes,,,"mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,,,mem::transmute,,,,Never,Small-scale optimizations,,Use safe,,Neither easy nor difficult,,Sometimes,Most of the time,No,Yes,,,,,,Never,Always,,,,,,,,,,,,,,,,,,,,,,,,Weekly,Out-of-bounds access,,Never,Never,,Somewhat likely,,,,,,,,,Somewhat negatively,Somewhat negatively,Most of the time,Strongly agree,30-39,Master's degree,Man,,Industry,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
6,47,FALSE,anonymous,0.800000012,,0,25,,Yes,Yes,Yes,8,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,967,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,15,2,7,Less than once a year,No,No,Less than once a year,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Manufacturing,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Manufacturing,Serialization & deserialization",,Yes,No,No,Somewhat easy,,,"Calling foreign functions,Calling unsafe functions written in Rust",,Yes,,Most of the time,Sometimes,,,,,,,,,,,,,,,,,,,,,,,,,Use safe,,Neither easy nor difficult,,Never,Always,No,No,,,,,,,,"C++,Python",,I write bindings manually and generate bindings using a tool,Might or might not,Probably yes,No,,,,About half the time,Yes,Unsure,Sometimes,Unsure,"wasm-bindgen,CXX,PyO3",,,,Neither easy nor difficult,,,cargo fuzz,,Yearly,Out-of-bounds access,,Never,Never,,Extremely likely,,,,,,,,,Somewhat negatively,Unsure,Always,Strongly agree,40-49,PhD,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
100,1208,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,11,0,10,Monthly,Yes,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Manufacturing,Data structures and language-level primitives",,"Embedded systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Manufacturing",,No,No,Yes,Extremely easy,LazyCell,,"System calls,mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,,About half the time,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"mem::transmute,Calling unsafe functions written in Rust",,Sometimes,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,,Sometimes,Most of the time,No,Yes,,,,,,Sometimes,Sometimes,,,,,,,,,,,,,,,,,,,,,,,,Less than once a year,Out-of-bounds access,,Sometimes,Never,"cargo-update,cargo-deny",Somewhat likely,,,,,,,,,Somewhat negatively,Neither positively nor negatively,Sometimes,Somewhat agree,18-29,Master's degree,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
4,25211,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,997,TRUE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,9,Yes,18,0,0,Monthly,No,No,Yearly,"Web applications - Backend,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Data structures and language-level primitives,Serialization & deserialization,Other",,"Web applications - Backend,Networking & distributed systems,JIT Compilation,Non-JIT Compilation,Data structures and language-level primitives,Other",,Yes,Yes,Yes,Neither easy nor difficult,Pin,,"Calling foreign functions,Self-referential structs,Implementing an unsafe trait",,No,,Always,Never,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Self-referential structs,Implementing an unsafe trait",,Always,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Sometimes,Always,No,Yes,,,,,,Never,Always,,,I do not write or generate bindings,Probably yes,Probably yes,No,,,,Sometimes,Unsure,Unsure,Unsure,Unsure,,,,,,,,,,Monthly,,,Always,Never,,Somewhat unlikely,,,,,,,,,Somewhat negatively,Unsure,Most of the time,Somewhat agree,30-39,Master's degree,Man,,Industry,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,5527,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,12,10,8,Monthly,Yes,Yes,Monthly,"Operating systems,Embedded systems,Networking & distributed systems",,"Operating systems,Embedded systems,Networking & distributed systems",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,Mutex",,"Manual memory allocation,Calling foreign functions,Mutable static variables,mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,Always,,,,Sometimes,Yes,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Mutable static variables,mem::transmute,Calling unsafe functions written in Rust",,Sometimes,"MaybeUninit,ManuallyDrop,UnsafeCell",,,,,,,,,,,,,Unsure,Unsure,Neither easy nor difficult,,Sometimes,Always,Yes,Yes,To provide a more ergonomic equivalent of a safe API,,Sometimes,About half the time,Sometimes,About half the time,Sometimes,"C,C++",,I generate bindings using a tool,Might or might not,Probably yes,Yes,Both,,,Sometimes,Yes,Yes,About half the time,About half the time,"cbindgen,CXX",,,,,Kani,,"AddressSanitizer (ASAN),cargo fuzz,LeakSanitizer (LSAN),libFuzzer,Loom,MemorySanitizer (MSAN),Miri,Shuttle,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Daily,Unwinding across foreign stack frames without using an -unwind ABI,,Always,Always,cargo-audit,Extremely likely,,,About half the time,"Null pointer dereference,Use-after-free,Out-of-bounds access",,,"Reddit (/r/rust),The Rust Programming Language Forums,GitHub,The Rust Community Discord",,Neither positively nor negatively,Somewhat positively,Sometimes,Neither agree nor disagree,30-39,Master's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,No,No,,Amazon
100,823,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,15,15,15,Weekly,Yes,Yes,Weekly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Game development,Data structures and language-level primitives",,No,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,RefCell,Cell,UnsafeCell,OnceCell,LazyCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,No,Most of the time,Always,Most of the time,"Atomics,Architecture-specific or SIMD intrinsics",,Yes,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Most of the time,Both,,Use safe,Use safe,Somewhat difficult,,Sometimes,Sometimes,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Most of the time,Most of the time,Most of the time,Most of the time,"C,C++",,I write bindings manually and generate bindings using a tool,Might or might not,Might or might not,Yes,Unsure,"Box,Other",Vec,Never,Yes,Yes,Sometimes,Sometimes,"bindgen,Other",various wayland / vulkan,Locally,,,,,"AddressSanitizer (ASAN),Miri,ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Weekly,"Using uninitialized memory,Incorrectly declared bindings to intrinsics or foreign functions.,Unaligned memory access",,Sometimes,Never,,Neither likely nor unlikely,,,Sometimes,Unaligned memory access,,,,,Somewhat negatively,Somewhat negatively,Most of the time,Strongly disagree,30-39,Some college,Man,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
100,1164,TRUE,anonymous,1,,0,20,,Yes,Yes,Yes,5,Yes,35,2,0,Monthly,No,No,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Manufacturing,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Image & Data processing,Serialization & deserialization",,Yes,No,Yes,Extremely difficult,"MaybeUninit,Box,OnceCell",,"Calling foreign functions,Intrinsics,Mutable static variables,In-place initialization or updates",,Yes,,Always,Always,Architecture-specific or SIMD intrinsics,,No,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Intrinsics,Mutable static variables,In-place initialization or updates",,Always,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,,Never,Always,No,Yes,,,,,,Always,Sometimes,"C,C++",,I write bindings manually and generate bindings using a tool,Probably yes,Probably yes,Yes,Unsure,Box,,Never,No,No,Unsure,Always,"bindgen,PyO3",,Locally,,,,,,,Monthly,"Using uninitialized memory,Incorrectly declared bindings to intrinsics or foreign functions.,Null pointer dereference,Memory leak",,Sometimes,Never,,Somewhat likely,,,,,,,,,Somewhat negatively,Somewhat negatively,Sometimes,Strongly agree,40-49,Some college,Man,,Industry,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,975,TRUE,anonymous,1,,0,10,,Yes,Yes,Yes,1.5,Yes,4,0,0,Yearly,No,No,Yearly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems,Game development,Data structures and language-level primitives",,"Web applications - Backend,Data structures and language-level primitives",,No,No,No,Extremely easy,,,"Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Always,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Most of the time,,,,,,,,,,,,,,Use safe,,Neither easy nor difficult,,Never,Always,No,Yes,,,,,,Always,Sometimes,,,,,,,,,,,,,,,,,,,,,,Miri,,Never,"Creating a zero-size allocation with an allocator that requires nonzero size,Deallocating memory with an incorrect Layout,Memory leak",,Most of the time,Never,,Extremely likely,,,Always,Tree Borrows Violation,,Neither easy nor difficult,,,Neither positively nor negatively,Unsure,Most of the time,Somewhat agree,18-29,Bachelor's degree,Man,,Academia,,"""This Week in Rust""",,No,No,No,,
100,1166,TRUE,anonymous,1,,0,75,,Yes,Yes,Yes,1.5,Yes,7,7,6,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Image & Data processing,Non-JIT Compilation,Data structures and language-level primitives",,"Embedded systems,Non-JIT Compilation,Data structures and language-level primitives",,Yes,No,Yes,Extremely easy,"MaybeUninit,ManuallyDrop,Box,Rc",,"Implementing a custom allocator,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Always,Always,,,,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,Other","FFI reasons, and uninit memory for performance reasons requires `unsafe`",,,,,,,,,,"Implementing a custom allocator,mem::transmute",,MaybeUninit,,Most of the time,Both,,Use safe,Use safe,Somewhat easy,"allow(improper_ctypes),allow(improper_ctypes_definitions),unsafe_block_in_unsafe_fn",Sometimes,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Always,Always,Unsure,C,,I write bindings manually and generate bindings using a tool,Probably not,Definitely yes,No,,"Box,Rc",,Never,No,No,Always,Most of the time,bindgen,,In CI,,,,,"AddressSanitizer (ASAN),cargo fuzz,libFuzzer,Miri,Valgrind",,Monthly,"Null pointer dereference,Violation of stacked or tree borrows,Memory leak",,Always,Most of the time,"cargo-deny,cargo-geiger",Neither likely nor unlikely,Lack of support for foreign function calls,,Most of the time,Other,Monomorphized functions having different addresses,,"The Rust Programming Language Forums,GitHub",,Unsure,Unsure,Most of the time,Strongly agree,18-29,Master's degree,Man,,"Industry,Open-source contributor,Rust project member",,Other,Collegue,Yes,Yes,No,,Amazon
100,1264,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,41,33,8,Monthly,No,Yes,Monthly,"Operating systems,Embedded systems,Serialization & deserialization,Other",GUI,"Embedded systems,Serialization & deserialization",,No,Yes,Yes,Neither easy nor difficult,"MaybeUninit,UnsafeCell,OnceCell,LazyCell,Mutex",,"Calling foreign functions,Mutable static variables,Dereferencing a raw pointer",,Yes,Sometimes,Always,Always,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Mutable static variables",,Sometimes,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,,About half the time,Always,No,Yes,,,,,,Always,Most of the time,"C,C++",,I generate bindings using a tool,Probably yes,Might or might not,No,,,,Sometimes,Yes,Yes,Sometimes,Sometimes,"bindgen,cbindgen",,In CI,,,,,"AddressSanitizer (ASAN),Miri,UndefinedBehaviorSanitizer (UBSAN)",,Monthly,"External runtime or hardware interface does not behave according to its written specification.,Violation of stacked or tree borrows,Unaligned memory access",,Most of the time,Always,"cargo-audit,cargo-deny",Extremely likely,Slow performance,,Sometimes,"Stacked Borrows Violation,Tree Borrows Violation,Data race",,Somewhat difficult,"Reddit (/r/rust),The Rust Programming Language Forums",,Somewhat negatively,Neither positively nor negatively,Sometimes,Strongly agree,50-59,Bachelor's degree,Man,,"Industry,Open-source contributor",,Other,From colleague,Yes,Yes,No,,Amazon
100,8,TRUE,anonymous,0.899999976,,0,20,,Yes,No,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1084,TRUE,anonymous,0.699999988,TRUE,90,20,10/4/23 14:55,Yes,Yes,Yes,8,Yes,34,15,15,Weekly,Yes,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,Rc,Arc,UnsafeCell",,"Calling foreign functions,Intrinsics,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Never,Most of the time,Most of the time,Architecture-specific or SIMD intrinsics,,No,Never,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,Intrinsics,,Most of the time,,,,,,,"Intrinsics,mem::transmute,In-place initialization or updates",,MaybeUninit,,Always,Large-scale components purpose-built for performance.,,Use safe,Use safe,Extremely difficult,,Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,Always,Most of the time,Sometimes,Sometimes,Always,"C,C#",,I generate bindings using a tool,Definitely not,Might or might not,Yes,Both,Box,,Never,Yes,Yes,Sometimes,Sometimes,Other,Locally developed tool,,,,,,"cargo fuzz,Miri,Valgrind",,Weekly,"Creating a zero-size allocation with an allocator that requires nonzero size,Deallocating memory with an incorrect Layout,Using uninitialized memory,Out-of-bounds access,Use after free,Double free,Failure to meet an application's functional requirements.,Incorrectly declared bindings to intrinsics or foreign functions.,Unwinding across foreign stack frames without using an -unwind ABI,Null pointer dereference,Violation of stacked or tree borrows,Memory leak",,Always,Most of the time,cargo-audit,Extremely likely,Slow performance,,Sometimes,"Stacked Borrows Violation,Null pointer dereference,Use-after-free,Out-of-bounds access,Using uninitialized memory",,Somewhat easy,"Reddit (/r/rust),The Rust Community Discord",,Somewhat negatively,Somewhat negatively,Sometimes,Neither agree nor disagree,40-49,Master's degree,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1016,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,27,21,10,Monthly,No,Yes,Monthly,"Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization,Other",,"Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,No,Yes,Somewhat difficult,"MaybeUninit,ManuallyDrop,Box,UnsafeCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Intrinsics,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,About half the time,Most of the time,Sometimes,"Atomics,Architecture-specific or SIMD intrinsics",,No,Sometimes,No,Yes,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Manual memory allocation,Intrinsics,Pointer arithmetic,Calling unsafe functions written in Rust",,About half the time,"MaybeUninit,UnsafeCell",,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,unsafe_block_in_unsafe_fn,Sometimes,Most of the time,Yes,Yes,"To provide a more ergonomic equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Sometimes,About half the time,Most of the time,,,,,,,,,,,,,,,,,,,,,,"Loom,Miri,Valgrind",,Monthly,"Violation of stacked or tree borrows,Memory leak",,Always,Sometimes,"cargo-update,cargo-vet",Neither likely nor unlikely,,,Always,"Stacked Borrows Violation,Tree Borrows Violation,Memory leak",,Neither easy nor difficult,,,Somewhat negatively,Unsure,About half the time,Strongly agree,40-49,PhD,Man,,Industry,,"""This Week in Rust""",,No,No,No,,
100,72,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,21,FALSE,anonymous,0.400000006,,0,65,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31,281,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,20,5,5,Less than once a year,No,No,Less than once a year,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Game development,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,"ManuallyDrop,Pin",,"mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Always,Always,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59,637,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,9,0,0,Weekly,Yes,Yes,Monthly,"Web applications - Backend,Networking & distributed systems",,"Web applications - Backend,Networking & distributed systems",,No,No,No,Somewhat difficult,"MaybeUninit,ManuallyDrop,Pin,Box,UnsafeCell",,"Manual memory allocation,Calling foreign functions,System calls,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Yes,Always,Always,About half the time,,,,Sometimes,No,No,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Calling foreign functions,System calls,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Unsure,,,,,,,"System calls,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Sometimes,Both,,Use safe,,Neither easy nor difficult,,Sometimes,Sometimes,No,Yes,,,,,,About half the time,About half the time,"C,C++,JavaScript,Swift",,I write bindings manually and generate bindings using a tool,Might or might not,Definitely yes,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,468,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
30,385,FALSE,anonymous,0.400000006,,0,40,,Yes,Yes,Yes,12,Yes,24,24,0,Monthly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Game development,Serialization & deserialization,Static analysis",,"Operating systems,Embedded systems,Serialization & deserialization,Static analysis",,Yes,No,Yes,Neither easy nor difficult,"Pin,Box,Rc,Arc,RefCell,Mutex",,"System calls,Inline assembly,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,,Sometimes,Most of the time,,,,,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,836,FALSE,anonymous,0.800000012,,0,75,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,354,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,8,3,5,Monthly,No,No,Monthly,"Embedded systems,Web applications - Backend,Image & Data processing,Data structures and language-level primitives",,"Embedded systems,Web applications - Backend,Image & Data processing,Data structures and language-level primitives",,Yes,No,No,Somewhat difficult,"MaybeUninit,Arc,UnsafeCell,OnceCell,Mutex",,"System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,Always,Most of the time,About half the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,Pointer arithmetic,,About half the time,UnsafeCell,,,,,,,,,,,,,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59,15488,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,7,7,5,Daily,No,Yes,Weekly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Web applications - Backend,Game development,Serialization & deserialization",,Yes,No,No,Neither easy nor difficult,,,"Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Most of the time,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"System calls,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,About half the time,,,,,,,,,,,,,,Use safe,,Neither easy nor difficult,deny(unsafe_code),About half the time,Always,No,Yes,,,,,,Most of the time,Always,C,,I do not write or generate bindings,Might or might not,Might or might not,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41,1228,FALSE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,10,Yes,25,10,2,Daily,Yes,Yes,Daily,"Operating systems,Embedded systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Networking & distributed systems,Image & Data processing,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"ManuallyDrop,Pin,Box,RefCell,Cell,UnsafeCell,Other",NonNull,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,System calls,Intrinsics,Inline assembly,Cyclic aliasing patterns,Self-referential structs,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait,Declaring an unsafe trait",,Yes,Most of the time,Always,Most of the time,"Atomics,Const intrinsics,Architecture-specific or SIMD intrinsics",,Yes,,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I could use a safe pattern but unsafe is easier to implement or more ergonomic.",,,,,,,"Implementing a custom allocator,Calling foreign functions,Intrinsics,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Implementing an unsafe trait,Declaring an unsafe trait",,"MaybeUninit,ManuallyDrop,UnsafeCell",,"Manual memory allocation,Inline assembly,Global assembly,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,In-place initialization or updates",,"MaybeUninit,ManuallyDrop,UnsafeCell",,Most of the time,Both,,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
71,261,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,4,Yes,15,0,0,Yearly,No,No,Less than once a year,"Serialization & deserialization,Static analysis",,"Serialization & deserialization,Static analysis",,No,Yes,No,Somewhat easy,,,Other,,No,,,,,,,,,,Other,,,,,,,,,,,,,,,,,,Use safe,Use safe,Extremely easy,,Sometimes,Most of the time,No,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Miri,,Never,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,29,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,589,TRUE,anonymous,0.899999976,,0,30,,Yes,Yes,Yes,4,Yes,15,8,15,Weekly,Yes,Yes,Weekly,"Web applications - Frontend,Web applications - Backend,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Interpreters & runtime systems,Serialization & deserialization",,Yes,Yes,Yes,Extremely difficult,,,"Manual memory allocation,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,,Never,Never,,,,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,Manual memory allocation,,,,Never,Large-scale components purpose-built for performance.,,Unsure,Unsure,Somewhat difficult,,Never,Most of the time,No,Yes,,,,,,Never,Always,,,,,,,,,,,,,,,,,,,,,,"AddressSanitizer (ASAN),MemorySanitizer (MSAN),ThreadSanitizer (TSAN),UndefinedBehaviorSanitizer (UBSAN)",,Less than once a year,,,Always,Never,,Somewhat unlikely,,,,,,,,,Neither positively nor negatively,Unsure,Unsure,Somewhat agree,18-29,Bachelor's degree,Woman,,"Industry,Open-source contributor",,Other,company chat,Yes,Yes,No,,Amazon
4,12,FALSE,anonymous,0.899999976,,0,95,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
14,148,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,7,Yes,11,9,1,Yearly,Yes,No,Less than once a year,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,84,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,338,FALSE,anonymous,0.800000012,,0,25,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13,72,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,10,5,0,Yearly,Yes,No,Yearly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,38,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,39,FALSE,anonymous,0.899999976,,0,5,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,93,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,31,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
36,212,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,5,0,1,Less than once a year,Yes,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Manufacturing",,Web applications - Backend,,No,No,Yes,Somewhat difficult,,,Calling unsafe functions written in Rust,,No,,Most of the time,Never,,,,,,,I could use a safe pattern but unsafe is faster or more space-efficient.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59,728,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,15,0,1,Weekly,Yes,No,Monthly,"Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Interpreters & runtime systems,Game development",,"Web applications - Frontend,Web applications - Backend,Image & Data processing,Interpreters & runtime systems,Game development",,Yes,Yes,Yes,Somewhat difficult,MaybeUninit,,"Calling foreign functions,Intrinsics,Inline assembly,Global assembly,mem::transmute,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,No,,Always,Sometimes,"Atomics,Architecture-specific or SIMD intrinsics",,Yes,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Intrinsics,Inline assembly,Global assembly,Calling unsafe functions written in Rust,Implementing an unsafe trait,Declaring an unsafe trait",,About half the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,deny(unsafe_code),Sometimes,Most of the time,Yes,Yes,Impossible to encapsulate without imposing safety requirements on the user,,About half the time,Always,Most of the time,Always,Most of the time,JavaScript,,I write bindings manually,Might or might not,Probably yes,Yes,Written manually,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,77,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
71,763,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,15,0,0,Monthly,Yes,Yes,Monthly,"Web applications - Backend,Networking & distributed systems,Image & Data processing,Game development,Manufacturing",,"Web applications - Backend,Manufacturing",,No,No,Yes,Somewhat difficult,"Pin,Box,Rc,Arc,RefCell,Mutex",,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Always,Sometimes,,,,,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"mem::transmute,Calling unsafe functions written in Rust",,Sometimes,,,,,,,,,,,,,,Use safe,Use safe,Neither easy nor difficult,,Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,"C,C++,JavaScript,TypeScript",,I do not write or generate bindings,Might or might not,Probably yes,No,,"Box,Rc,Arc",,Never,Yes,Yes,Sometimes,Sometimes,,,,,,,,,,Monthly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,19,TRUE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,5,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
48,386,FALSE,anonymous,1,,0,75,,Yes,Yes,Yes,8,Yes,12,3,6,Monthly,No,No,Monthly,"Operating systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Backend,Networking & distributed systems",,Yes,Yes,Yes,Neither easy nor difficult,"ManuallyDrop,UnsafeCell",,"Calling foreign functions,System calls,mem::transmute,Calling unsafe functions written in Rust",,Yes,Sometimes,Most of the time,About half the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,System calls",,Most of the time,,,,,,,,,,,,,,Use safe,Use safe,Somewhat difficult,unsafe_block_in_unsafe_fn,Sometimes,Never,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,14,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
30,299,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,5,0,2,Yearly,Yes,No,Yearly,Other,Cryptocurrency,Other,Crypto,No,No,No,Somewhat difficult,Arc,,"Inline assembly,Calling unsafe functions written in Rust,Other",JNI,No,,Most of the time,Never,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,538,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,6,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
63,716,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,7,7,0,Less than once a year,Yes,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Other",embedded ,"Data structures and language-level primitives,Other","cli, ",No,Yes,Yes,Somewhat difficult,Pin,,"Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,,Most of the time,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,Dereferencing a raw pointer,Pointer arithmetic",,Sometimes,,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,deny(unsafe_code),Sometimes,Most of the time,No,No,,,,,,,,"C,Python",,I write bindings manually and generate bindings using a tool,Might or might not,Probably not,No,,,,About half the time,Yes,Unsure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,43,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,205151,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,8,Yes,30,1,1,Yearly,Yes,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,JIT Compilation,Non-JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Image & Data processing,JIT Compilation,Interpreters & runtime systems,Game development,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,No,No,Somewhat difficult,"MaybeUninit,UnsafeCell",,"Accessing the fields of a union type,Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,Sometimes,Always,Most of the time,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Calling foreign functions,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,About half the time,UnsafeCell,,,,,,,,,,,,,Use safe,,Somewhat easy,,Sometimes,Never,No,Yes,,,,,,Most of the time,Unsure,C,,I write bindings manually and generate bindings using a tool,Probably yes,Definitely yes,No,,,,About half the time,No,Yes,Unsure,Unsure,"bindgen,wasm-bindgen",,Locally,,Somewhat difficult,,,Miri,,Less than once a year,,,Never,Never,,Somewhat likely,,,Sometimes,,,,The Rust Programming Language Forums,,Neither positively nor negatively,Somewhat negatively,About half the time,Strongly agree,40-49,Some college,Man,,"Industry,Open-source contributor",,"""This Week in Rust""",,Yes,No,No,,Amazon
100,54,TRUE,anonymous,,,0,55,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
97,7186,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,15,7,0,Monthly,Yes,No,Yearly,"Operating systems,Web applications - Backend,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Extremely difficult,"MaybeUninit,ManuallyDrop,Box",,"Accessing the fields of a union type,Calling foreign functions,System calls,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,No,,Always,Most of the time,,,,Most of the time,No,No,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Calling foreign functions,System calls,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates,Implementing an unsafe trait",,Always,MaybeUninit,,,,,,,,,,,,,Use safe,Use safe,Somewhat easy,,Never,Most of the time,Yes,Yes,"To provide a more performant equivalent of a safe API,Impossible to encapsulate without imposing safety requirements on the user",,Always,Always,Most of the time,Always,About half the time,C,,I generate bindings using a tool,Might or might not,Probably yes,Unsure,,Box,,Never,Yes,Yes,Sometimes,Sometimes,bindgen,,Locally,,,,,,,Never,"Using uninitialized memory,Out-of-bounds access,Use after free,Null pointer dereference",,Most of the time,Sometimes,"cargo-update,cargo-audit",Neither likely nor unlikely,,,,,,,,,Neither positively nor negatively,Unsure,About half the time,Strongly agree,30-39,Master's degree,Man,,"Academia,Open-source contributor",,"""This Week in Rust""",,No,Yes,No,,
6,103,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,464,TRUE,anonymous,1,,0,0,,Yes,Yes,Yes,1,Yes,7,1,2,Yearly,Yes,No,Yearly,"Embedded systems,Networking & distributed systems,Image & Data processing,Data structures and language-level primitives,Serialization & deserialization",,"Embedded systems,Networking & distributed systems,Data structures and language-level primitives,Serialization & deserialization",,Yes,Yes,Yes,Somewhat difficult,,,"mem::transmute,Calling unsafe functions written in Rust",,No,,Always,Always,,,,,,,I could use a safe pattern but unsafe is easier to implement or more ergonomic.,,,,,,,mem::transmute,,,,,,,,,,,Use safe,Use safe,Somewhat easy,forbid(unsafe_code),Sometimes,Always,No,Yes,,,,,,Always,Most of the time,,,,,,,,,,,,,,,,,,,,,,"cargo fuzz,Miri",,Monthly,,,Sometimes,Sometimes,cargo-geiger,Somewhat likely,Slow performance,,Sometimes,,,,"Reddit (/r/rust),GitHub,The Rust Community Discord",,Somewhat negatively,Neither positively nor negatively,Most of the time,Somewhat agree,18-29,Some high school,Man,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
94,903,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,2,Yes,12,3,4,Monthly,No,No,Monthly,"Operating systems,Embedded systems,Networking & distributed systems,Game development",,"Operating systems,Embedded systems,Game development",,No,No,No,Somewhat difficult,UnsafeCell,,"Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,No,Most of the time,Most of the time,About half the time,,,,,,,Other,I most often use unsafe when reinventing the wheel for learning purposes.,,,,,,,,,,,,,,,,,Use safe,,Neither easy nor difficult,,Never,Most of the time,No,No,,,,,,,,C,,I do not write or generate bindings,Probably yes,Probably yes,Unsure,,,,Never,Unsure,Yes,Most of the time,Sometimes,,,,,,,,,,Monthly,,,Sometimes,Never,,Somewhat likely,,,,,,,,,Somewhat positively,Neither positively nor negatively,Most of the time,Somewhat disagree,18-29,Bachelor's degree,Man,,Other,Hobbit nerd. Have not used rust in industry ,"""This Week in Rust""",,Yes,No,No,,
100,1141,TRUE,anonymous,0.899999976,,0,20,,Yes,Yes,Yes,2,Yes,15,12,0,Monthly,No,Yes,Monthly,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization,Other",scientific programming,"Serialization & deserialization,Other",scientific programming,Yes,No,Yes,Somewhat difficult,MaybeUninit,,"Manual memory allocation,Accessing the fields of a union type,Calling foreign functions,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Calling unsafe functions written in Rust",,No,,Most of the time,Sometimes,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Accessing the fields of a union type,Calling foreign functions,mem::transmute,Dereferencing a raw pointer",,About half the time,MaybeUninit,,,,,,,,,,,,,Unsure,Unsure,Somewhat easy,,Sometimes,Most of the time,No,Yes,,,,,,Sometimes,Always,C,,I generate bindings using a tool,Might or might not,Definitely yes,No,,,,Never,No,No,Always,Always,"bindgen,wasm-bindgen,PyO3",,In CI,,Somewhat easy,,,"AddressSanitizer (ASAN),UndefinedBehaviorSanitizer (UBSAN),Valgrind",,Monthly,"Using uninitialized memory,Out-of-bounds access,Double free,Null pointer dereference",,Most of the time,Never,,Neither likely nor unlikely,,,,,,,The Rust Community Discord,,Neither positively nor negatively,Neither positively nor negatively,Most of the time,Strongly agree,30-39,Bachelor's degree,Man,,Industry,,"""This Week in Rust""",,Yes,Yes,No,,Amazon
100,1462,TRUE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,1,No,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
71,562,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,13,8,0,Weekly,Yes,Yes,Monthly,"Operating systems,Embedded systems",,"Operating systems,Embedded systems",,No,Yes,No,Somewhat difficult,"Pin,Box,Arc,UnsafeCell,Mutex",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Yes,Most of the time,Most of the time,Sometimes,,,,,No,Yes,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Manual memory allocation,Implementing a custom allocator,Calling foreign functions,Mutable static variables,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,Never,UnsafeCell,,,,,,"Manual memory allocation,Dereferencing a raw pointer,Calling unsafe functions written in Rust,Implementing an unsafe trait",,UnsafeCell,,Sometimes,Large-scale components purpose-built for performance.,,Use safe,Use safe,Somewhat difficult,,Sometimes,Most of the time,No,Yes,,,,,,Most of the time,Most of the time,C,,I write bindings manually,Probably yes,Probably yes,No,,,,Never,No,No,Always,Unsure,,,,,,,,,,Weekly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,1497,TRUE,anonymous,0.699999988,,0,0,,Yes,Yes,Yes,1,Yes,7,4,4,Monthly,Yes,No,Monthly,"Operating systems,Embedded systems,Web applications - Backend,Serialization & deserialization",,"Operating systems,Embedded systems,Web applications - Backend,Serialization & deserialization",,No,No,No,Somewhat easy,,,"Manual memory allocation,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,No,,Most of the time,Always,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,"Dereferencing a raw pointer,Pointer arithmetic",,Most of the time,,,,,,,,,,,,,,Use safe,,Somewhat easy,deny(unsafe_code),Sometimes,Always,No,Yes,,,,,,Always,About half the time,,,,,,,,,,,,,,,,,,,,,,Valgrind,,Never,"Out-of-bounds access,Memory leak",,Always,Always,"cargo-update,cargo-audit",Extremely likely,,,,,,,,,Somewhat negatively,Unsure,About half the time,Somewhat agree,18-29,High school diploma/GED,Man,,Open-source contributor,,"""This Week in Rust""",,No,No,No,,
13,111,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,5,Yes,10,8,7,Weekly,Yes,Yes,Weekly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,77,FALSE,anonymous,0.800000012,,0,0,,Yes,Yes,Yes,10,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
19,333709,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,2,Yes,6,2,1,Yearly,No,No,Less than once a year,"Operating systems,Web applications - Frontend,Web applications - Backend,Data structures and language-level primitives,Static analysis",,Static analysis,,No,No,Yes,Neither easy nor difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28,672,FALSE,anonymous,1,,0,75,,Yes,Yes,Yes,2,Yes,7,5,4,Weekly,No,Yes,Weekly,"Operating systems,Embedded systems,Web applications - Frontend,Web applications - Backend,Networking & distributed systems,Web browsers,Data structures and language-level primitives,Serialization & deserialization",,"Operating systems,Embedded systems,Data structures and language-level primitives",,Yes,No,Yes,Extremely difficult,"MaybeUninit,Pin,Box,Mutex",,"Manual memory allocation,Implementing a custom allocator,Accessing the fields of a union type,Calling foreign functions,Self-referential structs,Mutable static variables,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust,In-place initialization or updates",,No,,Most of the time,Always,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4,9607,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41,196,FALSE,anonymous,0.899999976,,0,0,,Yes,Yes,Yes,3,Yes,20,1,4,Yearly,No,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Image & Data processing,Game development,Data structures and language-level primitives,Serialization & deserialization",,"Web applications - Frontend,Web applications - Backend,Game development",,No,No,Yes,Somewhat difficult,Other,none,Other,none,No,,,,,,,,,,I am not aware of a safe alternative at any level of ease-of-use or performance.,,,,Unsure,,,,,,,,,,,,,,Use safe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
36,579,FALSE,anonymous,1,,0,0,,Yes,Yes,Yes,4,Yes,20,5,0,Yearly,No,No,Less than once a year,"Embedded systems,Web applications - Frontend,Web applications - Backend,Database systems,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,"Web applications - Backend,Database systems,Networking & distributed systems,Non-JIT Compilation,Interpreters & runtime systems,Data structures and language-level primitives,Serialization & deserialization,Static analysis",,Yes,Yes,Yes,Somewhat difficult,"MaybeUninit,RefCell",,"System calls,Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic,Calling unsafe functions written in Rust",,Yes,,Always,Never,,,,,,,"I could use a safe pattern but unsafe is faster or more space-efficient.,I am not aware of a safe alternative at any level of ease-of-use or performance.",,"Self-referential structs,mem::transmute,Dereferencing a raw pointer,Pointer arithmetic",,Most of the time,"MaybeUninit,ManuallyDrop",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,116,FALSE,anonymous,0.899999976,,0,75,,Yes,Yes,Yes,1,Yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,